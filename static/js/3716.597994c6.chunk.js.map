{"version":3,"file":"static/js/3716.597994c6.chunk.js","mappings":"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","sources":["../node_modules/@umetrics/sartorius-ui-utils/src/performance/perfDebounce.ts","../node_modules/@umetrics/sartorius-ui-grid-layout/src/util/areLayoutsDifferent.ts","../node_modules/@umetrics/sartorius-ui-grid-layout/src/util/intersects.ts","../node_modules/@umetrics/sartorius-ui-grid-layout/src/util/getItemIntersect.ts","../node_modules/@umetrics/sartorius-ui-grid-layout/src/util/resolveIntersection.ts","../node_modules/@umetrics/sartorius-ui-grid-layout/src/util/sortLayout.ts","../node_modules/@umetrics/sartorius-ui-grid-layout/src/util/fireEvent.ts","../node_modules/@umetrics/sartorius-ui-grid-layout/src/util/getMasonryLayout.ts","../node_modules/@umetrics/sartorius-ui-grid-layout/src/util/moveItemAwayFromIntersect.ts","../node_modules/@umetrics/sartorius-ui-grid-layout/src/util/moveItem.ts","../node_modules/@umetrics/sartorius-ui-grid-layout/src/util/getAllIntersects.ts","../node_modules/@umetrics/sartorius-ui-grid-layout/src/metadata.ts","../node_modules/@umetrics/sartorius-ui-grid-layout/src/util/deepCopy.ts","../node_modules/@umetrics/sartorius-ui-grid-layout/src/util/getMouseTouchLocation.ts","../node_modules/@umetrics/sartorius-ui-grid-layout/src/util/matchSelector.ts","../node_modules/@umetrics/sartorius-ui-grid-layout/src/gridLayoutDraggable.ts","../node_modules/@umetrics/sartorius-ui-grid-layout/src/util/getTouchIdentifier.ts","../node_modules/@umetrics/sartorius-ui-grid-layout/src/gridLayoutDraggableStyle.ts","../node_modules/@umetrics/sartorius-ui-grid-layout/src/gridLayoutResizable.ts","../node_modules/@umetrics/sartorius-ui-grid-layout/src/gridLayoutResizableStyle.ts","../node_modules/@umetrics/sartorius-ui-grid-layout/src/gridLayoutItem.ts","../node_modules/@umetrics/sartorius-ui-grid-layout/src/gridLayoutItemStyle.ts","../node_modules/@umetrics/sartorius-ui-grid-layout/src/gridLayout.ts","../node_modules/@umetrics/sartorius-ui-grid-layout/src/util/findLayoutBottom.ts","../node_modules/@umetrics/sartorius-ui-grid-layout/src/util/fixLayoutBounds.ts","../node_modules/@umetrics/sartorius-ui-grid-layout/src/util/condenseLayout.ts","../node_modules/@umetrics/sartorius-ui-grid-layout/src/gridLayoutStyle.ts"],"sourcesContent":["type DebouncedFunction<T extends (...args: any) => any> = (...args: Parameters<T>) => ReturnType<T>;\n\n// Polyfill for requestIdleCallback and cancelIdleCallback to make function compatible with Safari iOS.\nexport const requestIdleCallback =\n    window.requestIdleCallback ||\n    function (callback: Function) {\n        return setTimeout(() => {\n            callback({\n                didTimeout: false,\n                timeRemaining: () => Math.max(0, 50), // Simulates idle time remaining\n            });\n        }, 50);\n    };\n\nexport const cancelIdleCallback = window.cancelIdleCallback || clearTimeout;\n\n/**\n * Returns a debounced version of the provided function that delays its execution.\n * If a `limit` is provided, the function is debounced using a timeout with the specified delay (ms).\n * If the `limit` is set to `idle`, the function is debounced based on the browser's idle time using `requestIdleCallback`.\n *\n * @param func The function to debounce.\n * @param limit The delay in milliseconds. 'idle' and the function will be executed during idle time.\n *              Defaults to 50 milliseconds.\n * @return A debounced version of the original function, which delays execution according to the `limit` or idle time.\n *\n * Example usage:\n *\n * ```typescript\n *        private _debouncedCallback;\n *        if (!this._debouncedCallback) {\n *             this._debouncedCallback = perfDebounce((arg) => {\n *                 console.log('debounced', arg);\n *             }, 'idle');\n *         }\n *         this._debouncedCallback(arg);\n * ```\n */\nexport function perfDebounce<T extends (...args: any) => any>(\n    func: T,\n    limit: number | 'idle' = 50\n): DebouncedFunction<T> {\n    let timeout: any;\n    let idleCallback: any;\n    let lastResult: ReturnType<T>;\n\n    return function (this: any): ReturnType<T> {\n        // eslint-disable-next-line prefer-rest-params\n        const args = arguments;\n        const later = () => {\n            timeout = null;\n            lastResult = func(...args);\n        };\n        if (limit === 'idle') {\n            if (idleCallback) {\n                cancelIdleCallback(idleCallback);\n            }\n            // Schedule the work during idle time if limit is -1\n            idleCallback = requestIdleCallback(() => {\n                lastResult = func(...args);\n            });\n        } else {\n            clearTimeout(timeout);\n            timeout = setTimeout(later, limit);\n        }\n        return lastResult;\n    };\n}\n","import type { Layout } from '../types';\n\nexport const areLayoutsDifferent = (a: Layout, b: Layout): boolean => {\n    if (a === b) {\n        return false;\n    }\n    return (\n        a.length !== b.length ||\n        a.some((aItem, itemIndex) => {\n            const bItem = b[itemIndex];\n            const aItemKeys = Object.keys(aItem);\n            return aItemKeys.length !== Object.keys(bItem).length || aItemKeys.some((key) => aItem[key] !== bItem[key]);\n        })\n    );\n};\n","import type { LayoutItem } from '../types';\n\nexport const intersects = (item1: LayoutItem, item2: LayoutItem): boolean => {\n    // same element\n    if (item1.key === item2.key) {\n        return false;\n    }\n\n    // item1 is left of item2\n    if (item1.posX + item1.width <= item2.posX) {\n        return false;\n    }\n\n    // item1 is right of item2\n    if (item1.posX >= item2.posX + item2.width) {\n        return false;\n    }\n\n    // item1 is above item2\n    if (item1.posY + item1.height <= item2.posY) {\n        return false;\n    }\n\n    // item1 is below item2\n    return item1.posY < item2.posY + item2.height;\n};\n","import type { LayoutItem } from '../types';\nimport { intersects } from './intersects';\n\nexport const getItemIntersect = (layout: LayoutItem[], layoutItem: LayoutItem): LayoutItem | undefined => {\n    for (const item of layout) {\n        if (intersects(item, layoutItem)) {\n            return item;\n        }\n    }\n    return undefined;\n};\n","import type { LayoutItem } from '../types';\nimport { intersects } from './intersects';\n\nexport const resolveIntersection = (layout: LayoutItem[], item: LayoutItem, newYPos: number): void => {\n    item.posY += 1;\n    const itemIndex = layout\n        .map((layoutItem: LayoutItem) => {\n            return layoutItem.key;\n        })\n        .indexOf(item.key);\n\n    for (let i = itemIndex + 1; i < layout.length; i++) {\n        const otherItem = layout[i];\n\n        if (otherItem.posY > item.posY + item.height) {\n            break;\n        }\n\n        if (intersects(item, otherItem)) {\n            resolveIntersection(layout, otherItem, newYPos + item.height);\n        }\n    }\n\n    item.posY = newYPos;\n};\n","import type { Layout } from '../types';\n\nexport const sortLayout = (layout: Layout): Layout => {\n    return (\n        layout &&\n        layout.slice(0).sort(function (a, b) {\n            if (a.posY > b.posY || (a.posY === b.posY && a.posX > b.posX)) {\n                return 1;\n            } else if (a.posY === b.posY && a.posX === b.posX) {\n                return 0;\n            }\n            return -1;\n        })\n    );\n};\n","export const fireEvent = (target: EventTarget, event: string, detail: Record<string, any> = {}): void => {\n    target.dispatchEvent(new CustomEvent(event, { detail }));\n};\n","import type { Layout, LayoutItem } from '../types';\nimport { sortLayout } from './sortLayout';\n\n// Finds the shortest column the item can fit into\nconst getMinItemColumn = (\n    item: LayoutItem,\n    columnHeights: number[],\n    columns: number\n): { posX: number; posY: number } => {\n    // If the item is just 1 column, just find the shortest column and put it there\n    if (item.width === 1) {\n        const minPosY2 = Math.min(...columnHeights);\n        return { posX: columnHeights.indexOf(minPosY2), posY: minPosY2 };\n    }\n\n    const columnHeightGroup: number[] = [];\n    // How many spans of columns can the item go\n    const columnSpans = columns + 1 - item.width;\n\n    // For each of the spans, find the max Y\n    for (let i = 0; i < columnSpans; i++) {\n        const groupColumnHeights = columnHeights.slice(i, i + item.width);\n        columnHeightGroup[i] = Math.max(...groupColumnHeights);\n    }\n\n    // Find the shortest of the spans\n    const minPosY = Math.min(...columnHeightGroup);\n    return { posX: columnHeightGroup.indexOf(minPosY), posY: minPosY };\n};\n\nexport const getMasonryLayout = (layout: Layout, columns: number): Layout => {\n    const masonryLayout: Layout = [];\n    const sortedLayout: Layout = sortLayout(layout) || [];\n    const columnHeights: number[] = new Array(columns).fill(0);\n\n    for (const item of sortedLayout) {\n        if (item.width > columns) {\n            item.width = columns;\n        }\n\n        const itemPostion = getMinItemColumn(item, columnHeights, columns);\n\n        const newItem = { ...item, ...itemPostion };\n\n        masonryLayout.push(newItem);\n\n        // Update Columns Heights from new item position\n        for (let i = itemPostion.posX; i < itemPostion.posX + item.width; i++) {\n            columnHeights[i] += item.height;\n        }\n    }\n\n    return masonryLayout;\n};\n","import type { Layout, LayoutItem } from '../types';\nimport { moveItem } from './moveItem';\nimport { getItemIntersect } from './getItemIntersect';\n\nexport const moveItemAwayFromIntersect = (\n    layout: Layout,\n    intersectItem: LayoutItem,\n    itemToMove: LayoutItem,\n    cols: number,\n    isUserMove: boolean\n): Layout => {\n    if (isUserMove) {\n        isUserMove = false;\n\n        const tempItem: LayoutItem = {\n            posX: itemToMove.posX,\n            posY: Math.max(itemToMove.height - intersectItem.posY, 0),\n            width: itemToMove.width,\n            height: itemToMove.height,\n            key: '-1',\n        };\n\n        if (!getItemIntersect(layout, tempItem)) {\n            return moveItem(layout, itemToMove, undefined, tempItem.posY, cols, isUserMove);\n        }\n    }\n\n    return moveItem(layout, itemToMove, undefined, itemToMove.posY + 1, cols, isUserMove);\n};\n","import type { Layout, LayoutItem } from '../types';\nimport { sortLayout } from './sortLayout';\nimport { getAllIntersects } from './getAllIntersects';\nimport { moveItemAwayFromIntersect } from './moveItemAwayFromIntersect';\n\nexport const moveItem = (\n    layout: Layout,\n    item: LayoutItem,\n    newPosX: number | undefined,\n    newPosY: number | undefined,\n    columns: number,\n    isUserMove: boolean\n): Layout => {\n    if (item.posY === newPosY && item.posX === newPosX) {\n        return layout;\n    }\n\n    const oldPosY = item.posY;\n\n    if (newPosX !== undefined) {\n        item.posX = newPosX;\n    }\n\n    if (newPosY !== undefined) {\n        item.posY = newPosY;\n    }\n\n    item.hasMoved = true;\n\n    let sorted = sortLayout(layout);\n    const movingUp = newPosY !== undefined && oldPosY >= newPosY;\n\n    if (movingUp) {\n        sorted = sorted.reverse();\n    }\n    const allIntersects = getAllIntersects(sorted, item);\n\n    const itemIndex = layout.findIndex((i) => i.key === item.key);\n    layout[itemIndex] = item;\n\n    // Move each item that intersects away from this element.\n    for (let i = 0, len = allIntersects.length; i < len; i++) {\n        const intersectItem = allIntersects[i];\n\n        if (intersectItem.hasMoved) {\n            continue;\n        }\n\n        layout = moveItemAwayFromIntersect([...layout], item, intersectItem, columns, isUserMove);\n    }\n\n    return layout;\n};\n","import type { Layout, LayoutItem } from '../types';\nimport { intersects } from './intersects';\n\nexport const getAllIntersects = (layout: Layout, layoutItem: LayoutItem): Array<LayoutItem> => {\n    return layout.filter((l) => intersects(l, layoutItem));\n};\n","/*\n * Metadata build info for package. Managed at build time by task tools/metadata.ts\n */\nexport const version = '0.0.0';\nexport const buildDate = '2021-02-02- 02:02:02.000';\n","export const deepcopy = (value) => {\n    if (!(!!value && typeof value == 'object')) {\n        return value;\n    }\n    if (Object.prototype.toString.call(value) === '[object Date]') {\n        return new Date(value.getTime());\n    }\n    if (Array.isArray(value)) {\n        return value.map(deepcopy);\n    }\n    const result = {};\n    Object.keys(value).forEach(function (key) {\n        result[key] = deepcopy(value[key]);\n    });\n    return result;\n};\n","import type { MouseTouchLocation } from '../types';\n\nconst getTouch = (e: TouchEvent, identifier: number): MouseTouchLocation => {\n    const touchObj =\n        (e.targetTouches && Array.prototype.find.call(e.targetTouches, (t) => identifier === t.identifier)) ||\n        (e.changedTouches && Array.prototype.find.call(e.changedTouches, (t) => identifier === t.identifier));\n\n    return {\n        x: touchObj ? touchObj.clientX : 0,\n        y: touchObj ? touchObj.clientY : 0,\n    };\n};\n\nexport const getMouseTouchLocation = (\n    ev: MouseEvent | TouchEvent,\n    touchIdentifier: number | undefined\n): MouseTouchLocation | undefined => {\n    if (ev.type.startsWith('touch')) {\n        if (touchIdentifier === undefined) {\n            return;\n        }\n\n        const touchEvent = ev as TouchEvent;\n        const touchObj = getTouch(touchEvent, touchIdentifier);\n\n        return {\n            x: touchObj.x,\n            y: touchObj.y,\n        };\n    }\n\n    return {\n        x: (ev as MouseEvent).clientX,\n        y: (ev as MouseEvent).clientY,\n    };\n};\n","let matchesSelectorFunc: string | undefined = '';\n\nconst isFunction = (func: any): boolean => {\n    return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]';\n};\n\nconst matchesSelector = (el: Node, selector: string): boolean => {\n    if (!matchesSelectorFunc) {\n        matchesSelectorFunc = [\n            'matches',\n            'webkitMatchesSelector',\n            'mozMatchesSelector',\n            'msMatchesSelector',\n            'oMatchesSelector',\n        ].find((method) => isFunction(el[method]));\n    }\n\n    if (!matchesSelectorFunc || !isFunction(el[matchesSelectorFunc])) {\n        return false;\n    }\n\n    return matchesSelectorFunc && el[matchesSelectorFunc](selector);\n};\n\nexport const matchesSelectorAndParentsTo = (\n    ev: MouseEvent | TouchEvent,\n    selector: string,\n    baseNode: Node\n): Node | null => {\n    const path = ev.composedPath().reverse();\n\n    while (path.length) {\n        const node: Node | null = path.pop() as Node;\n        if (matchesSelector(node, selector)) {\n            return node;\n        }\n\n        if (node === baseNode) {\n            return null;\n        }\n    }\n    return null;\n};\n","import { BaseElement, defineElement, html, property, TemplateResult } from '@umetrics/sartorius-ui-base';\nimport { fireEvent } from './util/fireEvent';\nimport { getMouseTouchLocation } from './util/getMouseTouchLocation';\nimport { getTouchIdentifier } from './util/getTouchIdentifier';\nimport { matchesSelectorAndParentsTo } from './util/matchSelector';\nimport { version } from './metadata';\nimport { gridLayoutDraggableStyles } from './gridLayoutDraggableStyle';\n\n@defineElement({ tagName: 'grid-layout-draggable', styles: gridLayoutDraggableStyles, version })\nexport class GridLayoutDraggable extends BaseElement /*implements HeaderProperties*/ {\n    @property({ type: Array })\n    public grid?: [number, number];\n    @property({ type: Boolean, reflect: true })\n    public disabled = false;\n    @property()\n    public handle?: string;\n\n    private startX?: number;\n    private startY?: number;\n    private _dragging = false;\n    private _touchIdentifier?: number;\n    private _draggable?;\n    private _draggableHeader?;\n    private _dragHandle: string | undefined;\n\n    protected firstUpdated(): void {\n        this.addEventListener('mousedown', this._dragStart.bind(this), {\n            capture: true,\n            passive: false,\n        });\n        this.addEventListener('touchstart', this._dragStart.bind(this), {\n            capture: true,\n            passive: false,\n        });\n        document.addEventListener('mousemove', this._drag.bind(this), {\n            capture: true,\n            passive: false,\n        });\n        document.addEventListener('touchmove', this._drag.bind(this), {\n            capture: true,\n            passive: false,\n        });\n        document.addEventListener('mouseup', this._dragEnd.bind(this), {\n            capture: true,\n            passive: false,\n        });\n        document.addEventListener('touchcancel', this._dragEnd.bind(this), {\n            capture: true,\n            passive: false,\n        });\n        document.addEventListener('touchend', this._dragEnd.bind(this), {\n            capture: true,\n            passive: false,\n        });\n        this.addEventListener('container-rendered', this._handleContainer.bind(this));\n    }\n\n    protected render(): TemplateResult {\n        return html`<slot></slot>`;\n    }\n\n    private _initTempHandle() {\n        if (!this.handle) return this._dragHandle;\n        else return this.handle;\n    }\n\n    private _dragStart(ev: MouseEvent | TouchEvent): void {\n        if (ev.composedPath().find((s) => (s as Element).tagName === 'BUTTON')) {\n            // Click on some button, intention is probably not to drag\n            return;\n        }\n        if (!this.disabled) {\n            const tempHandle = this._initTempHandle();\n            const node = tempHandle ? matchesSelectorAndParentsTo(ev, tempHandle, this.offsetParent as Node) : null;\n            if (node !== null) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                if (this._draggable) {\n                    this._draggableHeader.removeAttribute('dropped');\n                    this._draggableHeader.setAttribute('lifted', 'true');\n                }\n                if (ev.type === 'touchstart') {\n                    this._touchIdentifier = getTouchIdentifier(ev as TouchEvent);\n                }\n                const pos = getMouseTouchLocation(ev, this._touchIdentifier);\n                if (pos) {\n                    this.startX = pos.x;\n                    this.startY = pos.y;\n                    this._dragging = true;\n                    fireEvent(this, 'dragStart', {\n                        startX: this.startX,\n                        startY: this.startY,\n                        node,\n                    });\n                }\n            }\n        }\n    }\n\n    private _drag(ev: MouseEvent | TouchEvent): void {\n        if (this._dragging && !this.disabled) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            const pos = getMouseTouchLocation(ev, this._touchIdentifier);\n\n            if (!pos) {\n                return;\n            }\n\n            let deltaX = pos.x - this.startX!;\n            let deltaY = pos.y - this.startY!;\n\n            if (this.grid) {\n                deltaX = Math.round(deltaX / this.grid[0]) * this.grid[0];\n                deltaY = Math.round(deltaY / this.grid[1]) * this.grid[1];\n            }\n\n            if (deltaX || deltaY) {\n                fireEvent(this, 'dragging', {\n                    deltaX,\n                    deltaY,\n                });\n            }\n        }\n    }\n\n    private _dragEnd(ev: MouseEvent | TouchEvent): void {\n        if (this._dragging && !this.disabled) {\n            ev.preventDefault();\n            ev.stopPropagation();\n\n            const pos = getMouseTouchLocation(ev, this._touchIdentifier);\n            if (!pos) {\n                return;\n            }\n\n            const deltaX = pos.x - this.startX!;\n            const deltaY = pos.y - this.startY!;\n            const isAcceptedClickArea = deltaX < 5 && deltaX > -5 && deltaY < 5 && deltaY > -5;\n\n            if (this._draggableHeader && this._draggable.clickable && isAcceptedClickArea) {\n                this._draggableHeader.setAttribute('clicked', 'true');\n            }\n            this._touchIdentifier = undefined;\n            this._dragging = false;\n            if (this._draggable) {\n                this._draggableHeader.removeAttribute('lifted');\n                this._draggableHeader.setAttribute('dropped', 'true');\n            }\n\n            fireEvent(this, 'dragEnd');\n        }\n    }\n\n    private _handleContainer(e) {\n        e.detail.item.draggable = true;\n        this._draggableHeader = e.detail.item.shadowRoot.querySelector('[class$=\"-header\"]');\n        if (this._draggableHeader) {\n            this._dragHandle = '.' + this._draggableHeader.className;\n        }\n        this._draggable = e.detail.item;\n    }\n}\n","export const getTouchIdentifier = (e: TouchEvent): number => {\n    if (e.targetTouches && e.targetTouches[0]) return e.targetTouches[0].identifier;\n    if (e.changedTouches && e.changedTouches[0]) return e.changedTouches[0].identifier;\n    return 0;\n};\n","import { css, GenerateStyles, style } from '@umetrics/sartorius-ui-base';\n\nexport const gridLayoutDraggableStyles: GenerateStyles = () => {\n    return [style, css``];\n};\n","import { BaseElement, defineElement, html, property, TemplateResult } from '@umetrics/sartorius-ui-base';\n\nimport type { DraggingEvent, LGLDomEvent } from './types';\nimport { fireEvent } from './util/fireEvent';\nimport { version } from './metadata';\nimport { GridLayoutDraggable } from './gridLayoutDraggable';\nimport { gridLayoutResizableStyles } from './gridLayoutResizableStyle';\n\n@defineElement({\n    tagName: 'grid-layout-resizable',\n    styles: gridLayoutResizableStyles,\n    version,\n    //sub: [GridLayoutDraggable],\n})\nexport class GridLayoutResizable extends BaseElement /*implements HeaderProperties*/ {\n    @property({ attribute: false })\n    public handle?: string;\n    @property({ type: Boolean })\n    public disabled = false;\n\n    private startWidth?: number;\n    private startHeight?: number;\n    private _resizeKey?;\n\n    public connectedCallback(): void {\n        GridLayoutResizable.subRegister(GridLayoutDraggable);\n        super.connectedCallback();\n    }\n\n    protected render(): TemplateResult {\n        return html`\n            ${this.disabled\n                ? ''\n                : html`\n                      <${GridLayoutDraggable.tag}\n                          .handle=${this.handle}\n                          @dragging=${this._resize}\n                          @dragStart=${this._resizeStart}\n                          @dragEnd=${this._resizeEnd}\n                      >\n                          <slot></slot>\n                      </${GridLayoutDraggable.tag}>\n                  `}\n        `;\n    }\n\n    private _resizeStart(e: Event): void {\n        const ev = e as CustomEvent;\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        this.startWidth = this.clientWidth;\n        this.startHeight = this.clientHeight;\n        const node = ev.detail && ev.detail.node;\n        this._resizeKey =\n            (node && ['bc', 'bl', 'cl', 'cr', 'tr', 'tc', 'tl'].find((k) => node.matches(`[class*=\"-${k}\"]`))) || 'br';\n\n        fireEvent(this, 'resizeStart');\n    }\n\n    private _resize(ev: LGLDomEvent<DraggingEvent>): void {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.startWidth !== undefined && this.startHeight !== undefined) {\n            const { deltaX, deltaY } = ev.detail;\n\n            if (deltaY !== 0 || deltaX !== 0) {\n                fireEvent(this, 'resize', {\n                    ...this._getResizeProps(this.startWidth, this.startHeight, deltaX, deltaY),\n                    deltaX,\n                    deltaY,\n                });\n            }\n        }\n    }\n\n    private _getResizeProps(width, height, deltaX, deltaY) {\n        switch (this._resizeKey) {\n            case 'bc':\n                return { width, height: height + deltaY, dragX: false, dragY: false };\n            case 'bl':\n                return { width: width - deltaX, height: height + deltaY, dragX: true, dragY: true };\n\n            case 'cr':\n                return { width: width + deltaX, height, dragX: false, dragY: false };\n            case 'cl':\n                return { width: width - deltaX, height, dragX: true, dragY: false };\n\n            case 'tr':\n                return { width: width + deltaX, height: height - deltaY, dragX: false, dragY: true };\n            case 'tc':\n                return { width, height: height - deltaY, dragX: false, dragY: true };\n            case 'tl':\n                return { width: width - deltaX, height: height - deltaY, dragX: true, dragY: true };\n            default: // and 'br'\n                return { width: width + deltaX, height: height + deltaY, dragX: false, dragY: false };\n        }\n    }\n\n    private _resizeEnd(ev: Event): void {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        this.startWidth = undefined;\n        this.startHeight = undefined;\n\n        fireEvent(this, 'resizeEnd');\n    }\n}\n","import { css, GenerateStyles, style } from '@umetrics/sartorius-ui-base';\n\nexport const gridLayoutResizableStyles: GenerateStyles = () => {\n    return [\n        style,\n        css`\n            :host {\n                position: relative;\n                display: block;\n                height: 100%;\n            }\n        `,\n    ];\n};\n","import {\n    BaseElement,\n    createClassName,\n    defineElement,\n    html,\n    property,\n    PropertyValues,\n    query,\n    state,\n    TemplateResult,\n} from '@umetrics/sartorius-ui-base';\n\nimport type { DraggingEvent, LGLDomEvent, ResizingEvent } from './types';\nimport { fireEvent } from './util/fireEvent';\nimport { version } from './metadata';\nimport { GridLayoutDraggable } from './gridLayoutDraggable';\nimport { GridLayoutResizable } from './gridLayoutResizable';\nimport { gridLayoutItemStyles } from './gridLayoutItemStyle';\n\n@defineElement({\n    tagName: 'grid-layout-item',\n    styles: gridLayoutItemStyles,\n    version,\n    //sub: [GridLayoutDraggable, GridLayoutResizable],\n})\nexport class GridLayoutItem extends BaseElement /*implements HeaderProperties*/ {\n    @property({ type: Number })\n    public width!: number;\n    @property({ type: Number })\n    public height!: number;\n    @property({ type: Number })\n    public posX!: number;\n    @property({ type: Number })\n    public posY!: number;\n    @property({ type: Number })\n    public rowHeight!: number;\n    @property({ type: Number })\n    public columns!: number;\n    @property({ type: Number })\n    public parentWidth!: number;\n    @property({ type: Array })\n    public margin: [number, number] = [0, 0];\n    @property({ type: Array })\n    public containerPadding: [number, number] = [0, 0];\n    @property({ type: Number })\n    public minWidth = 1;\n    @property({ type: Number })\n    public minHeight = 1;\n    @property({ type: Number })\n    public maxWidth?: number;\n    @property({ type: Number })\n    public maxHeight?: number;\n    @property({ type: Boolean })\n    public isDraggable = true;\n    @property({ type: Boolean })\n    public isResizable = true;\n    @property({ attribute: false })\n    public resizeHandle?: string;\n    @property({ attribute: false })\n    public dragHandle?: string;\n    @property()\n    public key!: string;\n\n    @property({ type: Boolean }) private _isDragging = false;\n\n    @property({ type: Boolean }) private _isResizing = false;\n\n    @property({ type: Boolean }) private _firstLayoutFinished = false;\n\n    @query('div')\n    private gridItem!: HTMLElement;\n\n    @state() private _itemTopPX?: number;\n\n    @state() private _itemLeftPX?: number;\n\n    @state() private _itemWidthPX?: number;\n\n    @state() private _itemHeightPX?: number;\n\n    private _startTop?: number;\n\n    private _startLeft?: number;\n\n    private _startPosX?: number;\n\n    private _startPosY?: number;\n\n    private _minWidthPX?: number;\n\n    private _maxWidthPX?: number;\n\n    private _minHeightPX?: number;\n\n    private _maxHeightPX?: number;\n\n    private _fullColumnWidth?: number;\n\n    private _fullRowHeight?: number;\n\n    private _columnWidth?: number;\n\n    public connectedCallback(): void {\n        GridLayoutItem.subRegister(GridLayoutDraggable);\n        GridLayoutItem.subRegister(GridLayoutResizable);\n        super.connectedCallback();\n    }\n\n    protected updated(changedProps: PropertyValues): void {\n        // Set up all the calculations that are needed in the drag/resize events\n        // No need to calculate them all the time unless they change\n        if (\n            changedProps.has('parentWidth') ||\n            changedProps.has('margin') ||\n            changedProps.has('columns') ||\n            changedProps.has('containerPadding') ||\n            changedProps.has('minHeight') ||\n            changedProps.has('minWidth') ||\n            changedProps.has('maxWidth') ||\n            changedProps.has('maxHeight') ||\n            changedProps.has('rowHeight') ||\n            changedProps.has('posX') ||\n            (changedProps.has('_isDragging') && !this._isDragging)\n        ) {\n            this._columnWidth =\n                (this.parentWidth - this.margin[0] * (this.columns - 1) - this.containerPadding[0] * 2) / this.columns;\n\n            this._fullColumnWidth = this._columnWidth + this.margin[0];\n            this._fullRowHeight = this.rowHeight + this.margin[1];\n\n            this._minWidthPX = this._fullColumnWidth * this.minWidth - this.margin[0];\n            const maxWidthUnits =\n                this.maxWidth !== undefined\n                    ? Math.min(this.maxWidth, this.columns - this.posX)\n                    : this.columns - this.posX;\n            this._maxWidthPX = this._fullColumnWidth * maxWidthUnits - this.margin[0];\n            this._minHeightPX = this._fullRowHeight * this.minHeight - this.margin[1];\n            this._maxHeightPX = this._fullRowHeight * (this.maxHeight || Infinity) - this.margin[1];\n        }\n\n        if (this._isDragging) {\n            return;\n        }\n\n        this._itemLeftPX = Math.round(this.posX * this._fullColumnWidth! + this.containerPadding[0]);\n\n        this._itemTopPX = !this.parentWidth\n            ? 0\n            : Math.round(this.posY * this._fullRowHeight! + this.containerPadding[1]);\n\n        if (this._isResizing) {\n            return;\n        }\n\n        this._itemWidthPX = this.width * this._columnWidth! + Math.max(0, this.width - 1) * this.margin[0];\n\n        this._itemHeightPX = this.height * this.rowHeight + Math.max(0, this.height - 1) * this.margin[1];\n\n        if (!this._firstLayoutFinished && this.parentWidth > 0) {\n            setTimeout(() => (this._firstLayoutFinished = true), 200);\n        }\n    }\n\n    protected render(): TemplateResult {\n        const [baseClassName, rootClasses] = createClassName(this.tagName.toLowerCase(), {\n            dragging: this._isDragging,\n            resizing: this._isResizing,\n            finished: this._firstLayoutFinished,\n        });\n\n        let gridItemHTML = html`<slot></slot>`;\n\n        if (this.isDraggable) {\n            gridItemHTML = html`\n                <${GridLayoutDraggable.tag}\n                    class='${baseClassName}-drag'\n                    .handle=${this.dragHandle}\n                    @dragStart=${this._dragStart}\n                    @dragging=${this._drag}\n                    @dragEnd=${this._dragEnd}\n                >\n                    ${gridItemHTML}\n                </${GridLayoutDraggable.tag}>\n            `;\n        }\n\n        if (this.isResizable) {\n            gridItemHTML = html`\n                <${GridLayoutResizable.tag}\n                    class='${baseClassName}-resize'\n                    .handle=${this.resizeHandle}\n                    @resizeStart=${this._resizeStart}\n                    @resize=${this._resize}\n                    @resizeEnd=${this._resizeEnd}\n                >\n                    ${gridItemHTML}\n                </${GridLayoutResizable.tag}>\n            `;\n        }\n\n        return html`\n            <div\n                class=\"${rootClasses}\"\n                style=\"left: ${this._itemLeftPX}px;top: ${this._itemTopPX}px;width: ${this\n                    ._itemWidthPX}px; height: ${this._itemHeightPX}px\"\n            >\n                ${gridItemHTML}\n            </div>\n        `;\n    }\n\n    private _resizeStart(): void {\n        this._isResizing = true;\n        this._isDragging = false;\n        this._initDragStart();\n\n        fireEvent(this, 'resizeStart');\n    }\n\n    private _resize(ev: LGLDomEvent<ResizingEvent>): void {\n        if (this._isResizing) {\n            let { width, height } = ev.detail;\n            const { deltaX, deltaY, dragX, dragY } = ev.detail;\n            const newPos = this._calcDragPos(deltaX, deltaY);\n\n            // update width and height to be within contraints\n            width = Math.max(this._minWidthPX!, width);\n            width = Math.min(this._maxWidthPX!, width);\n            height = Math.max(this._minHeightPX!, height);\n            height = Math.min(this._maxHeightPX!, height);\n\n            // Go ahead an update the width and height of the element (this won't affect the layout)\n            this._itemWidthPX = width;\n            this._itemHeightPX = height;\n\n            // Calculate the new width and height in grid units\n            const newWidth = Math.round((width + this.margin[0]) / this._fullColumnWidth!);\n            const newHeight = Math.round((height + this.margin[1]) / this._fullRowHeight!);\n\n            // if the grid units don't change, don't send the update to the layout\n            if (newWidth !== this.width || newHeight !== this.height) {\n                fireEvent(this, 'resize', {\n                    newWidth,\n                    newHeight,\n                    newPosX: dragX && newPos ? newPos.newPosX : undefined,\n                    newPosY: dragY && newPos ? newPos.newPosY : undefined,\n                });\n            }\n        }\n    }\n\n    private _resizeEnd(): void {\n        this._isResizing = false;\n        fireEvent(this, 'resizeEnd');\n    }\n\n    private _dragStart(): void {\n        if (this.isDraggable) {\n            this._initDragStart();\n            this._isDragging = true;\n            fireEvent(this, 'dragStart');\n        }\n    }\n\n    private _initDragStart() {\n        const rect = this.gridItem.getBoundingClientRect();\n        const parentRect = this.offsetParent!.getBoundingClientRect();\n        this._startLeft = rect.left - parentRect.left;\n        this._startTop = rect.top - parentRect.top;\n        this._startPosX = this.posX;\n        this._startPosY = this.posY;\n    }\n\n    private _drag(ev: LGLDomEvent<DraggingEvent>): void {\n        if (\n            this._startPosX !== undefined &&\n            this._startPosY !== undefined &&\n            this._startLeft !== undefined &&\n            this._startTop !== undefined &&\n            this.isDraggable\n        ) {\n            const { deltaX, deltaY } = ev.detail;\n            const newPos = this._calcDragPos(deltaX, deltaY);\n            if (newPos) {\n                fireEvent(this, 'dragging', newPos);\n            }\n        }\n    }\n\n    private _calcDragPos(deltaX, deltaY): null | { newPosX: number; newPosY: number } {\n        // Go ahead an update the position of the item, this won't affect the layout\n        this._itemLeftPX = this._startLeft + deltaX;\n        this._itemTopPX = this._startTop + deltaY;\n\n        // Get the change in grid units from the change in pixels\n        const deltaCols = Math.round(deltaX / this._fullColumnWidth!);\n        const deltaRows = Math.round(deltaY / this._fullRowHeight!);\n\n        // If change in grid units from both axis are 0, no need to go forward\n        if (deltaRows || deltaCols) {\n            // Add the delta to the orginal, to get the new position\n            let newPosX = this._startPosX! + deltaCols;\n            let newPosY = this._startPosY! + deltaRows;\n\n            // Positions have to stay within bounds\n            newPosX = Math.max(0, newPosX);\n            newPosY = Math.max(0, newPosY);\n            newPosX = Math.min(this.columns - this.width, newPosX);\n\n            return { newPosX, newPosY };\n        }\n        return null;\n    }\n\n    private _dragEnd(): void {\n        this._isDragging = false;\n        this._startLeft = undefined;\n        this._startTop = undefined;\n        this._startPosX = undefined;\n        this._startPosY = undefined;\n\n        fireEvent(this, 'dragEnd');\n    }\n}\n","import { css, cssSelector, cssVariableAsVar, GenerateStyles, style } from '@umetrics/sartorius-ui-base';\n\nexport const gridLayoutItemStyles: GenerateStyles = (tagName) => {\n    const { root, /* child,*/ is } = cssSelector(tagName);\n    return [\n        style,\n        css`\n            ${root} {\n                position: absolute;\n                transition: all 250ms;\n                z-index: auto;\n                opacity: 0;\n            }\n\n            ${is('dragging')} {\n                transition: none;\n                z-index: 5;\n            }\n\n            ${is('resizing')} {\n                transition-property: transform;\n                z-index: 5;\n                opacity: 0.8 !important;\n            }\n\n            ${is('finished')} {\n                opacity: 1;\n            }\n\n            :host([placeholder]) div {\n                background-color: ${cssVariableAsVar('color_primary_3')};\n                opacity: 0.05;\n                z-index: 1;\n            }\n        `,\n    ];\n};\n","import {\n    BaseElement,\n    booleanConverter,\n    defineElement,\n    html,\n    property,\n    PropertyValues,\n    repeat,\n    state,\n    TemplateResult,\n} from '@umetrics/sartorius-ui-base';\n\nimport type { ItemDraggedEvent, ItemRenderer, ItemResizedEvent, Layout, LayoutItem, LGLItemDomEvent } from './types';\nimport { areLayoutsDifferent } from './util/areLayoutsDifferent';\nimport { condenseLayout } from './util/condenseLayout';\nimport { findLayoutBottom } from './util/findLayoutBottom';\nimport { fireEvent } from './util/fireEvent';\nimport { fixLayoutBounds } from './util/fixLayoutBounds';\nimport { getMasonryLayout } from './util/getMasonryLayout';\nimport { moveItem } from './util/moveItem';\nimport { version } from './metadata';\nimport { deepcopy } from './util/deepCopy';\nimport { GridLayoutItem } from './gridLayoutItem';\nimport { gridLayoutStyles } from './gridLayoutStyle';\nimport { GridLayoutProperties, GridLayoutSortStyle } from './gridLayoutProperties';\nimport { perfDebounce } from '@umetrics/sartorius-ui-utils';\n\n// Instead of resize handle being a different draggable element. Why not just add a second handle like the Drag and use that\n@defineElement({\n    tagName: 'grid-layout',\n    styles: gridLayoutStyles,\n    version,\n})\nexport class GridLayout extends BaseElement implements GridLayoutProperties {\n    @property({ type: Array })\n    public layout?: Layout = [];\n\n    @property()\n    public sortStyle: GridLayoutSortStyle = 'default';\n\n    @property({ type: Array })\n    public margin: [number, number] = [10, 10];\n\n    @property({ type: Array })\n    public containerPadding: [number, number] = [20, 20];\n\n    @property({ type: Number })\n    public rowHeight = 30;\n\n    @property({ type: Number })\n    public columns = 12;\n\n    @property({ type: Boolean, converter: booleanConverter, attribute: 'drag-disabled' })\n    public dragDisabled = false;\n\n    @property({ type: Boolean, converter: booleanConverter, attribute: 'resize-disabled' })\n    public resizeDisabled = false;\n\n    @property({ attribute: false })\n    public resizeHandle?: string;\n\n    @property({ attribute: false })\n    public dragHandle?: string;\n\n    @property({ type: Boolean, attribute: true, reflect: true })\n    public resizing?: boolean = false;\n\n    @property({ type: Boolean, attribute: true, reflect: true })\n    public dragging?: boolean = false;\n\n    @property()\n    public itemRenderer?: ItemRenderer;\n\n    @state()\n    private _width = 0;\n    @state()\n    private _layout: Layout = [];\n    @state()\n    private _placeholder?: LayoutItem;\n\n    private _oldItemLayout?: LayoutItem;\n    private _oldItemIndex?: number;\n    private _resizeObserver?: ResizeObserver;\n    private _prevPosX?: number;\n    private _prevPosY?: number;\n\n    get _layoutHeight(): number {\n        const btm = findLayoutBottom(this._layout);\n        return btm * this.rowHeight + (btm - 1) * this.margin[1] + this.containerPadding[1] * 2;\n    }\n\n    public disconnectedCallback(): void {\n        if (this._resizeObserver) {\n            this._resizeObserver.disconnect();\n        }\n    }\n\n    public connectedCallback(): void {\n        GridLayout.subRegister(GridLayoutItem);\n        super.connectedCallback();\n        this.updateComplete.then(() => this._attachObserver());\n    }\n\n    protected updated(changedProps: PropertyValues): void {\n        super.updated(changedProps);\n\n        if (changedProps.has('layout')) {\n            this._setupLayout();\n        } else if (changedProps.has('columns')) {\n            this._updateLayout(deepcopy(this.layout));\n        }\n\n        this.style.height = `${this._layoutHeight}px`;\n    }\n\n    protected render(): TemplateResult {\n        if (!this._layout?.length) {\n            return html``;\n        }\n\n        return html`\n            ${repeat(\n                this._layout,\n                (item: LayoutItem) => item.key,\n                (item) => {\n                    let inner = this.itemRenderer && this.itemRenderer(item.key);\n                    if (!inner) {\n                        inner = html`<slot name=\"slot-item-${item.key}\"></slot>`;\n                    }\n                    return html`\n                        <${GridLayoutItem.tag}\n                            .width=${item.width}\n                            .height=${item.height}\n                            .posY=${item.posY}\n                            .posX=${item.posX}\n                            .minWidth=${item.minWidth || 1}\n                            .minHeight=${item.minHeight || 1}\n                            .maxWidth=${item.maxHeight}\n                            .maxHeight=${item.maxHeight}\n                            .key=${item.key}\n                            .parentWidth=${this._width}\n                            .columns=${this.columns}\n                            .rowHeight=${this.rowHeight}\n                            .margin=${this.margin}\n                            .containerPadding=${this.containerPadding}\n                            .isDraggable=${!this.dragDisabled}\n                            .isResizable=${!this.resizeDisabled}\n                            .resizeHandle=${this.resizeHandle}\n                            .dragHandle=${this.dragHandle}\n                            @resizeStart=${this._itemResizeStart}\n                            @resize=${this._itemResize}\n                            @resizeEnd=${this._itemResizeEnd}\n                            @dragStart=${this._itemDragStart}\n                            @dragging=${this._itemDrag}\n                            @dragEnd=${this._itemDragEnd}\n                        >\n                            ${inner}\n                        </${GridLayoutItem.tag}>\n                    `;\n                }\n            )}\n            ${this._renderPlaceHolder()}\n        `;\n    }\n\n    private _setupLayout(): void {\n        if (this.layout) {\n            // Dirty check to avoid endless cycles\n            if (areLayoutsDifferent(this.layout, this._layout)) {\n                this._updateLayout(this.layout, true);\n                fireEvent(this, 'layout-changed', { layout: this._layout });\n            }\n        }\n    }\n\n    private _updateLayout(layout: Layout, fix = false, style = this.sortStyle): void {\n        if (style === 'masonry') {\n            this._layout = getMasonryLayout(layout, this.columns);\n        } else {\n            const newLayout = fix ? fixLayoutBounds(layout, this.columns) : layout;\n            this._layout = condenseLayout(newLayout);\n        }\n    }\n\n    private _itemResizeStart(ev: LGLItemDomEvent<Event>): void {\n        this._oldItemIndex = this._layout.findIndex((item) => item.key === ev.currentTarget.key);\n        this._placeholder = this._layout[this._oldItemIndex];\n        this._oldItemLayout = this._layout[this._oldItemIndex];\n    }\n\n    private _itemResize(ev: LGLItemDomEvent<ItemResizedEvent>): void {\n        if (this._oldItemLayout && this._oldItemIndex !== undefined) {\n            const { newWidth, newHeight, newPosX, newPosY } = ev.detail;\n\n            const newItemLayout = {\n                ...this._oldItemLayout,\n                width: newWidth,\n                height: newHeight,\n            };\n\n            const newLayout = moveItem([...this._layout], { ...newItemLayout }, newPosX, newPosY, this.columns, true);\n            this._updateLayout(newLayout, false, 'default');\n            this._placeholder = this._layout.find((item) => item.key === this._oldItemLayout!.key);\n        }\n    }\n\n    private _itemResizeEnd(): void {\n        const newItemLayout = this._layout.find((item) => item.key === this._oldItemLayout?.key);\n\n        this._placeholder = undefined;\n        if (this.layout && this._oldItemLayout !== newItemLayout) {\n            fireEvent(this, 'item-changed', {\n                item: this._placeholder,\n                layout: this._layout,\n            });\n            this._oldItemLayout = undefined;\n            this._oldItemIndex = undefined;\n        }\n    }\n\n    private _itemDragStart(ev: LGLItemDomEvent<Event>): void {\n        const itemIndex = this._layout.findIndex((item) => item.key === ev.currentTarget.key);\n        this._placeholder = this._layout[itemIndex];\n        this._oldItemLayout = this._layout.find((item) => item.key === ev.currentTarget.key);\n    }\n\n    private _itemDrag(ev: LGLItemDomEvent<ItemDraggedEvent>): void {\n        if (this._oldItemLayout) {\n            ev.stopPropagation();\n            ev.preventDefault();\n\n            const { newPosX, newPosY } = ev.detail;\n\n            if (this._prevPosX !== newPosX || this._prevPosY !== newPosY) {\n                this._prevPosX = newPosX;\n                this._prevPosY = newPosY;\n\n                const newLayout = moveItem(\n                    [...this._layout],\n                    { ...this._oldItemLayout },\n                    newPosX,\n                    newPosY,\n                    this.columns,\n                    true\n                );\n\n                this._updateLayout(newLayout, false, 'default');\n                this._placeholder = this._layout.find((item) => item.key === this._oldItemLayout!.key);\n            }\n        }\n    }\n\n    private _itemDragEnd(): void {\n        const newItemLayout = this._layout.find((item) => item.key === this._oldItemLayout!.key);\n        this._placeholder = undefined;\n        if (this.layout && this._oldItemLayout !== newItemLayout) {\n            fireEvent(this, 'item-changed', {\n                item: this._placeholder,\n                layout: this._layout,\n            });\n\n            this._oldItemLayout = undefined;\n            this._oldItemIndex = undefined;\n        }\n    }\n\n    private _renderPlaceHolder(): TemplateResult {\n        if (!this._placeholder) {\n            return html``;\n        }\n\n        return html`\n            <${GridLayoutItem.tag}\n                .width=${this._placeholder.width}\n                .height=${this._placeholder.height}\n                .posY=${this._placeholder.posY}\n                .posX=${this._placeholder.posX}\n                .key=${this._placeholder.key}\n                .parentWidth=${this.clientWidth}\n                .columns=${this.columns}\n                .rowHeight=${this.rowHeight}\n                .margin=${this.margin}\n                .containerPadding=${this.containerPadding}\n                .isDraggable=${false}\n                .isResizable=${false}\n                placeholder\n            >\n            </${GridLayoutItem.tag}>\n        `;\n    }\n\n    private async _attachObserver(): Promise<void> {\n        if (!this._resizeObserver) {\n            this._resizeObserver = new ResizeObserver(perfDebounce(() => this._measureLayoutWidth(), 100));\n        }\n        this._resizeObserver.observe(this);\n    }\n\n    private _measureLayoutWidth(): void {\n        if (this.parentElement) {\n            this._width = this.parentElement.clientWidth;\n        }\n    }\n}\n","import type { LayoutItem } from '../types';\n\n// Return the bottom y value\nexport const findLayoutBottom = (layout: LayoutItem[]): number => {\n    let layoutYMax = 0;\n\n    for (const item of layout) {\n        const itemBottom = item.posY + item.height;\n        layoutYMax = itemBottom > layoutYMax ? itemBottom : layoutYMax;\n    }\n\n    return layoutYMax;\n};\n","import type { LayoutItem } from '../types';\n\n// Make sure all layout items are within the bounds of the cols provided\nexport const fixLayoutBounds = (layout: LayoutItem[], cols: number): LayoutItem[] => {\n    for (const item of layout) {\n        // Width is greater than amount of columns\n        // set the width to be number of columns\n        if (item.width > cols) {\n            item.width = cols;\n        }\n\n        // Out of bounds right\n        // set the x to be against the right side\n        if (item.posX + item.width > cols) {\n            item.posX = cols - item.width;\n        }\n\n        // Out of bounds left\n        // set x to be against the left side\n        if (item.posX < 0) {\n            item.posX = 0;\n        }\n    }\n\n    return layout;\n};\n","// Fill in any gaps in the LayoutItem array\n\nimport type { Layout, LayoutItem } from '../types';\nimport { getItemIntersect } from './getItemIntersect';\nimport { resolveIntersection } from './resolveIntersection';\nimport { sortLayout } from './sortLayout';\n\n// Return LayoutItem Array\nexport const condenseLayout = (layout: Layout): Layout => {\n    const condensedLayout: Layout = [];\n    const returnLayout: Layout = [];\n    const sortedLayout: Layout = sortLayout(layout);\n    for (const item of sortedLayout) {\n        // Move up while no intersecting another element\n        while (item.posY > 0 && !getItemIntersect(condensedLayout, item)) {\n            item.posY--;\n        }\n\n        // Move down Item down, if it intersects with another item, move it down as well\n        let intersectItem: LayoutItem | undefined;\n        while ((intersectItem = getItemIntersect(condensedLayout, item))) {\n            resolveIntersection(sortedLayout, item, intersectItem.posY + intersectItem.height);\n        }\n\n        delete item.hasMoved;\n        condensedLayout.push(item);\n\n        returnLayout[layout.indexOf(item)] = item;\n    }\n\n    return returnLayout;\n};\n","import { css, GenerateStyles, style } from '@umetrics/sartorius-ui-base';\n\nexport const gridLayoutStyles: GenerateStyles = () => {\n    return [\n        style,\n        css`\n            :host {\n                display: block;\n                position: relative;\n            }\n\n            :host([dragging]),\n            :host([resizing]),\n            :host([dragging]) lit-grid-item,\n            :host([resizing]) lit-grid-item {\n                user-select: none;\n                touch-action: none;\n            }\n        `,\n    ];\n};\n"],"names":["requestIdleCallback","window","callback","setTimeout","didTimeout","timeRemaining","Math","max","cancelIdleCallback","clearTimeout","perfDebounce","func","timeout","idleCallback","lastResult","limit","arguments","length","undefined","args","later","intersects","item1","item2","key","posX","width","posY","height","getItemIntersect","layout","layoutItem","item","resolveIntersection","newYPos","i","map","indexOf","otherItem","sortLayout","slice","sort","a","b","fireEvent","target","event","detail","dispatchEvent","CustomEvent","getMinItemColumn","columnHeights","columns","minPosY2","min","columnHeightGroup","columnSpans","groupColumnHeights","minPosY","moveItemAwayFromIntersect","intersectItem","itemToMove","cols","isUserMove","tempItem","moveItem","newPosX","newPosY","oldPosY","hasMoved","sorted","reverse","allIntersects","getAllIntersects","filter","l","itemIndex","findIndex","len","version","deepcopy","value","Object","prototype","toString","call","Date","getTime","Array","isArray","result","keys","forEach","getMouseTouchLocation","ev","touchIdentifier","type","startsWith","touchObj","getTouch","e","identifier","targetTouches","find","t","changedTouches","x","clientX","y","clientY","matchesSelectorFunc","isFunction","matchesSelector","el","selector","method","GridLayoutDraggable","BaseElement","constructor","disabled","_dragging","firstUpdated","this","addEventListener","_dragStart","bind","capture","passive","document","_drag","_dragEnd","_handleContainer","render","html","_initTempHandle","handle","_dragHandle","composedPath","s","tagName","tempHandle","node","matchesSelectorAndParentsTo","baseNode","path","pop","offsetParent","preventDefault","stopPropagation","_draggable","_draggableHeader","removeAttribute","setAttribute","_touchIdentifier","pos","startX","startY","deltaX","deltaY","grid","round","isAcceptedClickArea","clickable","draggable","shadowRoot","querySelector","className","__decorate","property","Boolean","reflect","defineElement","styles","gridLayoutDraggableStyles","style","css","GridLayoutResizable","GridLayoutResizable_1","connectedCallback","subRegister","super","tag","_resize","_resizeStart","_resizeEnd","startWidth","clientWidth","startHeight","clientHeight","_resizeKey","k","matches","assign","_getResizeProps","dragX","dragY","attribute","gridLayoutResizableStyles","GridLayoutItem","GridLayoutItem_1","margin","containerPadding","minWidth","minHeight","isDraggable","isResizable","_isDragging","_isResizing","_firstLayoutFinished","updated","changedProps","has","_columnWidth","parentWidth","_fullColumnWidth","_fullRowHeight","rowHeight","_minWidthPX","maxWidthUnits","maxWidth","_maxWidthPX","_minHeightPX","_maxHeightPX","maxHeight","Infinity","_itemLeftPX","_itemTopPX","_itemWidthPX","_itemHeightPX","baseClassName","rootClasses","createClassName","toLowerCase","dragging","resizing","finished","gridItemHTML","dragHandle","resizeHandle","_initDragStart","newPos","_calcDragPos","newWidth","newHeight","rect","gridItem","getBoundingClientRect","parentRect","_startLeft","left","_startTop","top","_startPosX","_startPosY","deltaCols","deltaRows","Number","query","HTMLElement","state","root","is","cssSelector","cssVariableAsVar","GridLayout","GridLayout_1","sortStyle","dragDisabled","resizeDisabled","_width","_layout","_layoutHeight","btm","layoutYMax","itemBottom","findLayoutBottom","disconnectedCallback","_resizeObserver","disconnect","updateComplete","then","_attachObserver","_setupLayout","_updateLayout","_a","repeat","inner","itemRenderer","_itemResizeStart","_itemResize","_itemResizeEnd","_itemDragStart","_itemDrag","_itemDragEnd","_renderPlaceHolder","areLayoutsDifferent","some","aItem","bItem","aItemKeys","fix","getMasonryLayout","masonryLayout","sortedLayout","fill","itemPostion","newItem","push","newLayout","fixLayoutBounds","condensedLayout","returnLayout","condenseLayout","_oldItemIndex","currentTarget","_placeholder","_oldItemLayout","newItemLayout","_prevPosX","_prevPosY","ResizeObserver","_measureLayoutWidth","observe","parentElement","converter","booleanConverter","gridLayoutStyles"],"sourceRoot":""}