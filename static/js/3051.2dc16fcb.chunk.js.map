{"version":3,"file":"static/js/3051.2dc16fcb.chunk.js","mappings":"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","sources":["../node_modules/@umetrics/sartorius-ui-mixins/src/mixinEventDispatcher.ts","../node_modules/@umetrics/sartorius-ui-mixins/src/mixinResizableBehavior.ts","../node_modules/@umetrics/sartorius-ui-scrollbar/src/scrollbarStyle.ts","../node_modules/@umetrics/sartorius-ui-scrollbar/src/scrollbar.ts","../node_modules/@umetrics/sartorius-ui-scrollbar/src/metadata.ts"],"sourcesContent":["import { BaseElement } from '@umetrics/sartorius-ui-base';\nimport type { Constructor } from './constructor';\n\n/**\n * Mixin EventDispatcherMixin for Sartorius-UI baseclass\n *\n * Adds boiler code for dispatching events\n *\n * Usage : class Demo extends EventDispatcherMixin(BaseElement) implements ... { ... }\n *\n */\n\nexport declare abstract class EventDispatcherMixinInterface extends BaseElement {\n    public dispatch(\n        event: string,\n        detail?,\n        target?,\n        applyCallback?: null | (() => void),\n        preventCallback?: null | (() => void)\n    ): boolean;\n}\n\nexport const EventDispatcherMixin = <T extends Constructor<BaseElement>>(superClass: T) => {\n    abstract class MyMixinClass extends superClass {\n        public dispatch(\n            event,\n            detail = {},\n            target: HTMLElement = this as HTMLElement,\n            applyCallback: null | (() => void) = null,\n            preventCallback: null | (() => void) = null\n        ): boolean {\n            const applyDefault = target.dispatchEvent(\n                new CustomEvent(event, {\n                    bubbles: true,\n                    composed: true,\n                    cancelable: true,\n                    detail,\n                })\n            );\n            if (applyDefault && applyCallback) {\n                // Apply, client commit behaviour\n                applyCallback();\n            } else if (preventCallback) {\n                // Revert, client preventedDefault behaviour\n                preventCallback();\n            }\n            return applyDefault;\n        }\n    }\n\n    return MyMixinClass as unknown as Constructor<EventDispatcherMixinInterface> & T;\n};\n","import { BaseElement } from '@umetrics/sartorius-ui-base';\nimport { Constructor } from './constructor';\n\n/**\n * Mixin ResizableBehaviorMixin for Sartorius-UI baseclass\n *\n * Coordinate the flow of resize events between \"resizers\" (elements that control the size or hidden state of their\n * children) and \"resizables\" (elements that need to be notified when they are resized or un-hidden by their parents\n * in order to take action on their new measurements).\n *\n * Usage : class Demo extends ResizableBehaviorMixin(BaseElement) implements ... { ... }\n *\n */\nexport const resizableBehaviorResizeEventType = 'requestresizenotifications';\nexport const resizableBehaviorResizeEvent = 'resize';\n\nexport declare abstract class ResizableBehaviorMixinInterface extends BaseElement {\n    public notifyResize();\n}\n\nconst ORPHANS = new Set();\n\nexport const ResizableBehaviorMixin = <T extends Constructor<BaseElement>>(superClass: T) => {\n    abstract class MyMixinClass extends superClass {\n        private __parentResizable;\n        private __notifyingDescendant;\n        private _interestedResizables;\n        private isAttached = false;\n\n        /**\n         * The closest ancestor element that implements `ResizableMixin`.\n         * @return {HTMLElement}\n         */\n        get _parentResizable() {\n            return this.__parentResizable;\n        }\n\n        /**\n         * @param {HTMLElement} value\n         */\n        set _parentResizable(value) {\n            const old = this.__parentResizable;\n            this.__parentResizable = value;\n            if (old !== value) {\n                this._parentResizableChanged(value);\n            }\n        }\n\n        get _notifyingDescendant() {\n            return this.__notifyingDescendant;\n        }\n\n        set _notifyingDescendant(value) {\n            this.__notifyingDescendant = value;\n        }\n\n        protected constructor(...args: any[]) {\n            super(args);\n\n            this._interestedResizables = [];\n            this._notifyingDescendant = false;\n\n            this._onIronRequestResizeNotifications = this._onIronRequestResizeNotifications.bind(this);\n            this.notifyResize = this.notifyResize.bind(this);\n            this._onDescendantIronResize = this._onDescendantIronResize.bind(this);\n\n            this.addEventListener(resizableBehaviorResizeEventType, this._onIronRequestResizeNotifications, true);\n        }\n\n        connectedCallback() {\n            super.connectedCallback();\n\n            this.isAttached = true;\n            setTimeout(() => {\n                this._requestResizeNotifications();\n            });\n        }\n\n        disconnectedCallback() {\n            super.disconnectedCallback();\n\n            this.isAttached = false;\n            if (this._parentResizable) {\n                this._parentResizable.stopResizeNotificationsFor(this);\n            } else {\n                ORPHANS.delete(this);\n                window.removeEventListener('resize', this.notifyResize);\n            }\n\n            this._parentResizable = null;\n        }\n\n        /**\n         * Can be called to manually notify a resizable and its descendant\n         * resizables of a resize change.\n         */\n        public notifyResize() {\n            if (this.isAttached) {\n                this._interestedResizables.forEach((resizable) => {\n                    if (this.resizerShouldNotify(resizable)) {\n                        this._notifyDescendant(resizable);\n                    }\n                });\n                this._fireResize();\n            }\n        }\n\n        /**\n         * Used to assign the closest resizable ancestor to this resizable\n         * if the ancestor detects a request for notifications.\n         *\n         * @param {HTMLElement} parentResizable\n         */\n        assignParentResizable(parentResizable) {\n            if (this._parentResizable) {\n                this._parentResizable.stopResizeNotificationsFor(this);\n            }\n\n            this._parentResizable = parentResizable;\n            if (parentResizable && parentResizable._interestedResizables.indexOf(this) === -1) {\n                parentResizable._interestedResizables.push(this);\n                parentResizable._subscribeIronResize(this);\n            }\n        }\n\n        /**\n         * Used to remove a resizable descendant from the list of descendants\n         * that should be notified of a resize change.\n         *\n         * @param {HTMLElement} target\n         */\n        stopResizeNotificationsFor(target) {\n            const index = this._interestedResizables.indexOf(target);\n            if (index > -1) {\n                this._interestedResizables.splice(index, 1);\n                this._unsubscribeIronResize(target);\n            }\n        }\n\n        /**\n         * Subscribe this element to listen to `resize` events on the given target.\n         *\n         * Preferred over target.listen because the property \"renamer\" does not\n         * understand to rename when the target is not specifically \"this\"\n         *\n         * @param {HTMLElement} target Element to listen to for `resize` events.\n         */\n        _subscribeIronResize(target) {\n            target.addEventListener(resizableBehaviorResizeEvent, this._onDescendantIronResize);\n        }\n\n        /**\n         * Unsubscribe this element from listening to to `resize` events on the\n         * given target.\n         *\n         * Preferred over target.unlisten because the property \"renamer\" does not\n         * understand to rename when the target is not specifically \"this\"\n         *\n         * @param {HTMLElement} target Element to listen to for `resize` events.\n         */\n        _unsubscribeIronResize(target) {\n            target.removeEventListener(resizableBehaviorResizeEvent, this._onDescendantIronResize);\n        }\n\n        /**\n         * This method can be overridden to filter nested elements that should or\n         * should not be notified by the current element. Return true if an element\n         * should be notified, or false if it should not be notified.\n         *\n         * @param {HTMLElement} _ / element A candidate descendant element that\n         * implements `ResizableMixin`.\n         * @return {boolean} True if the `element` should be notified of resize.\n         */\n        resizerShouldNotify(_) {\n            return true;\n        }\n\n        _onDescendantIronResize(e) {\n            if (this._notifyingDescendant) {\n                e.stopPropagation();\n                return;\n            }\n            this._fireResize();\n        }\n\n        _fireResize() {\n            this.dispatchEvent(new CustomEvent(resizableBehaviorResizeEvent));\n        }\n\n        _onIronRequestResizeNotifications(e) {\n            const cp = e.composedPath && e.composedPath();\n            let path;\n            if (cp) {\n                path = cp;\n            } else {\n                path = e.path || [];\n            }\n            const target = path[0];\n            if (target === this) {\n                return;\n            }\n            target.assignParentResizable(this);\n            this._notifyDescendant(target);\n            e.stopPropagation();\n        }\n\n        _parentResizableChanged(parentResizable) {\n            if (parentResizable) {\n                window.removeEventListener('resize', this.notifyResize);\n            }\n        }\n\n        _notifyDescendant(descendant) {\n            // In IE10, attached is fired on children first, so it's\n            // important not to notify them if the parent is not attached yet (or\n            // else they will get redundantly notified when the parent attaches).\n            if (this.isAttached) {\n                this._notifyingDescendant = true;\n                descendant.notifyResize();\n                this._notifyingDescendant = false;\n            }\n        }\n\n        _requestResizeNotifications() {\n            if (!this.isAttached) {\n                return;\n            }\n\n            if (document.readyState === 'loading') {\n                const _requestResizeNotifications = this._requestResizeNotifications.bind(this);\n                document.addEventListener('readystatechange', function readyStateChanged() {\n                    document.removeEventListener('readystatechange', readyStateChanged);\n                    _requestResizeNotifications();\n                });\n            } else {\n                this._findParent();\n\n                if (!this._parentResizable) {\n                    // If this resizable is an orphan, tell other orphans to try to find\n                    // their parent again, in case it's this resizable.\n                    ORPHANS.forEach((orphan) => {\n                        if (orphan !== this) {\n                            (orphan as any)._findParent();\n                        }\n                    });\n\n                    window.addEventListener('resize', this.notifyResize);\n                    this.notifyResize();\n                } else {\n                    // If this resizable has a parent, tell other child resizables of\n                    // that parent to try finding their parent again, in case it's this\n                    // resizable.\n                    this._parentResizable._interestedResizables.forEach((resizable) => {\n                        if (resizable !== this) {\n                            resizable._findParent();\n                        }\n                    });\n                }\n            }\n        }\n\n        _findParent() {\n            this.assignParentResizable(null);\n            this.dispatchEvent(\n                new CustomEvent(resizableBehaviorResizeEventType, {\n                    bubbles: true,\n                    cancelable: true,\n                    composed: true,\n                })\n            );\n\n            if (!this._parentResizable) {\n                ORPHANS.add(this);\n            } else {\n                ORPHANS.delete(this);\n            }\n        }\n    }\n\n    return MyMixinClass as unknown as Constructor<ResizableBehaviorMixinInterface> & T;\n};\n","import { css, CSSResultArray, cssSelector, GenerateStyles, style } from '@umetrics/sartorius-ui-base';\n\nexport const padding = { top: 11, bottom: 11, left: 11, right: 11 };\nexport const inset = 5;\n\nexport const scrollbarStyles: GenerateStyles = (tagName) => {\n    const mainStyle = () => {\n        const { root, is } = cssSelector(tagName);\n\n        return css`\n            :host {\n                position: relative;\n                display: grid;\n                grid-template: 1fr / 1fr;\n                height: 100%;\n            }\n\n            :host([border]) {\n                border: 1px solid var(--color-secondary-3);\n            }\n\n            :host([outset]) {\n                padding-right: 16px;\n                padding-bottom: 16px;\n            }\n            :host([vert-padding]) {\n                padding-top: var(--container-inner-spacing-top-bottom, 16px);\n                padding-bottom: var(--container-inner-spacing-top-bottom, 16px);\n                height: calc(100% - 2 * var(--container-inner-spacing-top-bottom, 16px));\n            }\n            :host([hori-padding]) {\n                padding-left: var(--container-inner-spacing-left-right, 24px);\n                padding-right: var(--container-inner-spacing-left-right, 24px);\n            }\n\n            ${root}::-webkit-scrollbar {\n                display: none;\n            }\n\n            :host([dynamic-outset]:not([hori-hide])) ${root} {\n                padding-bottom: 16px;\n            }\n            :host([dynamic-outset]:not([vert-hide])) ${root} {\n                padding-right: 16px;\n            }\n            :host([dynamic-outset]) ${is('scroll-y-hidden')} {\n                padding-right: 0 !important;\n            }\n            :host([dynamic-outset]) ${is('scroll-x-hidden')} {\n                padding-bottom: 0 !important;\n            }\n\n            ${root} {\n                height: 100%;\n                overflow-x: auto;\n                overflow-y: auto;\n                scroll-behavior: auto;\n                overscroll-behavior: auto;\n                scroll-snap-type: none;\n\n                scrollbar-width: none;\n                -ms-overflow-style: none;\n                scroll-padding: var(--scroll-padding, 0);\n            }\n\n            ${is('vertical-hide')} {\n                overflow-y: hidden;\n            }\n\n            ${is('horizontal-hide')} {\n                overflow-x: hidden;\n            }\n        `;\n    };\n\n    const yStyle = () => {\n        const { root, child, is } = cssSelector(tagName + '-scroller-y');\n\n        return css`\n            ${root} {\n                position: absolute;\n                z-index: 4;\n\n                width: 6px;\n                right: ${inset}px;\n                top: 0;\n                bottom: 0;\n\n                background-color: rgba(0, 0, 0, 0);\n                padding-top: ${padding.top}px;\n                padding-bottom: ${padding.bottom}px;\n                background-clip: content-box;\n            }\n\n            :host([vertical-hide]) ${root}, ${is('hidden-y')} {\n                display: none;\n            }\n\n            :host(:not([always-show])) ${root} {\n                opacity: 0;\n                transition: opacity 0.25s;\n            }\n\n            :host([drag-y]) ${root}, :host([hover]) ${root} {\n                opacity: 1;\n                transition: opacity 0s;\n            }\n\n            ${child('thumb')} {\n                width: 8px;\n                height: 20px;\n                margin-left: 0;\n                position: absolute;\n                border-radius: 0;\n                opacity: 1;\n                left: -1px;\n                top: 0;\n                background-color: transparent;\n                transition: background-color 0.25s;\n            }\n\n            ${child('inner')} {\n                width: 6px;\n                height: 100%;\n                margin-left: 1px;\n                background-color: #00000033;\n                transition: background-color 0.25s;\n            }\n\n            ${child('thumb')}:hover,\n            :host([drag-y]) ${child('thumb')} {\n                background-color: #00000066;\n            }\n\n            ${child('thumb')}:hover ${child('inner')},\n            :host([drag-y]) ${child('thumb')} ${child('inner')} {\n                background-color: transparent;\n            }\n        `;\n    };\n\n    const xStyle = () => {\n        const { root, child, is } = cssSelector(tagName + '-scroller-x');\n\n        return css`\n            ${root} {\n                position: absolute;\n                z-index: 4;\n\n                height: 6px;\n                right: 0;\n                bottom: ${inset}px;\n                left: 0;\n\n                background-color: rgba(0, 0, 0, 0);\n                padding-left: ${padding.left}px;\n                padding-right: ${padding.right}px;\n                background-clip: content-box;\n            }\n\n            :host([vertical-hide]) ${root}, ${is('hidden-x')} {\n                display: none;\n            }\n\n            :host(:not([always-show])) ${root} {\n                opacity: 0;\n                transition: opacity 0.25s;\n            }\n\n            :host([drag-x]) ${root}, :host([hover]) ${root} {\n                opacity: 1;\n                transition: opacity 0s;\n            }\n\n            ${child('thumb')} {\n                width: 20px;\n                height: 8px;\n                margin-left: 0;\n                position: absolute;\n                border-radius: 0;\n                opacity: 1;\n                left: 0;\n                top: -1px;\n                background-color: transparent;\n                transition: background-color 0.25s;\n            }\n\n            ${child('inner')} {\n                height: 6px;\n                width: 100%;\n                margin-top: 1px;\n                background-color: #00000033;\n                transition: background-color 0.25s;\n            }\n\n            ${child('thumb')}:hover,\n            :host([drag-x]) ${child('thumb')} {\n                background-color: #00000066;\n            }\n\n            ${child('thumb')}:hover ${child('inner')},\n            :host([drag-x]) ${child('thumb')} ${child('inner')} {\n                background-color: transparent;\n            }\n        `;\n    };\n\n    return [style, mainStyle(), yStyle(), xStyle()] as CSSResultArray;\n};\n","import {\n    BaseElement,\n    booleanConverter,\n    createClassName,\n    defineElement,\n    html,\n    property,\n    query,\n    state,\n} from '@umetrics/sartorius-ui-base';\nimport { padding, scrollbarStyles } from './scrollbarStyle';\nimport { ScrollbarProperties } from './scrollbarProperties';\nimport { version } from './metadata';\nimport {\n    EventDispatcherMixin,\n    ResizableBehaviorMixin,\n    resizableBehaviorResizeEvent,\n} from '@umetrics/sartorius-ui-mixins';\n\n@defineElement({ tagName: 'scrollbar', styles: scrollbarStyles, version })\nexport class Scrollbar\n    extends ResizableBehaviorMixin(EventDispatcherMixin(BaseElement))\n    implements ScrollbarProperties\n{\n    // Static members\n    // suggested minimum scrollbar size is now 48px\n    private static MIN_SCROLL_THUMB_HEIGHT = 48 + padding.top + padding.bottom;\n    private static MIN_SCROLL_THUMB_WIDTH = 48 + padding.left + padding.right;\n\n    // Public members\n    @property({ type: Boolean, converter: booleanConverter, reflect: true })\n    public border = false;\n    @property({ type: Boolean, converter: booleanConverter, attribute: 'vert-hide', reflect: true })\n    public vertHide = false;\n    @property({ type: Boolean, converter: booleanConverter, attribute: 'hori-hide', reflect: true })\n    public horiHide = false;\n    @property({ type: Boolean, converter: booleanConverter, attribute: 'always-show', reflect: true })\n    public alwaysShow = false;\n\n    @property({ type: Boolean, converter: booleanConverter, attribute: 'outset', reflect: true })\n    public outset = false;\n    @property({ type: Boolean, attribute: 'dynamic-outset', converter: booleanConverter, reflect: true })\n    public dynamicOutset = false;\n    @property({ type: Boolean, attribute: 'vert-padding', converter: booleanConverter, reflect: true })\n    public vertPadding = false;\n    @property({ type: Boolean, attribute: 'hori-padding', converter: booleanConverter, reflect: true })\n    public horiPadding = false;\n\n    // Specials for simulating scrollable html-element. Using the property decorator\n    // we can override props and values on the html-element, which is else not possible.\n    @property({ type: Number, attribute: false })\n    get scrollTop() {\n        return this._scrollTop;\n    }\n\n    set scrollTop(value) {\n        if (value > -1 && this._scrollTop !== value) {\n            this._scrollTop = value;\n            if (this._scrollableElement) {\n                this._scrollableElement.scrollTop = value;\n            }\n        }\n    }\n\n    @property({ type: Number, attribute: false })\n    get scrollLeft() {\n        return this._scrollLeft;\n    }\n\n    set scrollLeft(value) {\n        if (value > -1 && this._scrollLeft !== value) {\n            this._scrollLeft = value;\n            if (this._scrollableElement) {\n                this._scrollableElement.scrollLeft = value;\n            }\n        }\n    }\n\n    @query('div')\n    private _scrollableElement;\n    @query('div[class$=\"-scroller-y-thumb\"]')\n    private _scrollThumbElementY;\n    @query('div[class$=\"-scroller-x-thumb\"]')\n    private _scrollThumbElementX;\n\n    @state()\n    private _scrollThumbHeight = Scrollbar.MIN_SCROLL_THUMB_HEIGHT;\n    @state()\n    private _scrollThumbWidth = Scrollbar.MIN_SCROLL_THUMB_WIDTH;\n    @state()\n    private _scrollThumbTop = 0;\n    @state()\n    private _scrollThumbLeft = 0;\n    @state()\n    private _scrollThumbDraggingY = false;\n    @state()\n    private _scrollThumbDraggingX = false;\n    @state()\n    private _scrollVisibleY = false;\n    @state()\n    private _scrollVisibleX = false;\n\n    private _animationFrame: number | null = null;\n    private _lastScrollThumbPositionY = 0;\n    private _lastScrollThumbPositionX = 0;\n\n    private _resizeObserver;\n    private _resizeObserverTargets: Node[] = [];\n\n    private _scrollTop = 0;\n    private _scrollLeft = 0;\n\n    // Protected members\n\n    constructor() {\n        super();\n\n        this._onMouseOver = this._onMouseOver.bind(this);\n        this._onMouseOut = this._onMouseOut.bind(this);\n        this._onScroll = this._onScroll.bind(this);\n        this._handleSlotchange = this._handleSlotchange.bind(this);\n        this._handleResizeEvent = this._handleResizeEvent.bind(this);\n        this._onThumbYMouseDown = this._onThumbYMouseDown.bind(this);\n        this._onThumbXMouseDown = this._onThumbXMouseDown.bind(this);\n        this._onThumbMouseUp = this._onThumbMouseUp.bind(this);\n        this._onThumbMouseDrag = this._onThumbMouseDrag.bind(this);\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n\n        this.addEventListener('mouseenter', this._onMouseOver);\n        this.addEventListener('mouseleave', this._onMouseOut);\n        this.addEventListener('scroll-left-home', this._onScrollLeftHome);\n\n        this.addEventListener(resizableBehaviorResizeEvent, this._handleResizeEvent);\n    }\n\n    disconnectedCallback() {\n        this.removeEventListener('mouseenter', this._onMouseOver);\n        this.removeEventListener('mouseleave', this._onMouseOut);\n        this.removeEventListener('scroll-left-home', this._onScrollLeftHome);\n        this.removeEventListener(resizableBehaviorResizeEvent, this._handleResizeEvent);\n        super.disconnectedCallback();\n    }\n\n    public scrollTo(options) {\n        // jsdom protection...\n        if (this._scrollableElement && this._scrollableElement.scrollTo) {\n            this._scrollableElement.scrollTo(options);\n        }\n    }\n\n    public scrollBy(options) {\n        if (this._scrollableElement && this._scrollableElement.scrollBy) {\n            this._scrollableElement.scrollBy(options);\n        }\n    }\n\n    get scrollWidth(): number {\n        return this._scrollableElement.scrollWidth;\n    }\n\n    get scrollHeight(): number {\n        return this._scrollableElement.scrollHeight;\n    }\n\n    public getScrollHeight() {\n        return this.scrollHeight;\n    }\n\n    public getScrollTop() {\n        return this._scrollTop;\n    }\n\n    public getScrollLeft() {\n        return this._scrollLeft;\n    }\n\n    public scrollLeftHome() {\n        this._scrollableElement.scrollLeft = 0;\n    }\n\n    protected firstUpdated(_changedProperties) {\n        super.firstUpdated(_changedProperties);\n        this._scrollableElement.addEventListener('scroll', this._onScroll);\n        this._scrollThumbElementY.addEventListener('mousedown', this._onThumbYMouseDown);\n        this._scrollThumbElementX.addEventListener('mousedown', this._onThumbXMouseDown);\n        this._installResizeObserver();\n    }\n\n    protected updated(_changedProperties) {\n        super.updated(_changedProperties);\n\n        for (const [prop, cssVar] of Object.entries({\n            _scrollVisibleX: '--scrollbar-x-overflow',\n            _scrollVisibleY: '--scrollbar-y-overflow',\n        })) {\n            if (_changedProperties.has(prop)) {\n                if ((this as any)[prop]) {\n                    this._scrollableElement.style.setProperty(cssVar, '1');\n                } else {\n                    this._scrollableElement.style.setProperty(cssVar, '0');\n                }\n            }\n        }\n    }\n\n    //\n    // Private members\n    protected render() {\n        const [baseClassName, rootClasses] = createClassName(this.tagName.toLowerCase(), {\n            ['vertical-hide']: this.vertHide,\n            ['horizontal-hide']: this.horiHide,\n            ['scroll-x-hidden']: !this._scrollVisibleX,\n            ['scroll-y-hidden']: !this._scrollVisibleY,\n        });\n\n        return html`\n            <div class=\"${rootClasses}\">\n                <slot @slotchange=\"${this._handleSlotchange}\"></slot>\n            </div>\n            ${this._renderScrollY(baseClassName)} ${this._renderScrollX(baseClassName)}\n        `;\n    }\n\n    private _renderScrollY(baseClassName) {\n        const [baseClassNameY, rootClassesY] = createClassName(`${baseClassName}-scroller-y`, {\n            ['hidden-y']: !this._scrollVisibleY || this.vertHide,\n        });\n        return html`\n            <div class=\"${rootClassesY}\">\n                <div\n                    class=\"${baseClassNameY}-thumb\"\n                    style=\"height: ${this._scrollThumbHeight - padding.top - padding.bottom}px; top: ${this\n                        ._scrollThumbTop + padding.top}px;\"\n                >\n                    <div class=\"${baseClassNameY}-inner\"></div>\n                </div>\n            </div>\n        `;\n    }\n\n    private _renderScrollX(baseClassName) {\n        const [baseClassNameX, rootClassesX] = createClassName(`${baseClassName}-scroller-x`, {\n            ['hidden-x']: !this._scrollVisibleX || this.horiHide,\n        });\n        return html`\n            <div class=\"${rootClassesX}\">\n                <div\n                    class=\"${baseClassNameX}-thumb\"\n                    style=\"width: ${this._scrollThumbWidth - padding.left - padding.right}px; left: ${this\n                        ._scrollThumbLeft + padding.left}px;\"\n                >\n                    <div class=\"${baseClassNameX}-inner\"></div>\n                </div>\n            </div>\n        `;\n    }\n\n    private _handleSlotchange(e) {\n        const target = e.target as HTMLSlotElement;\n        this._resizeObserverTargets.forEach((c) => {\n            this._resizeObserver.unobserve(c);\n        });\n        this._resizeObserverTargets = [];\n        target\n            .assignedNodes()\n            .filter((node) => node.nodeType === 1 && node)\n            .forEach((c) => {\n                this._resizeObserver.observe(c);\n                this._resizeObserverTargets.push(c);\n            });\n\n        this._recalc();\n    }\n\n    private _handleResizeEvent() {\n        this._recalc();\n    }\n\n    private _onThumbYMouseDown(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this._lastScrollThumbPositionY = e.clientY;\n        this._scrollThumbDraggingY = true;\n        this.setAttribute('drag-y', '');\n        document.addEventListener('mouseup', this._onThumbMouseUp);\n        document.addEventListener('mousemove', this._onThumbMouseDrag);\n        document.body.style.setProperty('pointer-events', 'none');\n    }\n\n    private _onThumbXMouseDown(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this._lastScrollThumbPositionX = e.clientX;\n        this._scrollThumbDraggingX = true;\n        this.setAttribute('drag-x', '');\n        document.addEventListener('mouseup', this._onThumbMouseUp);\n        document.addEventListener('mousemove', this._onThumbMouseDrag);\n        document.body.style.setProperty('pointer-events', 'none');\n    }\n\n    private _onThumbMouseUp(e) {\n        if (this._scrollThumbDraggingY) {\n            e.preventDefault();\n            this._scrollThumbDraggingY = false;\n            this.removeAttribute('drag-y');\n        }\n        if (this._scrollThumbDraggingX) {\n            e.preventDefault();\n            this._scrollThumbDraggingX = false;\n            this.removeAttribute('drag-x');\n        }\n        document.removeEventListener('mouseup', this._onThumbMouseUp);\n        document.removeEventListener('mousemove', this._onThumbMouseDrag);\n        document.body.style.removeProperty('pointer-events');\n    }\n\n    private _onThumbMouseDrag(e) {\n        if (this._scrollThumbDraggingY || this._scrollThumbDraggingX) {\n            e.preventDefault();\n            e.stopPropagation();\n            const scrollHostElement = this._scrollableElement;\n            const { offsetHeight, offsetWidth, scrollHeight, scrollWidth } = scrollHostElement;\n            const thisHeight = this.offsetHeight;\n            const thisWidth = this.offsetWidth;\n\n            if (this._scrollThumbDraggingY) {\n                const deltaY = e.clientY - this._lastScrollThumbPositionY;\n                const newScrollHostTop = (scrollHeight / offsetHeight) * deltaY;\n                this._lastScrollThumbPositionY = e.clientY;\n                const coeff = thisHeight / offsetHeight;\n                const newTop = Math.min(\n                    Math.max(0, this._scrollThumbTop + deltaY * coeff),\n                    thisHeight - this._scrollThumbHeight\n                );\n\n                this._scrollThumbTop = newTop;\n                scrollHostElement.scrollTop = Math.min(\n                    scrollHostElement.scrollTop + newScrollHostTop,\n                    scrollHeight - offsetHeight\n                );\n                this._scrollTop = scrollHostElement.scrollTop;\n            }\n            if (this._scrollThumbDraggingX) {\n                const deltaX = e.clientX - this._lastScrollThumbPositionX;\n                const newScrollHostLeft = (scrollWidth / offsetWidth) * deltaX;\n                this._lastScrollThumbPositionX = e.clientX;\n                const coeff = thisWidth / offsetWidth;\n                this._scrollThumbLeft = Math.min(\n                    Math.max(0, this._scrollThumbLeft + deltaX * coeff),\n                    thisWidth - this._scrollThumbWidth\n                );\n                scrollHostElement.scrollLeft = Math.min(\n                    scrollHostElement.scrollLeft + newScrollHostLeft,\n                    scrollWidth - offsetWidth\n                );\n                this._scrollLeft = scrollHostElement.scrollLeft;\n            }\n        }\n    }\n\n    private async _onScroll() {\n        if (this._scrollableElement) {\n            const scrollHostElement = this._scrollableElement;\n\n            const { scrollTop, scrollHeight, scrollLeft, scrollWidth, clientHeight, clientWidth } = scrollHostElement;\n            const { offsetHeight, offsetWidth, _scrollThumbHeight: thumbHeight, _scrollThumbWidth: thumbWidth } = this;\n\n            const newTop = (scrollTop / (scrollHeight - clientHeight)) * (offsetHeight - thumbHeight);\n            const newLeft = (scrollLeft / (scrollWidth - clientWidth)) * (offsetWidth - thumbWidth);\n\n            this._scrollThumbTop = Math.min(newTop, offsetHeight - thumbHeight);\n            this._scrollThumbLeft = Math.min(newLeft, offsetWidth - thumbWidth);\n\n            this._scrollTop = scrollHostElement.scrollTop;\n            this._scrollLeft = scrollHostElement.scrollLeft;\n        }\n        await this.updateComplete;\n        window.dispatchEvent(new Event('scroll'));\n        this.dispatch('scroll');\n    }\n\n    private _onMouseOver() {\n        /*\n        Force recalc on mouse over. This should not be needed but seems to be the\n        only way to get the scrollbars size correct. For example when dynamic content\n        changes and/or on first load.\n        Will degrade performance though!\n        */\n        this._recalc();\n\n        this.setAttribute('hover', '');\n    }\n\n    private _onMouseOut() {\n        this.removeAttribute('hover');\n    }\n\n    private _installResizeObserver() {\n        this._resizeObserver = new ResizeObserver(() => {\n            if (this._animationFrame === null) {\n                this._animationFrame = requestAnimationFrame(() => {\n                    this._animationFrame = null;\n                    this._recalc();\n                });\n            }\n        });\n        this._resizeObserver.observe(this._scrollableElement);\n    }\n\n    private _recalc() {\n        const { scrollHeight, scrollWidth, clientHeight, clientWidth } = this._scrollableElement;\n        const thisHeight = this.clientHeight;\n        const thisWidth = this.clientWidth;\n        const coeffHeight = thisHeight / clientHeight;\n        const coeffWidth = thisWidth / clientWidth;\n\n        const scrollThumbPercentageY = clientHeight / scrollHeight;\n        this._scrollThumbHeight = Math.max(\n            scrollThumbPercentageY * clientHeight * coeffHeight,\n            Scrollbar.MIN_SCROLL_THUMB_HEIGHT\n        );\n\n        const scrollThumbPercentageX = clientWidth / scrollWidth;\n        this._scrollThumbWidth = Math.max(\n            scrollThumbPercentageX * clientWidth * coeffWidth,\n            Scrollbar.MIN_SCROLL_THUMB_WIDTH\n        );\n\n        this._scrollVisibleY = scrollHeight > clientHeight;\n        this._scrollVisibleX = scrollWidth > clientWidth;\n    }\n\n    /**\n     * Handle scroll-left-home from any child\n     *\n     * @param e\n     * @private\n     */\n    private _onScrollLeftHome(e) {\n        e.stopPropagation();\n        this.scrollLeftHome();\n    }\n}\n","/*\n * Metadata build info for package. Managed at build time by task tools/metadata.ts\n */\nexport const version = '0.0.0';\nexport const buildDate = '2021-02-02- 02:02:02.000';\n"],"names":["EventDispatcherMixin","superClass","dispatch","event","detail","arguments","length","undefined","applyCallback","preventCallback","applyDefault","this","dispatchEvent","CustomEvent","bubbles","composed","cancelable","resizableBehaviorResizeEventType","resizableBehaviorResizeEvent","ORPHANS","Set","ResizableBehaviorMixin","_parentResizable","__parentResizable","value","old","_parentResizableChanged","_notifyingDescendant","__notifyingDescendant","constructor","_len","args","Array","_key","super","isAttached","_interestedResizables","_onIronRequestResizeNotifications","bind","notifyResize","_onDescendantIronResize","addEventListener","connectedCallback","setTimeout","_requestResizeNotifications","disconnectedCallback","stopResizeNotificationsFor","delete","window","removeEventListener","forEach","resizable","resizerShouldNotify","_notifyDescendant","_fireResize","assignParentResizable","parentResizable","indexOf","push","_subscribeIronResize","target","index","splice","_unsubscribeIronResize","_","e","stopPropagation","cp","composedPath","path","descendant","document","readyState","readyStateChanged","_findParent","orphan","add","padding","Scrollbar","Scrollbar_1","BaseElement","scrollTop","_scrollTop","_scrollableElement","scrollLeft","_scrollLeft","border","vertHide","horiHide","alwaysShow","outset","dynamicOutset","vertPadding","horiPadding","_scrollThumbHeight","MIN_SCROLL_THUMB_HEIGHT","_scrollThumbWidth","MIN_SCROLL_THUMB_WIDTH","_scrollThumbTop","_scrollThumbLeft","_scrollThumbDraggingY","_scrollThumbDraggingX","_scrollVisibleY","_scrollVisibleX","_animationFrame","_lastScrollThumbPositionY","_lastScrollThumbPositionX","_resizeObserverTargets","_onMouseOver","_onMouseOut","_onScroll","_handleSlotchange","_handleResizeEvent","_onThumbYMouseDown","_onThumbXMouseDown","_onThumbMouseUp","_onThumbMouseDrag","_onScrollLeftHome","scrollTo","options","scrollBy","scrollWidth","scrollHeight","getScrollHeight","getScrollTop","getScrollLeft","scrollLeftHome","firstUpdated","_changedProperties","_scrollThumbElementY","_scrollThumbElementX","_installResizeObserver","updated","prop","cssVar","Object","entries","has","style","setProperty","render","baseClassName","rootClasses","createClassName","tagName","toLowerCase","html","_renderScrollY","_renderScrollX","baseClassNameY","rootClassesY","baseClassNameX","rootClassesX","c","_resizeObserver","unobserve","assignedNodes","filter","node","nodeType","observe","_recalc","preventDefault","clientY","setAttribute","body","clientX","removeAttribute","removeProperty","scrollHostElement","offsetHeight","offsetWidth","thisHeight","thisWidth","deltaY","newScrollHostTop","coeff","newTop","Math","min","max","deltaX","newScrollHostLeft","clientHeight","clientWidth","thumbHeight","thumbWidth","newLeft","updateComplete","Event","ResizeObserver","requestAnimationFrame","coeffHeight","coeffWidth","scrollThumbPercentageY","scrollThumbPercentageX","__decorate","property","type","Boolean","converter","booleanConverter","reflect","attribute","Number","query","state","defineElement","styles","mainStyle","root","is","cssSelector","css","yStyle","child","xStyle","version"],"sourceRoot":""}