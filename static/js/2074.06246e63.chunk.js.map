{"version":3,"file":"static/js/2074.06246e63.chunk.js","mappings":"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","sources":["../node_modules/@umetrics/sartorius-ui-icon/src/iconSize.ts","../node_modules/@umetrics/sartorius-ui-icon/src/icon.ts","../node_modules/@umetrics/sartorius-ui-icon/src/iconUtils.ts","../node_modules/@umetrics/sartorius-ui-icon/src/iconStyle.ts","../node_modules/@umetrics/sartorius-ui-icon/src/registerIcon.ts","../node_modules/@umetrics/sartorius-ui-icon/src/metadata.ts"],"sourcesContent":["export enum IconSize {\n    ExtraTiny = 'extra-tiny',\n    Tiny = 'tiny',\n    Small = 'small',\n    Normal = 'normal',\n    Large = 'large',\n    ExtraLarge = 'extra-large',\n}\n","import {\n    BaseElement,\n    createClassName,\n    defineElement,\n    html,\n    property,\n    state,\n    unsafeHTML,\n} from '@umetrics/sartorius-ui-base';\n\nimport { version } from './metadata';\nimport { IconProperties } from './iconProperties';\nimport { iconStyles } from './iconStyle';\nimport { IconSize } from './iconSize';\nimport { fetchIcon } from './registerIcon';\n\n@defineElement({ tagName: 'icon', styles: iconStyles, version })\nexport class Icon extends BaseElement implements IconProperties {\n    // Static members\n    static iconResolver?: (icon: string) => Promise<any>;\n\n    // Public members\n    @property({ type: IconSize })\n    size;\n\n    @property({ type: Boolean })\n    public get spin() {\n        return this._spin;\n    }\n\n    public set spin(val: boolean) {\n        const prev = this._spin;\n        if (prev !== val) {\n            this._spin = val;\n            this.requestUpdate('spin', prev);\n        }\n    }\n\n    @property({ type: Boolean, reflect: true })\n    public get pulse() {\n        return this._pulse;\n    }\n\n    public set pulse(val: boolean) {\n        const prev = this._pulse;\n        if (prev !== val) {\n            this._pulse = val;\n            this.requestUpdate('pulse', prev);\n        }\n    }\n\n    @property({ type: Boolean, reflect: true, attribute: 'flip-vertical' })\n    public get flipVertical(): boolean {\n        return this._flipVertical;\n    }\n\n    public set flipVertical(val: boolean) {\n        const prev = this._flipVertical;\n        if (prev !== val) {\n            this._flipVertical = val;\n            this.requestUpdate('flipVertical', prev);\n        }\n    }\n\n    @property({ type: Boolean, reflect: true, attribute: 'flip-horizontal' })\n    public get flipHorizontal(): boolean {\n        return this._flipHorizontal;\n    }\n\n    public set flipHorizontal(val: boolean) {\n        const prev = this._flipHorizontal;\n        if (prev !== val) {\n            this._flipHorizontal = val;\n            this.requestUpdate('flipHorizontal', prev);\n        }\n    }\n\n    @property({ type: String, reflect: true })\n    public icon;\n\n    @property({ type: Boolean, reflect: true, attribute: 'crisp-edges' })\n    public crispEdges = false;\n\n    // Protected members\n    // Private members\n    private _spin = false;\n    private _pulse = false;\n    private _flipVertical = false;\n    private _flipHorizontal = false;\n\n    @state()\n    private _svg;\n\n    public static setIconResolver = (f: (icon) => Promise<any>) => {\n        Icon.iconResolver = f;\n    };\n\n    protected shouldUpdate(changedProperties) {\n        if (changedProperties.has('icon') && this.icon) {\n            this._ensureIconRegistered()\n                .then((data) => {\n                    this._svg = data;\n                })\n                .catch(() => {\n                    this._svg = `<svg viewBox='0 0 24 24' style='color:red;'>\n                        <path d='m8.31 14.604 2.616-2.616L8.31 9.372 9.372 8.31l2.616 2.616 2.616-2.616 1.062 1.062-2.616 2.616 2.616 2.616-1.062 1.062-2.616-2.616-2.616 2.616-1.062-1.062Z'></path>\n                        </svg>`;\n                });\n        }\n        return super.shouldUpdate(changedProperties);\n    }\n\n    protected render() {\n        const [, rootClasses] = createClassName(this.tagName.toLowerCase(), {\n            spin: this._spin,\n            pulse: this._pulse,\n            [this.size]: this.size !== undefined && this.size !== '',\n            'flip-vertical': this._flipVertical,\n            'flip-horizontal': this._flipHorizontal,\n            'crisp-edges': this.crispEdges,\n        });\n        const replica = this._svg ? this._svg.replace(/<svg /, `<svg class=\"${rootClasses}\" `) : null;\n        return html`${unsafeHTML(replica)}`;\n    }\n\n    private _ensureIconRegistered = () => {\n        const waitForIconRegister = (resolve, reject, depth = 0) => {\n            Promise.resolve(this.icon).then((_icon) => {\n                const value = fetchIcon(_icon.default ?? _icon);\n                if (value) {\n                    resolve(value);\n                } else if (depth > 5) {\n                    reject(new Error('timeout for ' + _icon));\n                } else {\n                    if (Icon.iconResolver) {\n                        Icon.iconResolver(this.icon);\n                    }\n                    // 0, 40, 160, 480, 1280, 3200, error\n                    const tmo = 2 ** depth * (depth * 20);\n                    setTimeout(() => waitForIconRegister(resolve, reject, depth + 1), tmo < 100 ? 100 : tmo);\n                }\n            });\n        };\n        return new Promise(waitForIconRegister);\n    };\n}\n","import { fetchIcon } from './registerIcon';\n\nexport interface IconRawFormat {\n    d: string[];\n    viewBox: string;\n    rect: { x: number; y: number; width: number; height: number };\n    translateToCenter: { x: number; y: number };\n}\n\nlet _domParser;\nconst _cache = {};\nexport const getIconSvgElement = (icon): SVGElement => {\n    const stashedIcon = fetchIcon(icon);\n    if (!_domParser) {\n        _domParser = new DOMParser();\n    }\n    return _domParser.parseFromString(stashedIcon, 'image/svg+xml').firstElementChild as SVGElement;\n};\n\nexport const getIconRawFormat = (icon): IconRawFormat => {\n    const cached = _cache[icon];\n    if (cached) {\n        return cached;\n    }\n\n    const svg = getIconSvgElement(icon);\n    const paths = [...getIconSvgElement(icon).querySelectorAll('path')];\n    const viewBox = svg.getAttribute('viewBox') ?? '';\n    const [x, y, width, height] = viewBox.split(' ').map(parseFloat);\n    _cache[icon] = {\n        viewBox,\n        rect: { x, y, width, height },\n        translateToCenter: { x: x + width / 2, y: y + height / 2 },\n        d: paths.map((p) => p.getAttribute('d')!),\n    };\n    return _cache[icon];\n};\n\n/** @deprecated - kinda unuseful since it returns partial icon data (one path and no viewbox) **/\nexport const getIconDataValue = (icon): string => {\n    return getIconRawFormat(icon).d?.[0] ?? '';\n};\n","import { cssSelector, GenerateStyles, style, css, CSSResultArray } from '@umetrics/sartorius-ui-base';\n\nexport const iconStyles: GenerateStyles = (tagName) => {\n    const { root, is } = cssSelector(tagName);\n\n    return [\n        style,\n        css`\n            :host {\n                display: inline-block;\n                line-height: 0;\n            }\n\n            ${root} {\n                fill: var(--icon-color, currentcolor);\n                width: 1em;\n                height: 1em;\n            }\n            ${is('extra-tiny')} {\n                width: 0.625rem;\n                height: 0.625rem;\n            }\n            ${is('tiny')} {\n                width: 0.75rem;\n                height: 0.75rem;\n            }\n            ${is('small')} {\n                width: 1rem;\n                height: 1rem;\n            }\n            ${is('normal')} {\n                width: 1.25rem;\n                height: 1.25rem;\n            }\n            ${is('large')} {\n                width: 1.5rem;\n                height: 1.5rem;\n            }\n            ${is('extra-large')} {\n                width: 3rem;\n                height: 3rem;\n            }\n\n            ${is('spin')} {\n                animation: mj-spin 2s infinite linear;\n            }\n            ${is('pulse')} {\n                animation: mj-spin 1s infinite steps(8);\n            }\n            ${is('crisp-edges')} {\n                shape-rendering: crispEdges;\n            }\n\n            @keyframes mj-spin {\n                0% {\n                    transform: rotate(0deg);\n                }\n                100% {\n                    transform: rotate(360deg);\n                }\n            }\n\n            ${is('flip-horizontal')} {\n                transform: scale(-1, 1);\n            }\n            ${is('flip-vertical')} {\n                transform: scale(1, -1);\n            }\n        `,\n    ] as CSSResultArray;\n};\n","import { version } from './metadata';\n\nlet icons;\nconst getStash = () => {\n    if (!icons) {\n        let studio = window['studio'];\n        if (!studio) {\n            studio = window['studio'] = {};\n        }\n        let sui = studio['sui'];\n        if (!sui) {\n            sui = studio['sui'] = {};\n        }\n        const major = version.split('.')[0] || version;\n        const stash = `icons${major}`;\n        icons = icons || sui[stash];\n        if (!icons) {\n            icons = sui[stash] = {};\n        }\n    }\n    return icons;\n};\n\nexport const registerIcon = (data) => {\n    const stash = getStash();\n    if (!stash[data.name]) {\n        stash[data.name] = data.data;\n    }\n    return data.name;\n};\n\nexport const fetchIcon = (icon) => {\n    return getStash()[icon];\n};\n","/*\n * Metadata build info for package. Managed at build time by task tools/metadata.ts\n */\nexport const version = '0.0.0';\nexport const buildDate = '2021-02-02- 02:02:02.000';\n"],"names":["IconSize","_domParser","Icon","Icon_1","BaseElement","constructor","_this","crispEdges","_spin","_pulse","_flipVertical","_flipHorizontal","_ensureIconRegistered","waitForIconRegister","resolve","reject","depth","arguments","length","undefined","Promise","icon","then","_icon","value","fetchIcon","_a","default","Error","iconResolver","tmo","setTimeout","spin","this","val","prev","requestUpdate","pulse","flipVertical","flipHorizontal","shouldUpdate","changedProperties","has","data","_svg","catch","super","render","rootClasses","createClassName","tagName","toLowerCase","size","replica","replace","html","unsafeHTML","setIconResolver","f","__decorate","property","type","Boolean","reflect","attribute","String","state","defineElement","styles","root","is","cssSelector","style","css","version","_cache","getIconSvgElement","stashedIcon","DOMParser","parseFromString","firstElementChild","getIconRawFormat","cached","svg","paths","querySelectorAll","viewBox","getAttribute","x","y","width","height","split","map","parseFloat","rect","translateToCenter","d","p","getIconDataValue","_b","icons","getStash","studio","window","sui","stash","registerIcon","name"],"sourceRoot":""}