{"version":3,"file":"static/js/8961.260fd2d1.chunk.js","mappings":"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","sources":["../node_modules/@umetrics/sartorius-ui-mixins/src/mixinResizableBehavior.ts","../node_modules/@umetrics/sartorius-ui-collapse/src/collapseEvent.ts","../node_modules/@umetrics/sartorius-ui-collapse/src/collapse.ts","../node_modules/@umetrics/sartorius-ui-collapse/src/collapseStyle.ts","../node_modules/@umetrics/sartorius-ui-collapse/src/metadata.ts"],"sourcesContent":["import { BaseElement } from '@umetrics/sartorius-ui-base';\nimport { Constructor } from './constructor';\n\n/**\n * Mixin ResizableBehaviorMixin for Sartorius-UI baseclass\n *\n * Coordinate the flow of resize events between \"resizers\" (elements that control the size or hidden state of their\n * children) and \"resizables\" (elements that need to be notified when they are resized or un-hidden by their parents\n * in order to take action on their new measurements).\n *\n * Usage : class Demo extends ResizableBehaviorMixin(BaseElement) implements ... { ... }\n *\n */\nexport const resizableBehaviorResizeEventType = 'requestresizenotifications';\nexport const resizableBehaviorResizeEvent = 'resize';\n\nexport declare abstract class ResizableBehaviorMixinInterface extends BaseElement {\n    public notifyResize();\n}\n\nconst ORPHANS = new Set();\n\nexport const ResizableBehaviorMixin = <T extends Constructor<BaseElement>>(superClass: T) => {\n    abstract class MyMixinClass extends superClass {\n        private __parentResizable;\n        private __notifyingDescendant;\n        private _interestedResizables;\n        private isAttached = false;\n\n        /**\n         * The closest ancestor element that implements `ResizableMixin`.\n         * @return {HTMLElement}\n         */\n        get _parentResizable() {\n            return this.__parentResizable;\n        }\n\n        /**\n         * @param {HTMLElement} value\n         */\n        set _parentResizable(value) {\n            const old = this.__parentResizable;\n            this.__parentResizable = value;\n            if (old !== value) {\n                this._parentResizableChanged(value);\n            }\n        }\n\n        get _notifyingDescendant() {\n            return this.__notifyingDescendant;\n        }\n\n        set _notifyingDescendant(value) {\n            this.__notifyingDescendant = value;\n        }\n\n        protected constructor(...args: any[]) {\n            super(args);\n\n            this._interestedResizables = [];\n            this._notifyingDescendant = false;\n\n            this._onIronRequestResizeNotifications = this._onIronRequestResizeNotifications.bind(this);\n            this.notifyResize = this.notifyResize.bind(this);\n            this._onDescendantIronResize = this._onDescendantIronResize.bind(this);\n\n            this.addEventListener(resizableBehaviorResizeEventType, this._onIronRequestResizeNotifications, true);\n        }\n\n        connectedCallback() {\n            super.connectedCallback();\n\n            this.isAttached = true;\n            setTimeout(() => {\n                this._requestResizeNotifications();\n            });\n        }\n\n        disconnectedCallback() {\n            super.disconnectedCallback();\n\n            this.isAttached = false;\n            if (this._parentResizable) {\n                this._parentResizable.stopResizeNotificationsFor(this);\n            } else {\n                ORPHANS.delete(this);\n                window.removeEventListener('resize', this.notifyResize);\n            }\n\n            this._parentResizable = null;\n        }\n\n        /**\n         * Can be called to manually notify a resizable and its descendant\n         * resizables of a resize change.\n         */\n        public notifyResize() {\n            if (this.isAttached) {\n                this._interestedResizables.forEach((resizable) => {\n                    if (this.resizerShouldNotify(resizable)) {\n                        this._notifyDescendant(resizable);\n                    }\n                });\n                this._fireResize();\n            }\n        }\n\n        /**\n         * Used to assign the closest resizable ancestor to this resizable\n         * if the ancestor detects a request for notifications.\n         *\n         * @param {HTMLElement} parentResizable\n         */\n        assignParentResizable(parentResizable) {\n            if (this._parentResizable) {\n                this._parentResizable.stopResizeNotificationsFor(this);\n            }\n\n            this._parentResizable = parentResizable;\n            if (parentResizable && parentResizable._interestedResizables.indexOf(this) === -1) {\n                parentResizable._interestedResizables.push(this);\n                parentResizable._subscribeIronResize(this);\n            }\n        }\n\n        /**\n         * Used to remove a resizable descendant from the list of descendants\n         * that should be notified of a resize change.\n         *\n         * @param {HTMLElement} target\n         */\n        stopResizeNotificationsFor(target) {\n            const index = this._interestedResizables.indexOf(target);\n            if (index > -1) {\n                this._interestedResizables.splice(index, 1);\n                this._unsubscribeIronResize(target);\n            }\n        }\n\n        /**\n         * Subscribe this element to listen to `resize` events on the given target.\n         *\n         * Preferred over target.listen because the property \"renamer\" does not\n         * understand to rename when the target is not specifically \"this\"\n         *\n         * @param {HTMLElement} target Element to listen to for `resize` events.\n         */\n        _subscribeIronResize(target) {\n            target.addEventListener(resizableBehaviorResizeEvent, this._onDescendantIronResize);\n        }\n\n        /**\n         * Unsubscribe this element from listening to to `resize` events on the\n         * given target.\n         *\n         * Preferred over target.unlisten because the property \"renamer\" does not\n         * understand to rename when the target is not specifically \"this\"\n         *\n         * @param {HTMLElement} target Element to listen to for `resize` events.\n         */\n        _unsubscribeIronResize(target) {\n            target.removeEventListener(resizableBehaviorResizeEvent, this._onDescendantIronResize);\n        }\n\n        /**\n         * This method can be overridden to filter nested elements that should or\n         * should not be notified by the current element. Return true if an element\n         * should be notified, or false if it should not be notified.\n         *\n         * @param {HTMLElement} _ / element A candidate descendant element that\n         * implements `ResizableMixin`.\n         * @return {boolean} True if the `element` should be notified of resize.\n         */\n        resizerShouldNotify(_) {\n            return true;\n        }\n\n        _onDescendantIronResize(e) {\n            if (this._notifyingDescendant) {\n                e.stopPropagation();\n                return;\n            }\n            this._fireResize();\n        }\n\n        _fireResize() {\n            this.dispatchEvent(new CustomEvent(resizableBehaviorResizeEvent));\n        }\n\n        _onIronRequestResizeNotifications(e) {\n            const cp = e.composedPath && e.composedPath();\n            let path;\n            if (cp) {\n                path = cp;\n            } else {\n                path = e.path || [];\n            }\n            const target = path[0];\n            if (target === this) {\n                return;\n            }\n            target.assignParentResizable(this);\n            this._notifyDescendant(target);\n            e.stopPropagation();\n        }\n\n        _parentResizableChanged(parentResizable) {\n            if (parentResizable) {\n                window.removeEventListener('resize', this.notifyResize);\n            }\n        }\n\n        _notifyDescendant(descendant) {\n            // In IE10, attached is fired on children first, so it's\n            // important not to notify them if the parent is not attached yet (or\n            // else they will get redundantly notified when the parent attaches).\n            if (this.isAttached) {\n                this._notifyingDescendant = true;\n                descendant.notifyResize();\n                this._notifyingDescendant = false;\n            }\n        }\n\n        _requestResizeNotifications() {\n            if (!this.isAttached) {\n                return;\n            }\n\n            if (document.readyState === 'loading') {\n                const _requestResizeNotifications = this._requestResizeNotifications.bind(this);\n                document.addEventListener('readystatechange', function readyStateChanged() {\n                    document.removeEventListener('readystatechange', readyStateChanged);\n                    _requestResizeNotifications();\n                });\n            } else {\n                this._findParent();\n\n                if (!this._parentResizable) {\n                    // If this resizable is an orphan, tell other orphans to try to find\n                    // their parent again, in case it's this resizable.\n                    ORPHANS.forEach((orphan) => {\n                        if (orphan !== this) {\n                            (orphan as any)._findParent();\n                        }\n                    });\n\n                    window.addEventListener('resize', this.notifyResize);\n                    this.notifyResize();\n                } else {\n                    // If this resizable has a parent, tell other child resizables of\n                    // that parent to try finding their parent again, in case it's this\n                    // resizable.\n                    this._parentResizable._interestedResizables.forEach((resizable) => {\n                        if (resizable !== this) {\n                            resizable._findParent();\n                        }\n                    });\n                }\n            }\n        }\n\n        _findParent() {\n            this.assignParentResizable(null);\n            this.dispatchEvent(\n                new CustomEvent(resizableBehaviorResizeEventType, {\n                    bubbles: true,\n                    cancelable: true,\n                    composed: true,\n                })\n            );\n\n            if (!this._parentResizable) {\n                ORPHANS.add(this);\n            } else {\n                ORPHANS.delete(this);\n            }\n        }\n    }\n\n    return MyMixinClass as unknown as Constructor<ResizableBehaviorMixinInterface> & T;\n};\n","export enum CollapseEvent {\n    Toggle = 'collapse-toggle',\n}\n","import {\n    BaseElement,\n    createClassName,\n    defineElement,\n    html,\n    ifDefined,\n    property,\n    query,\n    state,\n} from '@umetrics/sartorius-ui-base';\nimport { version } from './metadata';\nimport { collapseStyles } from './collapseStyle';\nimport { CollapseProperties } from './collapseProperties';\nimport { CollapseEvent } from './collapseEvent';\nimport { EventDispatcherMixin, ResizableBehaviorMixin } from '@umetrics/sartorius-ui-mixins';\n\n@defineElement({ tagName: 'collapse', styles: collapseStyles, version })\nexport class Collapse extends EventDispatcherMixin(ResizableBehaviorMixin(BaseElement)) implements CollapseProperties {\n    // Static members\n    public static readonly CURRENT_SLOT = 'current-slot';\n\n    @property({ type: Boolean, reflect: true, attribute: 'no-animation' })\n    public noAnimation = false;\n    @property({ type: String, reflect: true, attribute: 'a11y-labeled-by' })\n    public a11yLabeledBy = '';\n    @property({ type: String, reflect: true, attribute: 'content-id' })\n    public contentId = '';\n\n    private _animating = false;\n    private _desiredSize = '0px';\n    private _open = false;\n    private _horizontal = false;\n\n    @state()\n    private _classOpen = this._open;\n    @state()\n    private _classClosed = !this._open;\n\n    @query('div')\n    private _div;\n\n    constructor() {\n        super();\n        this._addSingletonTransitionEventHandler = this._addSingletonTransitionEventHandler.bind(this);\n        this._transitionEnd = this._transitionEnd.bind(this);\n    }\n\n    @property({ type: Boolean, reflect: true })\n    get open() {\n        return this._open;\n    }\n    set open(value) {\n        const prev = this._open;\n        if (prev !== value) {\n            this._open = value;\n\n            this.setAttribute('aria-hidden', '' + !this._open);\n\n            // Focus the current collapse.\n            if (this._open) {\n                this.focus();\n            }\n            this._classClosed = false;\n            this._updateSize(this._open ? 'auto' : '0px', true);\n            this._classOpen = false;\n\n            this.requestUpdate('open', prev);\n        }\n    }\n    @property({ type: Boolean, reflect: true })\n    get horizontal() {\n        return this._horizontal;\n    }\n    set horizontal(value) {\n        const prev = this._horizontal;\n        if (prev !== value) {\n            this._horizontal = value;\n            if (this._div) {\n                const otherDimension = this._dimensionMax === 'maxWidth' ? 'maxHeight' : 'maxWidth';\n                this._div.style[otherDimension] = '';\n            }\n            this._updateSize(this._open ? 'auto' : '0px', false);\n            this.requestUpdate('horizontal', prev);\n        }\n    }\n\n    public toggle() {\n        this.open = !this.open;\n    }\n\n    public show() {\n        this.open = true;\n    }\n\n    public hide() {\n        this.open = false;\n    }\n\n    protected firstUpdated(_changedProperties) {\n        super.firstUpdated(_changedProperties);\n\n        if (this._classClosed) {\n            this._div.style[this._dimensionMax] = '0px';\n            const otherDimension = this._dimensionMax === 'maxWidth' ? 'maxHeight' : 'maxWidth';\n            this._div.style[otherDimension] = '';\n        }\n    }\n\n    protected render() {\n        const [baseClassName, rootClasses] = createClassName(this.tagName.toLowerCase(), {\n            closed: this._classClosed,\n            open: this._classOpen,\n        });\n\n        return html`\n            <div\n                id=\"${ifDefined(this.contentId)}\"\n                class=\"${rootClasses}\"\n                role=\"region\"\n                aria-labelledby=\"${ifDefined(this.a11yLabeledBy)}\"\n            >\n                <div class=\"${baseClassName}-inner\">\n                    <slot class=\"${baseClassName}-slot\"></slot>\n                </div>\n            </div>\n        `;\n    }\n\n    private afterReflow = (size, willAnimate) => {\n        // Set the final size.\n        this._div.style[this._dimensionMax] = size;\n        if (!willAnimate) {\n            this._transitionEnd();\n        } else {\n            this._addSingletonTransitionEventHandler(this, this._transitionEnd);\n        }\n    };\n\n    private _updateSize(size, animated) {\n        size = size === 'auto' ? '' : size; // Consider 'auto' as '', to take full size.\n\n        let willAnimate = animated && !this.noAnimation && this._desiredSize !== size;\n        this._desiredSize = size;\n        this._updateTransition(false);\n\n        requestAnimationFrame(async () => {\n            if (this._div) {\n                if (willAnimate) {\n                    // Animation will start at the current size.\n                    const startSize = this._calcSize();\n                    // For `auto` we must calculate what is the final size for the animation.\n                    // After the transition is done, _transitionEnd will set the size back to\n                    // `auto`.\n                    if (size === '') {\n                        this._div.style[this._dimensionMax] = '';\n                        size = this._calcSize();\n                    }\n                    this._div.style[this._dimensionMax] = startSize;\n\n                    setTimeout(() => {\n                        willAnimate = size !== startSize;\n                        this._updateTransition(true);\n                        this.afterReflow(size, willAnimate);\n                    }, 0);\n                } else {\n                    this.afterReflow(size, willAnimate);\n                }\n            }\n        });\n    }\n\n    private get _dimension() {\n        return this.horizontal ? 'width' : 'height';\n    }\n    private get _dimensionMax() {\n        return this.horizontal ? 'maxWidth' : 'maxHeight';\n    }\n\n    private _calcSize() {\n        return this._div[this._dimension === 'width' ? 'offsetWidth' : 'offsetHeight'] + 'px';\n    }\n\n    private _updateTransition(enabled) {\n        if (this._div) {\n            this._div.style.transitionDuration = enabled && !this.noAnimation ? '' : '0s';\n        }\n    }\n\n    private _transitionEnd() {\n        this._div.style[this._dimensionMax] = this._desiredSize;\n        this._classClosed = !this.open;\n        this._classOpen = this.open;\n\n        this._animating = false;\n        this.notifyResize();\n        this.dispatch(CollapseEvent.Toggle);\n    }\n\n    private _addSingletonTransitionEventHandler(elem: HTMLElement, callback) {\n        this._animating = true;\n        const timer = setTimeout(() => {\n            if (this._animating) {\n                callback();\n                this._animating = false;\n            }\n        }, 500);\n\n        elem.addEventListener(\n            'transitionend',\n            () => {\n                clearTimeout(timer);\n                callback();\n                this._animating = false;\n            },\n            { once: true }\n        );\n    }\n}\n","import { cssSelector, GenerateStyles, style, css } from '@umetrics/sartorius-ui-base';\n\nexport const collapseStyles: GenerateStyles = (tagName) => {\n    const { root, child, is } = cssSelector(tagName);\n\n    return [\n        style,\n        css`\n            :host,\n            :host::before,\n            :host::after,\n            :host *,\n            :host *::before,\n            :host *::after {\n                box-sizing: border-box;\n            }\n\n            :host {\n                display: block;\n                width: 100%;\n            }\n\n            ${root} {\n                display: block;\n                transition-duration: var(--expand-transition-duration, 250ms);\n                -webkit-transition-duration: var(--expand-transition-duration, 250ms);\n                overflow: visible;\n            }\n\n            ${child('inner')} {\n                padding-bottom: var(--collapse-bottom-padding, 0px);\n            }\n\n            ${is('closed')} {\n                display: none;\n            }\n            ${is('!open')} {\n                overflow: hidden;\n            }\n        `,\n    ];\n};\n","/*\n * Metadata build info for package. Managed at build time by task tools/metadata.ts\n */\nexport const version = '0.0.0';\nexport const buildDate = '2021-02-02- 02:02:02.000';\n"],"names":["resizableBehaviorResizeEventType","resizableBehaviorResizeEvent","ORPHANS","Set","ResizableBehaviorMixin","superClass","_parentResizable","this","__parentResizable","value","old","_parentResizableChanged","_notifyingDescendant","__notifyingDescendant","constructor","_len","arguments","length","args","Array","_key","super","isAttached","_interestedResizables","_onIronRequestResizeNotifications","bind","notifyResize","_onDescendantIronResize","addEventListener","connectedCallback","setTimeout","_requestResizeNotifications","disconnectedCallback","stopResizeNotificationsFor","delete","window","removeEventListener","forEach","resizable","resizerShouldNotify","_notifyDescendant","_fireResize","assignParentResizable","parentResizable","indexOf","push","_subscribeIronResize","target","index","splice","_unsubscribeIronResize","_","e","stopPropagation","dispatchEvent","CustomEvent","cp","composedPath","path","descendant","document","readyState","readyStateChanged","_findParent","orphan","bubbles","cancelable","composed","add","CollapseEvent","Collapse","EventDispatcherMixin","BaseElement","noAnimation","a11yLabeledBy","contentId","_animating","_desiredSize","_open","_horizontal","_classOpen","_classClosed","afterReflow","size","willAnimate","_div","style","_dimensionMax","_addSingletonTransitionEventHandler","_transitionEnd","open","prev","setAttribute","focus","_updateSize","requestUpdate","horizontal","otherDimension","toggle","show","hide","firstUpdated","_changedProperties","render","baseClassName","rootClasses","createClassName","tagName","toLowerCase","closed","html","ifDefined","animated","_updateTransition","requestAnimationFrame","async","startSize","_calcSize","_dimension","enabled","transitionDuration","dispatch","Toggle","elem","callback","timer","clearTimeout","once","CURRENT_SLOT","__decorate","property","type","Boolean","reflect","attribute","String","state","query","defineElement","styles","root","child","is","cssSelector","css","version"],"sourceRoot":""}