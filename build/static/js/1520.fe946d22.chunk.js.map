{"version":3,"file":"static/js/1520.fe946d22.chunk.js","mappings":"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","sources":["../node_modules/pixi.js/src/scene/text/canvas/CanvasTextPipe.ts","../node_modules/pixi.js/src/utils/canvas/getCanvasBoundingBox.ts","../node_modules/pixi.js/src/scene/text/canvas/CanvasTextSystem.ts","../node_modules/pixi.js/src/scene/text/init.ts","../node_modules/pixi.js/src/scene/sprite-tiling/shader/tilingBit.ts","../node_modules/pixi.js/src/scene/sprite-tiling/shader/TilingSpriteShader.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/QuadGeometry.ts","../node_modules/pixi.js/src/scene/sprite-tiling/TilingSpritePipe.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/setUvs.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/applyMatrix.ts","../node_modules/pixi.js/src/scene/sprite-tiling/utils/setPositions.ts","../node_modules/pixi.js/src/scene/sprite-tiling/init.ts","../node_modules/pixi.js/src/scene/graphics/gpu/colorToUniform.ts","../node_modules/pixi.js/src/app/ResizePlugin.ts","../node_modules/pixi.js/src/app/TickerPlugin.ts","../node_modules/pixi.js/src/app/init.ts","../node_modules/pixi.js/src/scene/sprite/BatchableSprite.ts","../node_modules/pixi.js/src/scene/graphics/shared/GraphicsPipe.ts","../node_modules/pixi.js/src/scene/graphics/init.ts","../node_modules/pixi.js/src/scene/text/utils/generateTextStyleKey.ts","../node_modules/pixi.js/src/scene/text/utils/updateTextBounds.ts","../node_modules/pixi.js/src/scene/text/canvas/CanvasTextMetrics.ts","../node_modules/pixi.js/src/scene/mesh/shared/BatchableMesh.ts","../node_modules/pixi.js/src/scene/text/sdfShader/shader-bits/localUniformMSDFBit.ts","../node_modules/pixi.js/src/scene/text/sdfShader/shader-bits/mSDFBit.ts","../node_modules/pixi.js/src/scene/text/sdfShader/SdfShader.ts","../node_modules/pixi.js/src/scene/text-bitmap/AbstractBitmapFont.ts","../node_modules/pixi.js/src/scene/text-bitmap/utils/resolveCharacters.ts","../node_modules/pixi.js/src/scene/text-bitmap/DynamicBitmapFont.ts","../node_modules/pixi.js/src/scene/text-bitmap/utils/getBitmapTextLayout.ts","../node_modules/pixi.js/src/scene/text-bitmap/BitmapFontManager.ts","../node_modules/pixi.js/src/scene/text-bitmap/BitmapTextPipe.ts","../node_modules/pixi.js/src/scene/text-bitmap/init.ts","../node_modules/pixi.js/src/rendering/high-shader/shader-bits/localUniformBit.ts","../node_modules/pixi.js/src/filters/FilterPipe.ts","../node_modules/pixi.js/src/filters/FilterSystem.ts","../node_modules/pixi.js/src/scene/container/bounds/getRenderableBounds.ts","../node_modules/pixi.js/src/filters/init.ts","../node_modules/pixi.js/src/rendering/renderers/shared/texture/CanvasPool.ts","../node_modules/pixi.js/src/scene/mesh/shared/MeshGeometry.ts","../node_modules/pixi.js/src/scene/mesh/shared/MeshPipe.ts","../node_modules/pixi.js/src/scene/mesh/init.ts","../node_modules/pixi.js/src/scene/text/TextStyle.ts","../node_modules/pixi.js/src/scene/text/utils/getPo2TextureFromSource.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextPipe.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextRenderData.ts","../node_modules/pixi.js/src/scene/text-html/utils/textStyleToCSS.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextStyle.ts","../node_modules/pixi.js/src/scene/text-html/utils/loadFontCSS.ts","../node_modules/pixi.js/src/scene/text-html/utils/loadFontAsBase64.ts","../node_modules/pixi.js/src/scene/text-html/utils/getFontCss.ts","../node_modules/pixi.js/src/scene/text-html/utils/measureHtmlText.ts","../node_modules/pixi.js/src/scene/text-html/HTMLTextSystem.ts","../node_modules/pixi.js/src/scene/text-html/utils/extractFontFamilies.ts","../node_modules/pixi.js/src/scene/text-html/utils/getSVGUrl.ts","../node_modules/pixi.js/src/scene/text-html/utils/loadSVGImage.ts","../node_modules/pixi.js/src/utils/browser/isSafari.ts","../node_modules/pixi.js/src/scene/text-html/utils/getTemporaryCanvasFromImage.ts","../node_modules/pixi.js/src/scene/text-html/init.ts","../node_modules/pixi.js/src/rendering/renderers/shared/state/State.ts","../node_modules/pixi.js/src/scene/text/canvas/utils/fontStringFromTextStyle.ts","../node_modules/pixi.js/src/scene/mesh-plane/PlaneGeometry.ts","../node_modules/pixi.js/src/scene/sprite-nine-slice/NineSliceGeometry.ts","../node_modules/pixi.js/src/scene/sprite-nine-slice/NineSliceSpritePipe.ts","../node_modules/pixi.js/src/scene/sprite-nine-slice/init.ts","../node_modules/pixi.js/src/scene/particle-container/gl/GlParticleContainerAdaptor.ts","../node_modules/pixi.js/src/scene/particle-container/shared/utils/createIndicesForQuads.ts","../node_modules/pixi.js/src/scene/particle-container/shared/utils/generateParticleUpdateFunction.ts","../node_modules/pixi.js/src/scene/particle-container/shared/ParticleBuffer.ts","../node_modules/pixi.js/src/scene/particle-container/shared/shader/ParticleShader.ts","../node_modules/pixi.js/src/scene/particle-container/shared/ParticleContainerPipe.ts","../node_modules/pixi.js/src/scene/particle-container/shared/GlParticleContainerPipe.ts","../node_modules/pixi.js/src/scene/particle-container/gpu/GpuParticleContainerAdaptor.ts","../node_modules/pixi.js/src/scene/particle-container/shared/GpuParticleContainerPipe.ts","../node_modules/pixi.js/src/scene/particle-container/init.ts","../node_modules/pixi.js/src/scene/text/canvas/utils/getCanvasFillStyle.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { BatchableSprite } from '../../sprite/BatchableSprite';\nimport { updateTextBounds } from '../utils/updateTextBounds';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { Container } from '../../container/Container';\nimport type { Text } from '../Text';\n\nexport class CanvasTextPipe implements RenderPipe<Text>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'text',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _gpuText: Record<number, {\n        texture: Texture,\n        currentKey: string,\n        batchableSprite: BatchableSprite,\n    }> = Object.create(null);\n\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.runners.resolutionChange.add(this);\n        this._renderer.renderableGC.addManagedHash(this, '_gpuText');\n    }\n\n    public resolutionChange()\n    {\n        for (const i in this._gpuText)\n        {\n            const gpuText = this._gpuText[i];\n\n            if (!gpuText) continue;\n\n            const text = gpuText.batchableSprite.renderable as Text;\n\n            if (text._autoResolution)\n            {\n                text._resolution = this._renderer.resolution;\n                text.onViewUpdate();\n            }\n        }\n    }\n\n    public validateRenderable(text: Text): boolean\n    {\n        const gpuText = this._getGpuText(text);\n\n        const newKey = text._getKey();\n\n        if (gpuText.currentKey !== newKey)\n        {\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(text: Text, instructionSet: InstructionSet)\n    {\n        const gpuText = this._getGpuText(text);\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (text._didTextUpdate)\n        {\n            this._updateText(text);\n        }\n\n        this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n    }\n\n    public updateRenderable(text: Text)\n    {\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (text._didTextUpdate)\n        {\n            this._updateText(text);\n        }\n\n        batchableSprite._batcher.updateElement(batchableSprite);\n    }\n\n    public destroyRenderable(text: Text)\n    {\n        text.off('destroyed', this._destroyRenderableBound);\n\n        this._destroyRenderableById(text.uid);\n    }\n\n    private _destroyRenderableById(textUid: number)\n    {\n        const gpuText = this._gpuText[textUid];\n\n        this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n\n        BigPool.return(gpuText.batchableSprite);\n\n        this._gpuText[textUid] = null;\n    }\n\n    private _updateText(text: Text)\n    {\n        const newKey = text._getKey();\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.currentKey !== newKey)\n        {\n            this._updateGpuText(text);\n        }\n\n        text._didTextUpdate = false;\n\n        updateTextBounds(batchableSprite, text);\n    }\n\n    private _updateGpuText(text: Text)\n    {\n        const gpuText = this._getGpuText(text);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.texture)\n        {\n            this._renderer.canvasText.decreaseReferenceCount(gpuText.currentKey);\n        }\n\n        gpuText.texture = batchableSprite.texture = this._renderer.canvasText.getManagedTexture(text);\n        gpuText.currentKey = text._getKey();\n        batchableSprite.texture = gpuText.texture;\n    }\n\n    private _getGpuText(text: Text)\n    {\n        return this._gpuText[text.uid] || this.initGpuText(text);\n    }\n\n    public initGpuText(text: Text)\n    {\n        const gpuTextData: CanvasTextPipe['_gpuText'][number] = {\n            texture: null,\n            currentKey: '--',\n            batchableSprite: BigPool.get(BatchableSprite),\n        };\n\n        gpuTextData.batchableSprite.renderable = text;\n        gpuTextData.batchableSprite.transform = text.groupTransform;\n        gpuTextData.batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n        gpuTextData.batchableSprite.roundPixels = (this._renderer._roundPixels | text._roundPixels) as 0 | 1;\n\n        this._gpuText[text.uid] = gpuTextData;\n\n        text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n        this._updateText(text);\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        text.on('destroyed', this._destroyRenderableBound);\n\n        return gpuTextData;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuText)\n        {\n            this._destroyRenderableById(i as unknown as number);\n        }\n\n        this._gpuText = null;\n        this._renderer = null;\n    }\n}\n","import { Rectangle } from '../../maths/shapes/Rectangle';\n\nimport type { ICanvas } from '../../environment/canvas/ICanvas';\n\nfunction checkRow(data: Uint8ClampedArray, width: number, y: number)\n{\n    for (let x = 0, index = 4 * y * width; x < width; ++x, index += 4)\n    {\n        if (data[index + 3] !== 0) return false;\n    }\n\n    return true;\n}\n\nfunction checkColumn(data: Uint8ClampedArray, width: number, x: number, top: number, bottom: number)\n{\n    const stride = 4 * width;\n\n    for (let y = top, index = (top * stride) + (4 * x); y <= bottom; ++y, index += stride)\n    {\n        if (data[index + 3] !== 0) return false;\n    }\n\n    return true;\n}\n\n/**\n * Measuring the bounds of a canvas' visible (non-transparent) pixels.\n * @param canvas - The canvas to measure.\n * @param resolution - The resolution of the canvas.\n * @returns The bounding box of the canvas' visible pixels.\n * @since 7.1.0\n * @memberof utils\n */\nexport function getCanvasBoundingBox(canvas: ICanvas, resolution = 1): Rectangle\n{\n    // https://gist.github.com/timdown/021d9c8f2aabc7092df564996f5afbbf\n\n    const { width, height } = canvas;\n\n    const context = canvas.getContext('2d', {\n        willReadFrequently: true,\n    });\n\n    if (context === null)\n    {\n        throw new TypeError('Failed to get canvas 2D context');\n    }\n\n    const imageData = context.getImageData(0, 0, width, height);\n    const data = imageData.data;\n\n    let left = 0;\n    let top = 0;\n    let right = width - 1;\n    let bottom = height - 1;\n\n    while (top < height && checkRow(data, width, top)) ++top;\n    if (top === height) return Rectangle.EMPTY;\n    while (checkRow(data, width, bottom)) --bottom;\n    while (checkColumn(data, width, left, top, bottom)) ++left;\n    while (checkColumn(data, width, right, top, bottom)) --right;\n\n    ++right;\n    ++bottom;\n\n    return new Rectangle(left / resolution, top / resolution, (right - left) / resolution, (bottom - top) / resolution);\n}\n","import { Color } from '../../../color/Color';\nimport { ExtensionType } from '../../../extensions/Extensions';\nimport { nextPow2 } from '../../../maths/misc/pow2';\nimport { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool';\nimport { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { getCanvasBoundingBox } from '../../../utils/canvas/getCanvasBoundingBox';\nimport { deprecation } from '../../../utils/logging/deprecation';\nimport { TextStyle } from '../TextStyle';\nimport { getPo2TextureFromSource } from '../utils/getPo2TextureFromSource';\nimport { CanvasTextMetrics } from './CanvasTextMetrics';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle';\nimport { getCanvasFillStyle } from './utils/getCanvasFillStyle';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../environment/canvas/ICanvasRenderingContext2D';\nimport type { System } from '../../../rendering/renderers/shared/system/System';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { TextOptions } from '../AbstractText';\nimport type { Text } from '../Text';\n\ninterface CanvasAndContext\n{\n    canvas: ICanvas;\n    context: ICanvasRenderingContext2D;\n}\n\n/**\n * System plugin to the renderer to manage canvas text.\n * @memberof rendering\n */\nexport class CanvasTextSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'canvasText',\n    } as const;\n\n    private _activeTextures: Record<string, {\n        canvasAndContext: CanvasAndContext,\n        texture: Texture,\n        usageCount: number,\n    }> = {};\n\n    private readonly _renderer: Renderer;\n\n    constructor(_renderer: Renderer)\n    {\n        this._renderer = _renderer;\n    }\n\n    public getTextureSize(text: string, resolution: number, style: TextStyle): { width: number, height: number }\n    {\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);\n\n        let width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        let height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        width = Math.ceil((width) - 1e-6);\n        height = Math.ceil((height) - 1e-6);\n        width = nextPow2(width);\n        height = nextPow2(height);\n\n        return { width, height };\n    }\n\n    /**\n     * This is a function that will create a texture from a text string, style and resolution.\n     * Useful if you want to make a texture of your text and use if for various other pixi things!\n     * @param options - The options of the text that will be used to generate the texture.\n     * @param options.text - the text to render\n     * @param options.style - the style of the text\n     * @param options.resolution - the resolution of the texture\n     * @returns the newly created texture\n     */\n    /** @deprecated since 8.0.0 */\n    public getTexture(text: string, resolution: number, style: TextStyle, textKey: string): Texture;\n    public getTexture(options: TextOptions): Texture;\n    public getTexture(options: TextOptions | string, resolution?: number, style?: TextStyle, _textKey?: string): Texture\n    {\n        if (typeof options === 'string')\n        {\n            // #if _DEBUG\n            deprecation('8.0.0', 'CanvasTextSystem.getTexture: Use object TextOptions instead of separate arguments');\n            // #endif\n\n            options = {\n                text: options,\n                style,\n                resolution,\n            };\n        }\n\n        if (!(options.style instanceof TextStyle))\n        {\n            options.style = new TextStyle(options.style);\n        }\n\n        const { texture, canvasAndContext } = this.createTextureAndCanvas(\n            options as {text: string, style: TextStyle, resolution?: number}\n        );\n\n        this._renderer.texture.initSource(texture._source);\n\n        CanvasPool.returnCanvasAndContext(canvasAndContext);\n\n        return texture;\n    }\n\n    public createTextureAndCanvas(options: {text: string, style: TextStyle, resolution?: number})\n    {\n        const { text, style } = options;\n\n        const resolution = options.resolution ?? this._renderer.resolution;\n\n        // create a canvas with the word hello on it\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);\n\n        const width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        const height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(width, height);\n\n        // create a texture from the canvas\n        const { canvas } = canvasAndContext;\n\n        this.renderTextToCanvas(text, style, resolution, canvasAndContext);\n\n        const texture = getPo2TextureFromSource(canvas, width, height, resolution);\n\n        if (style.trim)\n        {\n            const trimmed = getCanvasBoundingBox(canvas, resolution);\n\n            texture.frame.copyFrom(trimmed);\n\n            texture.updateUvs();\n        }\n\n        return { texture, canvasAndContext };\n    }\n\n    public getManagedTexture(text: Text)\n    {\n        text._resolution = text._autoResolution ? this._renderer.resolution : text.resolution;\n        const textKey = text._getKey();\n\n        if (this._activeTextures[textKey])\n        {\n            this._increaseReferenceCount(textKey);\n\n            return this._activeTextures[textKey].texture;\n        }\n\n        const { texture, canvasAndContext } = this.createTextureAndCanvas(text);\n\n        this._activeTextures[textKey] = {\n            canvasAndContext,\n            texture,\n            usageCount: 1,\n        };\n\n        return texture;\n    }\n\n    private _increaseReferenceCount(textKey: string)\n    {\n        this._activeTextures[textKey].usageCount++;\n    }\n\n    /**\n     * Returns a texture that was created wit the above `getTexture` function.\n     * Handy if you are done with a texture and want to return it to the pool.\n     * @param texture - The texture to be returned.\n     */\n    public returnTexture(texture: Texture)\n    {\n        const source = texture.source;\n\n        source.resource = null;\n        source.uploadMethodId = 'unknown';\n        source.alphaMode = 'no-premultiply-alpha';\n\n        TexturePool.returnTexture(texture);\n    }\n\n    public decreaseReferenceCount(textKey: string)\n    {\n        const activeTexture = this._activeTextures[textKey];\n\n        activeTexture.usageCount--;\n\n        if (activeTexture.usageCount === 0)\n        {\n            CanvasPool.returnCanvasAndContext(activeTexture.canvasAndContext);\n\n            this.returnTexture(activeTexture.texture);\n\n            this._activeTextures[textKey] = null;\n        }\n    }\n\n    public getReferenceCount(textKey: string)\n    {\n        return this._activeTextures[textKey].usageCount;\n    }\n\n    /**\n     * Renders text to its canvas, and updates its texture.\n     *\n     * By default this is used internally to ensure the texture is correct before rendering,\n     * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n     * and then shared across multiple Sprites.\n     * @param text\n     * @param style\n     * @param resolution\n     * @param canvasAndContext\n     */\n    public renderTextToCanvas(text: string, style: TextStyle, resolution: number, canvasAndContext: CanvasAndContext): void\n    {\n        const { canvas, context } = canvasAndContext;\n\n        const font = fontStringFromTextStyle(style);\n\n        const measured = CanvasTextMetrics.measureText(text || ' ', style);// , canvas);\n        const lines = measured.lines;\n        const lineHeight = measured.lineHeight;\n        const lineWidths = measured.lineWidths;\n        const maxLineWidth = measured.maxLineWidth;\n        const fontProperties = measured.fontProperties;\n\n        const height = canvas.height;\n\n        context.resetTransform();\n        context.scale(resolution, resolution);\n        context.textBaseline = style.textBaseline;\n\n        // set stroke styles..\n\n        if (style._stroke?.width)\n        {\n            const strokeStyle = style._stroke;\n\n            context.lineWidth = strokeStyle.width;\n\n            context.miterLimit = strokeStyle.miterLimit;\n            context.lineJoin = strokeStyle.join;\n            context.lineCap = strokeStyle.cap;\n        }\n\n        // return;\n        context.font = font;\n\n        let linePositionX: number;\n        let linePositionY: number;\n\n        // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n        const passesCount = style.dropShadow ? 2 : 1;\n\n        // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n        // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n        //\n        // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n        // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n        // and the stroke; and fill drop shadows would appear over the top of the stroke.\n        //\n        // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n        // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n        // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n        // beneath the text, whilst also having the proper text shadow styling.\n        for (let i = 0; i < passesCount; ++i)\n        {\n            const isShadowPass = style.dropShadow && i === 0;\n            // we only want the drop shadow, so put text way off-screen\n            const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + (style.padding * 2)) : 0;\n            const dsOffsetShadow = dsOffsetText * resolution;\n\n            if (isShadowPass)\n            {\n                // On Safari, text with gradient and drop shadows together do not position correctly\n                // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n                // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n                context.fillStyle = 'black';\n                context.strokeStyle = 'black';\n\n                const shadowOptions = style.dropShadow;\n\n                const dropShadowColor = shadowOptions.color;\n                const dropShadowAlpha = shadowOptions.alpha;\n\n                context.shadowColor = Color.shared\n                    .setValue(dropShadowColor)\n                    .setAlpha(dropShadowAlpha)\n                    .toRgbaString();\n\n                const dropShadowBlur = shadowOptions.blur * resolution;\n                const dropShadowDistance = shadowOptions.distance * resolution;\n\n                context.shadowBlur = dropShadowBlur;\n                context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n                context.shadowOffsetY = (Math.sin(shadowOptions.angle) * dropShadowDistance) + dsOffsetShadow;\n            }\n            else\n            {\n                context.fillStyle = style._fill ? getCanvasFillStyle(style._fill, context, measured) : null;\n\n                if (style._stroke?.width)\n                {\n                    const padding = style._stroke.width * style._stroke.alignment;\n\n                    context.strokeStyle = getCanvasFillStyle(style._stroke, context, measured, padding);\n                }\n\n                context.shadowColor = 'black';\n            }\n\n            let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n\n            if (lineHeight - fontProperties.fontSize < 0)\n            {\n                linePositionYShift = 0;\n            }\n\n            const strokeWidth = style._stroke?.width ?? 0;\n\n            // draw lines line by line\n            for (let i = 0; i < lines.length; i++)\n            {\n                linePositionX = strokeWidth / 2;\n                linePositionY = ((strokeWidth / 2) + (i * lineHeight)) + fontProperties.ascent + linePositionYShift;\n\n                if (style.align === 'right')\n                {\n                    linePositionX += maxLineWidth - lineWidths[i];\n                }\n                else if (style.align === 'center')\n                {\n                    linePositionX += (maxLineWidth - lineWidths[i]) / 2;\n                }\n\n                if (style._stroke?.width)\n                {\n                    this._drawLetterSpacing(\n                        lines[i],\n                        style,\n                        canvasAndContext,\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText,\n                        true\n                    );\n                }\n\n                if (style._fill !== undefined)\n                {\n                    this._drawLetterSpacing(\n                        lines[i],\n                        style,\n                        canvasAndContext,\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText\n                    );\n                }\n            }\n        }\n    }\n\n    /**\n     * Render the text with letter-spacing.\n     * @param text - The text to draw\n     * @param style\n     * @param canvasAndContext\n     * @param x - Horizontal position to draw the text\n     * @param y - Vertical position to draw the text\n     * @param isStroke - Is this drawing for the outside stroke of the\n     *  text? If not, it's for the inside fill\n     */\n    private _drawLetterSpacing(\n        text: string,\n        style: TextStyle,\n        canvasAndContext: CanvasAndContext,\n        x: number, y: number,\n        isStroke = false\n    ): void\n    {\n        const { context } = canvasAndContext;\n\n        // letterSpacing of 0 means normal\n        const letterSpacing = style.letterSpacing;\n\n        let useExperimentalLetterSpacing = false;\n\n        if (CanvasTextMetrics.experimentalLetterSpacingSupported)\n        {\n            if (CanvasTextMetrics.experimentalLetterSpacing)\n            {\n                context.letterSpacing = `${letterSpacing}px`;\n                context.textLetterSpacing = `${letterSpacing}px`;\n                useExperimentalLetterSpacing = true;\n            }\n            else\n            {\n                context.letterSpacing = '0px';\n                context.textLetterSpacing = '0px';\n            }\n        }\n\n        if (letterSpacing === 0 || useExperimentalLetterSpacing)\n        {\n            if (isStroke)\n            {\n                context.strokeText(text, x, y);\n            }\n            else\n            {\n                context.fillText(text, x, y);\n            }\n\n            return;\n        }\n\n        let currentPosition = x;\n\n        const stringArray = CanvasTextMetrics.graphemeSegmenter(text);\n        let previousWidth = context.measureText(text).width;\n        let currentWidth = 0;\n\n        for (let i = 0; i < stringArray.length; ++i)\n        {\n            const currentChar = stringArray[i];\n\n            if (isStroke)\n            {\n                context.strokeText(currentChar, currentPosition, y);\n            }\n            else\n            {\n                context.fillText(currentChar, currentPosition, y);\n            }\n            let textStr = '';\n\n            for (let j = i + 1; j < stringArray.length; ++j)\n            {\n                textStr += stringArray[j];\n            }\n            currentWidth = context.measureText(textStr).width;\n            currentPosition += previousWidth - currentWidth + letterSpacing;\n            previousWidth = currentWidth;\n        }\n    }\n\n    public destroy(): void\n    {\n        this._activeTextures = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { CanvasTextPipe } from './canvas/CanvasTextPipe';\nimport { CanvasTextSystem } from './canvas/CanvasTextSystem';\n\nextensions.add(CanvasTextSystem);\nextensions.add(CanvasTextPipe);\n","export const tilingBit = {\n    name: 'tiling-bit',\n    vertex: {\n        header: /* wgsl */`\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `,\n        main: /* wgsl */`\n            uv = (tilingUniforms.uTextureTransform * vec3(uv, 1.0)).xy;\n\n            position = (position - tilingUniforms.uSizeAnchor.zw) * tilingUniforms.uSizeAnchor.xy;\n        `\n\n    },\n    fragment: {\n        header: /* wgsl */`\n            struct TilingUniforms {\n                uMapCoord:mat3x3<f32>,\n                uClampFrame:vec4<f32>,\n                uClampOffset:vec2<f32>,\n                uTextureTransform:mat3x3<f32>,\n                uSizeAnchor:vec4<f32>\n            };\n\n            @group(2) @binding(0) var<uniform> tilingUniforms: TilingUniforms;\n            @group(2) @binding(1) var uTexture: texture_2d<f32>;\n            @group(2) @binding(2) var uSampler: sampler;\n        `,\n        main: /* wgsl */`\n\n            var coord = vUV + ceil(tilingUniforms.uClampOffset - vUV);\n            coord = (tilingUniforms.uMapCoord * vec3(coord, 1.0)).xy;\n            var unclamped = coord;\n            coord = clamp(coord, tilingUniforms.uClampFrame.xy, tilingUniforms.uClampFrame.zw);\n\n            var bias = 0.;\n\n            if(unclamped.x == coord.x && unclamped.y == coord.y)\n            {\n                bias = -32.;\n            } \n\n            outColor = textureSampleBias(uTexture, uSampler, coord, bias);\n        `\n    }\n\n};\n\nexport const tilingBitGl = {\n    name: 'tiling-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTextureTransform;\n            uniform vec4 uSizeAnchor;\n        \n        `,\n        main: /* glsl */`\n            uv = (uTextureTransform * vec3(aUV, 1.0)).xy;\n\n            position = (position - uSizeAnchor.zw) * uSizeAnchor.xy;\n        `\n\n    },\n    fragment: {\n        header: /* glsl */`\n            uniform sampler2D uTexture;\n            uniform mat3 uMapCoord;\n            uniform vec4 uClampFrame;\n            uniform vec2 uClampOffset;\n        `,\n        main: /* glsl */`\n\n        vec2 coord = vUV + ceil(uClampOffset - vUV);\n        coord = (uMapCoord * vec3(coord, 1.0)).xy;\n        vec2 unclamped = coord;\n        coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\n        \n        outColor = texture(uTexture, coord, unclamped == coord ? 0.0 : -32.0);// lod-bias very negative to force lod 0\n    \n        `\n    }\n\n};\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport {\n    compileHighShaderGlProgram,\n    compileHighShaderGpuProgram\n} from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { localUniformBit, localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { tilingBit, tilingBitGl } from './tilingBit';\n\nimport type { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport type { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\n\nlet gpuProgram: GpuProgram;\nlet glProgram: GlProgram;\n\nexport class TilingSpriteShader extends Shader\n{\n    constructor()\n    {\n        gpuProgram ??= compileHighShaderGpuProgram({\n            name: 'tiling-sprite-shader',\n            bits: [\n                localUniformBit,\n                tilingBit,\n                roundPixelsBit,\n            ],\n        });\n\n        glProgram ??= compileHighShaderGlProgram({\n            name: 'tiling-sprite-shader',\n            bits: [\n                localUniformBitGl,\n                tilingBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        const tilingUniforms = new UniformGroup({\n            uMapCoord: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uClampFrame: { value: new Float32Array([0, 0, 1, 1]), type: 'vec4<f32>' },\n            uClampOffset: { value: new Float32Array([0, 0]), type: 'vec2<f32>' },\n            uTextureTransform: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uSizeAnchor: { value: new Float32Array([100, 100, 0.5, 0.5]), type: 'vec4<f32>' },\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                localUniforms: new UniformGroup({\n                    uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n                    uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n                    uRound: { value: 0, type: 'f32' },\n                }),\n                tilingUniforms,\n                uTexture: Texture.EMPTY.source,\n                uSampler: Texture.EMPTY.source.style,\n            }\n        });\n    }\n\n    public updateUniforms(\n        width: number, height: number,\n        matrix: Matrix,\n        anchorX: number, anchorY: number,\n        texture: Texture\n    ): void\n    {\n        const tilingUniforms = this.resources.tilingUniforms;\n\n        const textureWidth = texture.width;\n        const textureHeight = texture.height;\n        const textureMatrix = texture.textureMatrix;\n\n        const uTextureTransform = tilingUniforms.uniforms.uTextureTransform;\n\n        uTextureTransform.set(\n            matrix.a * textureWidth / width,\n            matrix.b * textureWidth / height,\n            matrix.c * textureHeight / width,\n            matrix.d * textureHeight / height,\n            matrix.tx / width,\n            matrix.ty / height);\n\n        uTextureTransform.invert();\n\n        tilingUniforms.uniforms.uMapCoord = textureMatrix.mapCoord;\n        tilingUniforms.uniforms.uClampFrame = textureMatrix.uClampFrame;\n        tilingUniforms.uniforms.uClampOffset = textureMatrix.uClampOffset;\n        tilingUniforms.uniforms.uTextureTransform = uTextureTransform;\n        tilingUniforms.uniforms.uSizeAnchor[0] = width;\n        tilingUniforms.uniforms.uSizeAnchor[1] = height;\n        tilingUniforms.uniforms.uSizeAnchor[2] = anchorX;\n        tilingUniforms.uniforms.uSizeAnchor[3] = anchorY;\n\n        if (texture)\n        {\n            this.resources.uTexture = texture.source;\n            this.resources.uSampler = texture.source.style;\n        }\n    }\n}\n","import { MeshGeometry } from '../../mesh/shared/MeshGeometry';\n\nexport class QuadGeometry extends MeshGeometry\n{\n    constructor()\n    {\n        super({\n            positions: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            uvs: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            indices: new Uint32Array([0, 1, 2, 0, 2, 3]),\n        });\n    }\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { getAdjustedBlendModeBlend } from '../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { State } from '../../rendering/renderers/shared/state/State';\nimport { type Renderer, RendererType } from '../../rendering/renderers/types';\nimport { color32BitToUniform } from '../graphics/gpu/colorToUniform';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry';\nimport { TilingSpriteShader } from './shader/TilingSpriteShader';\nimport { QuadGeometry } from './utils/QuadGeometry';\nimport { setPositions } from './utils/setPositions';\nimport { setUvs } from './utils/setUvs';\n\nimport type { WebGLRenderer } from '../../rendering/renderers/gl/WebGLRenderer';\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Container } from '../container/Container';\nimport type { TilingSprite } from './TilingSprite';\n\ninterface RenderableData\n{\n    canBatch: boolean;\n    renderable: TilingSprite\n    batchableMesh?: BatchableMesh;\n    geometry?: MeshGeometry;\n    shader?: TilingSpriteShader;\n}\n\nconst sharedQuad = new QuadGeometry();\n\nexport class TilingSpritePipe implements RenderPipe<TilingSprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'tilingSprite',\n    } as const;\n\n    private _renderer: Renderer;\n    private readonly _state: State = State.default2d;\n    private readonly _tilingSpriteDataHash: Record<number, RenderableData> = Object.create(null);\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_tilingSpriteDataHash');\n    }\n\n    public validateRenderable(renderable: TilingSprite): boolean\n    {\n        const tilingSpriteData = this._getTilingSpriteData(renderable);\n\n        const couldBatch = tilingSpriteData.canBatch;\n\n        this._updateCanBatch(renderable);\n\n        const canBatch = tilingSpriteData.canBatch;\n\n        if (canBatch && canBatch === couldBatch)\n        {\n            const { batchableMesh } = tilingSpriteData;\n\n            return !batchableMesh._batcher.checkAndUpdateTexture(\n                batchableMesh,\n                renderable.texture\n            );\n        }\n\n        return (couldBatch !== canBatch);\n\n        // // TODO - only update if required?\n        // // only texture\n        // // only uvs\n        // // only positions?\n    }\n\n    public addRenderable(tilingSprite: TilingSprite, instructionSet: InstructionSet)\n    {\n        const batcher = this._renderer.renderPipes.batch;\n\n        // init\n        this._updateCanBatch(tilingSprite);\n\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        const { geometry, canBatch } = tilingSpriteData;\n\n        if (canBatch)\n        {\n            tilingSpriteData.batchableMesh ||= new BatchableMesh();\n\n            const batchableMesh = tilingSpriteData.batchableMesh;\n\n            if (tilingSprite.didViewUpdate)\n            {\n                this._updateBatchableMesh(tilingSprite);\n\n                batchableMesh.geometry = geometry;\n                batchableMesh.renderable = tilingSprite;\n                batchableMesh.transform = tilingSprite.groupTransform;\n                batchableMesh.setTexture(tilingSprite._texture);\n            }\n\n            batchableMesh.roundPixels = (this._renderer._roundPixels | tilingSprite._roundPixels) as 0 | 1;\n\n            batcher.addToBatch(batchableMesh, instructionSet);\n        }\n        else\n        {\n            batcher.break(instructionSet);\n\n            tilingSpriteData.shader ||= new TilingSpriteShader();\n\n            this.updateRenderable(tilingSprite);\n\n            instructionSet.add(tilingSprite);\n        }\n    }\n\n    public execute(tilingSprite: TilingSprite)\n    {\n        const { shader } = this._tilingSpriteDataHash[tilingSprite.uid];\n\n        shader.groups[0] = this._renderer.globalUniforms.bindGroup;\n\n        // deal with local uniforms...\n        const localUniforms = shader.resources.localUniforms.uniforms;\n\n        localUniforms.uTransformMatrix = tilingSprite.groupTransform;\n        localUniforms.uRound = this._renderer._roundPixels | tilingSprite._roundPixels;\n\n        color32BitToUniform(\n            tilingSprite.groupColorAlpha,\n            localUniforms.uColor,\n            0\n        );\n\n        this._state.blendMode = getAdjustedBlendModeBlend(tilingSprite.groupBlendMode, tilingSprite.texture._source);\n\n        this._renderer.encoder.draw({\n            geometry: sharedQuad,\n            shader,\n            state: this._state,\n        });\n    }\n\n    public updateRenderable(tilingSprite: TilingSprite)\n    {\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        const { canBatch } = tilingSpriteData;\n\n        if (canBatch)\n        {\n            const { batchableMesh } = tilingSpriteData;\n\n            if (tilingSprite.didViewUpdate) this._updateBatchableMesh(tilingSprite);\n\n            batchableMesh._batcher.updateElement(batchableMesh);\n        }\n        else if (tilingSprite.didViewUpdate)\n        {\n            const { shader } = tilingSpriteData;\n            // now update uniforms...\n\n            shader.updateUniforms(\n                tilingSprite.width,\n                tilingSprite.height,\n                tilingSprite._tileTransform.matrix,\n                tilingSprite.anchor.x,\n                tilingSprite.anchor.y,\n                tilingSprite.texture,\n            );\n        }\n    }\n\n    public destroyRenderable(tilingSprite: TilingSprite)\n    {\n        const tilingSpriteData = this._getTilingSpriteData(tilingSprite);\n\n        tilingSpriteData.batchableMesh = null;\n\n        tilingSpriteData.shader?.destroy();\n\n        this._tilingSpriteDataHash[tilingSprite.uid] = null;\n\n        tilingSprite.off('destroyed', this._destroyRenderableBound);\n    }\n\n    private _getTilingSpriteData(renderable: TilingSprite): RenderableData\n    {\n        return this._tilingSpriteDataHash[renderable.uid] || this._initTilingSpriteData(renderable);\n    }\n\n    private _initTilingSpriteData(tilingSprite: TilingSprite): RenderableData\n    {\n        const geometry = new MeshGeometry({\n            indices: sharedQuad.indices,\n            positions: sharedQuad.positions.slice(),\n            uvs: sharedQuad.uvs.slice(),\n        });\n\n        this._tilingSpriteDataHash[tilingSprite.uid] = {\n            canBatch: true,\n            renderable: tilingSprite,\n            geometry,\n        };\n\n        tilingSprite.on('destroyed', this._destroyRenderableBound);\n\n        return this._tilingSpriteDataHash[tilingSprite.uid];\n    }\n\n    private _updateBatchableMesh(tilingSprite: TilingSprite)\n    {\n        const renderableData = this._getTilingSpriteData(tilingSprite);\n\n        const { geometry } = renderableData;\n\n        const style = tilingSprite.texture.source.style;\n\n        if (style.addressMode !== 'repeat')\n        {\n            style.addressMode = 'repeat';\n            style.update();\n        }\n\n        setUvs(tilingSprite, geometry.uvs);\n        setPositions(tilingSprite, geometry.positions);\n    }\n\n    public destroy()\n    {\n        for (const i in this._tilingSpriteDataHash)\n        {\n            this.destroyRenderable(this._tilingSpriteDataHash[i].renderable);\n        }\n\n        (this._tilingSpriteDataHash as null) = null;\n        this._renderer = null;\n    }\n\n    private _updateCanBatch(tilingSprite: TilingSprite)\n    {\n        const renderableData = this._getTilingSpriteData(tilingSprite);\n        const texture = tilingSprite.texture;\n\n        let _nonPowOf2wrapping = true;\n\n        if (this._renderer.type === RendererType.WEBGL)\n        {\n            _nonPowOf2wrapping = (this._renderer as WebGLRenderer).context.supports.nonPowOf2wrapping;\n        }\n\n        renderableData.canBatch = texture.textureMatrix.isSimple && (_nonPowOf2wrapping || texture.source.isPowerOfTwo);\n\n        return renderableData.canBatch;\n    }\n}\n\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport { applyMatrix } from './applyMatrix';\n\nimport type { TilingSprite } from '../TilingSprite';\n\nexport function setUvs(tilingSprite: TilingSprite, uvs: Float32Array)\n{\n    const texture = tilingSprite.texture;\n\n    const width = texture.frame.width;\n    const height = texture.frame.height;\n\n    let anchorX = 0;\n    let anchorY = 0;\n\n    if (tilingSprite.applyAnchorToTexture)\n    {\n        anchorX = tilingSprite.anchor.x;\n        anchorY = tilingSprite.anchor.y;\n    }\n\n    uvs[0] = uvs[6] = -anchorX;\n    uvs[2] = uvs[4] = 1 - anchorX;\n    uvs[1] = uvs[3] = -anchorY;\n    uvs[5] = uvs[7] = 1 - anchorY;\n\n    const textureMatrix = Matrix.shared;\n\n    textureMatrix.copyFrom(tilingSprite._tileTransform.matrix);\n\n    textureMatrix.tx /= tilingSprite.width;\n    textureMatrix.ty /= tilingSprite.height;\n\n    textureMatrix.invert();\n\n    textureMatrix.scale(tilingSprite.width / width, tilingSprite.height / height);\n\n    applyMatrix(uvs, 2, 0, textureMatrix);\n}\n","import type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { TypedArray } from '../../../rendering/renderers/shared/buffer/Buffer';\n\nexport function applyMatrix(array: TypedArray, stride: number, offset: number, matrix: Matrix)\n{\n    let index = 0;\n    const size = array.length / (stride || 2);\n\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n\n    offset *= stride;\n\n    while (index < size)\n    {\n        const x = array[offset];\n        const y = array[offset + 1];\n\n        array[offset] = (a * x) + (c * y) + tx;\n        array[offset + 1] = (b * x) + (d * y) + ty;\n\n        offset += stride;\n\n        index++;\n    }\n}\n","import type { TilingSprite } from '../TilingSprite';\n\nexport function setPositions(tilingSprite: TilingSprite, positions: Float32Array)\n{\n    const anchorX = tilingSprite.anchor.x;\n    const anchorY = tilingSprite.anchor.y;\n\n    positions[0] = -anchorX * tilingSprite.width;\n    positions[1] = -anchorY * tilingSprite.height;\n    positions[2] = (1 - anchorX) * tilingSprite.width;\n    positions[3] = -anchorY * tilingSprite.height;\n    positions[4] = (1 - anchorX) * tilingSprite.width;\n    positions[5] = (1 - anchorY) * tilingSprite.height;\n    positions[6] = -anchorX * tilingSprite.width;\n    positions[7] = (1 - anchorY) * tilingSprite.height;\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { TilingSpritePipe } from './TilingSpritePipe';\n\nextensions.add(TilingSpritePipe);\n","export function colorToUniform(rgb: number, alpha: number, out: Float32Array, offset: number)\n{\n    // TODO replace with Color..\n    out[offset++] = ((rgb >> 16) & 0xFF) / 255;\n    out[offset++] = ((rgb >> 8) & 0xFF) / 255;\n    out[offset++] = (rgb & 0xFF) / 255;\n    out[offset++] = alpha;\n}\n\nexport function color32BitToUniform(abgr: number, out: Float32Array, offset: number)\n{\n    const alpha = ((abgr >> 24) & 0xFF) / 255;\n\n    out[offset++] = ((abgr & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 8) & 0xFF) / 255) * alpha;\n    out[offset++] = (((abgr >> 16) & 0xFF) / 255) * alpha;\n    out[offset++] = alpha;\n}\n","import { ExtensionType } from '../extensions/Extensions';\n\nimport type { ExtensionMetadata } from '../extensions/Extensions';\nimport type { Renderer } from '../rendering/renderers/types';\n\ntype ResizeableRenderer = Pick<Renderer, 'resize'>;\n\n/**\n * Application options for the {@link app.ResizePlugin}.\n * @memberof app\n * @property {Window|HTMLElement} [resizeTo=window] - Element to automatically resize the renderer to.\n */\nexport interface ResizePluginOptions\n{\n    /**\n     * Element to automatically resize the renderer to.\n     * @memberof app.ApplicationOptions\n     */\n    resizeTo?: Window | HTMLElement;\n}\n\n/**\n * Middleware for Application's resize functionality.\n *\n * Adds the following methods to {@link app.Application}:\n * * {@link app.Application#resizeTo}\n * * {@link app.Application#resize}\n * * {@link app.Application#queueResize}\n * * {@link app.Application#cancelResize}\n * @example\n * import { extensions, ResizePlugin } from 'pixi.js';\n *\n * extensions.add(ResizePlugin);\n * @memberof app\n */\nexport class ResizePlugin\n{\n    /** @ignore */\n    public static extension: ExtensionMetadata = ExtensionType.Application;\n\n    public static resizeTo: Window | HTMLElement;\n    public static resize: () => void;\n    public static renderer: ResizeableRenderer;\n    public static queueResize: () => void;\n    public static render: () => void;\n    private static _resizeId: number;\n    private static _resizeTo: Window | HTMLElement;\n    private static _cancelResize: () => void;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    public static init(options: ResizePluginOptions): void\n    {\n        Object.defineProperty(this, 'resizeTo',\n            /**\n             * The HTML element or window to automatically resize the\n             * renderer's view element to match width and height.\n             * @member {Window|HTMLElement}\n             * @name resizeTo\n             * @memberof app.Application#\n             */\n            {\n                set(dom: Window | HTMLElement)\n                {\n                    globalThis.removeEventListener('resize', this.queueResize);\n                    this._resizeTo = dom;\n                    if (dom)\n                    {\n                        globalThis.addEventListener('resize', this.queueResize);\n                        this.resize();\n                    }\n                },\n                get()\n                {\n                    return this._resizeTo;\n                },\n            });\n\n        /**\n         * Resize is throttled, so it's safe to call this multiple times per frame and it'll\n         * only be called once.\n         * @memberof app.Application#\n         * @method queueResize\n         * @private\n         */\n        this.queueResize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            this._cancelResize();\n\n            // // Throttle resize events per raf\n            this._resizeId = requestAnimationFrame(() => this.resize());\n        };\n\n        /**\n         * Cancel the resize queue.\n         * @memberof app.Application#\n         * @method cancelResize\n         * @private\n         */\n        this._cancelResize = (): void =>\n        {\n            if (this._resizeId)\n            {\n                cancelAnimationFrame(this._resizeId);\n                this._resizeId = null;\n            }\n        };\n\n        /**\n         * Execute an immediate resize on the renderer, this is not\n         * throttled and can be expensive to call many times in a row.\n         * Will resize only if `resizeTo` property is set.\n         * @memberof app.Application#\n         * @method resize\n         */\n        this.resize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            // clear queue resize\n            this._cancelResize();\n\n            let width: number;\n            let height: number;\n\n            // Resize to the window\n            if (this._resizeTo === globalThis.window)\n            {\n                width = globalThis.innerWidth;\n                height = globalThis.innerHeight;\n            }\n            // Resize to other HTML entities\n            else\n            {\n                const { clientWidth, clientHeight } = this._resizeTo as HTMLElement;\n\n                width = clientWidth;\n                height = clientHeight;\n            }\n\n            this.renderer.resize(width, height);\n            this.render();\n        };\n\n        // On resize\n        this._resizeId = null;\n        this._resizeTo = null;\n        this.resizeTo = options.resizeTo || null;\n    }\n\n    /**\n     * Clean up the ticker, scoped to application\n     * @static\n     * @private\n     */\n    public static destroy(): void\n    {\n        globalThis.removeEventListener('resize', this.queueResize);\n        this._cancelResize();\n        this._cancelResize = null;\n        this.queueResize = null;\n        this.resizeTo = null;\n        this.resize = null;\n    }\n}\n","import { ExtensionType } from '../extensions/Extensions';\nimport { UPDATE_PRIORITY } from '../ticker/const';\nimport { Ticker } from '../ticker/Ticker';\n\nimport type { ExtensionMetadata } from '../extensions/Extensions';\n\n/**\n * Application options for the {@link app.TickerPlugin}.\n * @memberof app\n * @property {boolean} [autoStart=true] - Automatically starts the rendering after the construction.\n * **Note**: Setting this parameter to `false` does NOT stop the shared ticker even if you set\n * `options.sharedTicker` to `true` in case that it is already started. Stop it by your own.\n * @property {boolean} [sharedTicker=false] - Set`true` to use `Ticker.shared`, `false` to create new ticker.\n * If set to `false`, you cannot register a handler to occur before anything that runs on the shared ticker.\n * The system ticker will always run before both the shared ticker and the app ticker.\n */\nexport interface TickerPluginOptions\n{\n    /**\n     * Automatically starts the rendering after the construction.\n     *  **Note**: Setting this parameter to `false` does NOT stop the shared ticker even if you set\n     *  `options.sharedTicker` to `true` in case that it is already started. Stop it by your own.\n     * @memberof app.ApplicationOptions\n     * @default true\n     */\n    autoStart?: boolean;\n    /**\n     * Set`true` to use `Ticker.shared`, `false` to create new ticker.\n     *  If set to `false`, you cannot register a handler to occur before anything that runs on the shared ticker.\n     *  The system ticker will always run before both the shared ticker and the app ticker.\n     * @memberof app.ApplicationOptions\n     * @default false\n     */\n    sharedTicker?: boolean;\n}\n\n/**\n * Middleware for Application's {@link ticker.Ticker} functionality.\n *\n * Adds the following methods to {@link app.Application}:\n * * {@link app.Application#start}\n * * {@link app.Application#stop}\n * * {@link app.Application#ticker}\n * @example\n * import { extensions, TickerPlugin } from 'pixi.js';\n *\n * extensions.add(TickerPlugin);\n * @memberof app\n */\nexport class TickerPlugin\n{\n    /** @ignore */\n    public static extension: ExtensionMetadata = ExtensionType.Application;\n\n    public static start: () => void;\n    public static stop: () => void;\n    private static _ticker: Ticker;\n    public static ticker: Ticker;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    public static init(options?: PixiMixins.ApplicationOptions): void\n    {\n        // Set default\n        options = Object.assign({\n            autoStart: true,\n            sharedTicker: false,\n        }, options);\n\n        // Create ticker setter\n        Object.defineProperty(this, 'ticker',\n            {\n                set(ticker)\n                {\n                    if (this._ticker)\n                    {\n                        this._ticker.remove(this.render, this);\n                    }\n                    this._ticker = ticker;\n                    if (ticker)\n                    {\n                        ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n                    }\n                },\n                get()\n                {\n                    return this._ticker;\n                },\n            });\n\n        /**\n         * Convenience method for stopping the render.\n         * @method\n         * @memberof app.Application\n         * @instance\n         */\n        this.stop = (): void =>\n        {\n            this._ticker.stop();\n        };\n\n        /**\n         * Convenience method for starting the render.\n         * @method\n         * @memberof app.Application\n         * @instance\n         */\n        this.start = (): void =>\n        {\n            this._ticker.start();\n        };\n\n        /**\n         * Internal reference to the ticker.\n         * @type {Ticker}\n         * @name _ticker\n         * @memberof app.Application#\n         * @private\n         */\n        this._ticker = null;\n\n        /**\n         * Ticker for doing render updates.\n         * @type {ticker.Ticker}\n         * @name ticker\n         * @memberof app.Application#\n         * @default Ticker.shared\n         */\n        this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n\n        // Start the rendering\n        if (options.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Clean up the ticker, scoped to application.\n     * @static\n     * @private\n     */\n    public static destroy(): void\n    {\n        if (this._ticker)\n        {\n            const oldTicker = this._ticker;\n\n            this.ticker = null;\n            oldTicker.destroy();\n        }\n    }\n}\n","import { extensions } from '../extensions/Extensions';\nimport { ResizePlugin } from './ResizePlugin';\nimport { TickerPlugin } from './TickerPlugin';\n\nextensions.add(ResizePlugin);\nextensions.add(TickerPlugin);\n","import type { Matrix } from '../../maths/matrix/Matrix';\nimport type { Batch, Batcher } from '../../rendering/batcher/shared/Batcher';\nimport type { DefaultBatchableQuadElement } from '../../rendering/batcher/shared/DefaultBatcher';\nimport type { Topology } from '../../rendering/renderers/shared/geometry/const';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { BoundsData } from '../container/bounds/Bounds';\nimport type { Container } from '../container/Container';\n\n/**\n * A batchable sprite object.\n * @ignore\n */\nexport class BatchableSprite implements DefaultBatchableQuadElement\n{\n    public batcherName = 'default';\n    public topology: Topology = 'triangle-list';\n\n    // batch specific..\n    public readonly attributeSize = 4;\n    public readonly indexSize = 6;\n    public readonly packAsQuad = true;\n\n    public transform: Matrix;\n\n    public renderable: Container;\n    public texture: Texture;\n    public bounds: BoundsData;\n\n    public roundPixels: 0 | 1 = 0;\n\n    public _indexStart: number;\n    public _textureId: number;\n    public _attributeStart = 0; // location in the buffer\n    public _batcher: Batcher = null;\n    public _batch: Batch = null;\n\n    get blendMode() { return this.renderable.groupBlendMode; }\n    get color() { return this.renderable.groupColorAlpha; }\n\n    public reset()\n    {\n        this.renderable = null;\n        this.texture = null;\n        this._batcher = null;\n        this._batch = null;\n        this.bounds = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { State } from '../../../rendering/renderers/shared/state/State';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { color32BitToUniform } from '../gpu/colorToUniform';\nimport { BatchableGraphics } from './BatchableGraphics';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { BatchPipe, RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport type { RenderableGCSystem } from '../../../rendering/renderers/shared/texture/RenderableGCSystem';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Container } from '../../container/Container';\nimport type { Graphics } from './Graphics';\nimport type { GpuGraphicsContext, GraphicsContextSystem } from './GraphicsContextSystem';\n\nexport interface GraphicsAdaptor\n{\n    shader: Shader;\n    init(): void;\n    execute(graphicsPipe: GraphicsPipe, renderable: Graphics): void;\n    destroy(): void;\n}\nexport interface GraphicsSystem\n{\n    graphicsContext: GraphicsContextSystem;\n    renderableGC: RenderableGCSystem;\n    renderPipes: {\n        batch: BatchPipe\n    }\n    _roundPixels: 0 | 1;\n}\n\nexport class GraphicsPipe implements RenderPipe<Graphics>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'graphics',\n    } as const;\n\n    public renderer: GraphicsSystem;\n    public state: State = State.for2d();\n\n    // batchable graphics list, used to render batches\n    private _graphicsBatchesHash: Record<number, BatchableGraphics[]> = Object.create(null);\n    private _adaptor: GraphicsAdaptor;\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: GraphicsSystem, adaptor: GraphicsAdaptor)\n    {\n        this.renderer = renderer;\n\n        this._adaptor = adaptor;\n        this._adaptor.init();\n\n        this.renderer.renderableGC.addManagedHash(this, '_graphicsBatchesHash');\n    }\n\n    public validateRenderable(graphics: Graphics): boolean\n    {\n        // assume context is dirty..\n\n        const context = graphics.context;\n\n        const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(context);\n\n        if (gpuContext.isBatchable || wasBatched !== gpuContext.isBatchable)\n        {\n            // TODO what if they are the same size??\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(graphics: Graphics, instructionSet: InstructionSet)\n    {\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n\n        // need to get batches here.. as we need to know if we can batch or not..\n        // this also overrides the current batches..\n\n        if (graphics.didViewUpdate)\n        {\n            this._rebuild(graphics);\n        }\n\n        if (gpuContext.isBatchable)\n        {\n            this._addToBatcher(graphics, instructionSet);\n        }\n        else\n        {\n            this.renderer.renderPipes.batch.break(instructionSet);\n            instructionSet.add(graphics);\n        }\n    }\n\n    public updateRenderable(graphics: Graphics)\n    {\n        const batches = this._graphicsBatchesHash[graphics.uid];\n\n        if (batches)\n        {\n            for (let i = 0; i < batches.length; i++)\n            {\n                const batch = batches[i];\n\n                batch._batcher.updateElement(batch);\n            }\n        }\n    }\n\n    public destroyRenderable(graphics: Graphics)\n    {\n        if (this._graphicsBatchesHash[graphics.uid])\n        {\n            this._removeBatchForRenderable(graphics.uid);\n        }\n\n        graphics.off('destroyed', this._destroyRenderableBound);\n    }\n\n    public execute(graphics: Graphics)\n    {\n        if (!graphics.isRenderable) return;\n\n        const renderer = this.renderer;\n        const context = graphics.context;\n        const contextSystem = renderer.graphicsContext;\n\n        // early out if there is no actual visual stuff...\n        if (!contextSystem.getGpuContext(context).batches.length)\n        { return; }\n\n        const shader = context.customShader || this._adaptor.shader;\n\n        this.state.blendMode = graphics.groupBlendMode;\n\n        const localUniforms = shader.resources.localUniforms.uniforms;\n\n        localUniforms.uTransformMatrix = graphics.groupTransform;\n        localUniforms.uRound = renderer._roundPixels | graphics._roundPixels;\n\n        color32BitToUniform(\n            graphics.groupColorAlpha,\n            localUniforms.uColor,\n            0,\n        );\n\n        this._adaptor.execute(this, graphics);\n    }\n\n    private _rebuild(graphics: Graphics)\n    {\n        const wasBatched = !!this._graphicsBatchesHash[graphics.uid];\n\n        const gpuContext = this.renderer.graphicsContext.updateGpuContext(graphics.context);\n\n        // TODO POOL the old batches!\n\n        if (wasBatched)\n        {\n            this._removeBatchForRenderable(graphics.uid);\n        }\n\n        if (gpuContext.isBatchable)\n        {\n            this._initBatchesForRenderable(graphics);\n        }\n\n        graphics.batched = gpuContext.isBatchable;\n    }\n\n    private _addToBatcher(graphics: Graphics, instructionSet: InstructionSet)\n    {\n        const batchPipe = this.renderer.renderPipes.batch;\n\n        const batches = this._getBatchesForRenderable(graphics);\n\n        for (let i = 0; i < batches.length; i++)\n        {\n            const batch = batches[i];\n\n            batchPipe.addToBatch(batch, instructionSet);\n        }\n    }\n\n    private _getBatchesForRenderable(graphics: Graphics): BatchableGraphics[]\n    {\n        return this._graphicsBatchesHash[graphics.uid] || this._initBatchesForRenderable(graphics);\n    }\n\n    private _initBatchesForRenderable(graphics: Graphics): BatchableGraphics[]\n    {\n        const context = graphics.context;\n\n        const gpuContext: GpuGraphicsContext = this.renderer.graphicsContext.getGpuContext(context);\n\n        const roundPixels = (this.renderer._roundPixels | graphics._roundPixels) as 0 | 1;\n\n        const batches = gpuContext.batches.map((batch) =>\n        {\n            const batchClone = BigPool.get(BatchableGraphics);\n\n            batch.copyTo(batchClone);\n\n            batchClone.renderable = graphics;\n\n            batchClone.roundPixels = roundPixels;\n\n            return batchClone;\n        });\n\n        if (this._graphicsBatchesHash[graphics.uid] === undefined)\n        {\n            // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n            graphics.on('destroyed', this._destroyRenderableBound);\n        }\n\n        this._graphicsBatchesHash[graphics.uid] = batches;\n\n        return batches;\n    }\n\n    private _removeBatchForRenderable(graphicsUid: number)\n    {\n        this._graphicsBatchesHash[graphicsUid].forEach((batch) =>\n        {\n            BigPool.return(batch as PoolItem);\n        });\n\n        this._graphicsBatchesHash[graphicsUid] = null;\n    }\n\n    public destroy()\n    {\n        this.renderer = null;\n\n        this._adaptor.destroy();\n        this._adaptor = null;\n        this.state = null;\n\n        for (const i in this._graphicsBatchesHash)\n        {\n            this._removeBatchForRenderable(i as unknown as number);\n        }\n\n        this._graphicsBatchesHash = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { GraphicsContextSystem } from './shared/GraphicsContextSystem';\nimport { GraphicsPipe } from './shared/GraphicsPipe';\n\nextensions.add(GraphicsPipe);\nextensions.add(GraphicsContextSystem);\n","import { Color } from '../../../color/Color';\n\nimport type { ConvertedFillStyle, ConvertedStrokeStyle } from '../../graphics/shared/FillTypes';\nimport type { HTMLTextStyle } from '../../text-html/HTMLTextStyle';\nimport type { TextStyle } from '../TextStyle';\n\nconst valuesToIterateForKeys: Partial<keyof TextStyle | keyof HTMLTextStyle>[] = [\n    'align',\n    'breakWords',\n    'cssOverrides',\n    'fontVariant',\n    'fontWeight',\n    'leading',\n    'letterSpacing',\n    'lineHeight',\n    'padding',\n    'textBaseline',\n    'trim',\n    'whiteSpace',\n    'wordWrap',\n    'wordWrapWidth',\n    'fontFamily',\n    'fontStyle',\n    'fontSize',\n] as const;\n\n/**\n * Generates a unique key for the text style.\n * @param style - The style to generate a key for.\n * @returns the key for the style.\n */\nexport function generateTextStyleKey(style: TextStyle): string\n{\n    const key = [];\n\n    let index = 0;\n\n    for (let i = 0; i < valuesToIterateForKeys.length; i++)\n    {\n        const prop = `_${valuesToIterateForKeys[i]}`;\n\n        key[index++] = style[prop as keyof typeof style];\n    }\n\n    index = addFillStyleKey(style._fill, key as string[], index);\n    index = addStokeStyleKey(style._stroke, key as string[], index);\n    index = addDropShadowKey(style.dropShadow, key as string[], index);\n\n    return key.join('-');\n}\n\nfunction addFillStyleKey(fillStyle: ConvertedFillStyle, key: (number | string)[], index: number)\n{\n    if (!fillStyle) return index;\n\n    key[index++] = fillStyle.color;\n    key[index++] = fillStyle.alpha;\n    key[index++] = fillStyle.fill?.styleKey;\n\n    return index;\n}\n\nfunction addStokeStyleKey(strokeStyle: ConvertedStrokeStyle, key: (number | string)[], index: number)\n{\n    if (!strokeStyle) return index;\n\n    index = addFillStyleKey(strokeStyle, key, index);\n\n    key[index++] = strokeStyle.width;\n    key[index++] = strokeStyle.alignment;\n    key[index++] = strokeStyle.cap;\n    key[index++] = strokeStyle.join;\n    key[index++] = strokeStyle.miterLimit;\n\n    return index;\n}\n\nfunction addDropShadowKey(dropShadow: TextStyle['dropShadow'], key: (number | string)[], index: number)\n{\n    if (!dropShadow) return index;\n\n    key[index++] = dropShadow.alpha;\n    key[index++] = dropShadow.angle;\n    key[index++] = dropShadow.blur;\n    key[index++] = dropShadow.distance;\n    key[index++] = Color.shared.setValue(dropShadow.color).toNumber();\n\n    return index;\n}\n","import { updateQuadBounds } from '../../../utils/data/updateQuadBounds';\nimport { type BatchableSprite } from '../../sprite/BatchableSprite';\nimport { type AbstractText } from '../AbstractText';\n\n/**\n * Updates the bounds of the given batchable sprite based on the provided text object.\n *\n * This function adjusts the bounds of the batchable sprite to match the dimensions\n * and anchor point of the text's texture. Additionally, it compensates for any padding\n * specified in the text's style to ensure the text is rendered correctly on screen.\n * @param {BatchableSprite} batchableSprite - The sprite whose bounds need to be updated.\n * @param {AbstractText} text - The text object containing the texture and style information.\n */\nexport function updateTextBounds(batchableSprite: BatchableSprite, text: AbstractText)\n{\n    const { texture, bounds } = batchableSprite;\n\n    updateQuadBounds(bounds, text._anchor, texture);\n\n    const padding = text._style.padding;\n    // When HTML text textures are created, they include the padding around the text content\n    // to prevent text clipping and provide a buffer zone. This padding is built into\n    // the texture itself. However, we don't want this padding to affect the text's\n    // actual position on screen.\n    // To compensate, we shift the render position back by the padding amount,\n    // ensuring the text appears exactly where intended while maintaining the\n    // buffer zone around it.\n\n    bounds.minX -= padding;\n    bounds.minY -= padding;\n    bounds.maxX -= padding;\n    bounds.maxY -= padding;\n}\n","import { DOMAdapter } from '../../../environment/adapter';\nimport { fontStringFromTextStyle } from './utils/fontStringFromTextStyle';\n\nimport type { ICanvas, ICanvasRenderingContext2DSettings } from '../../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../environment/canvas/ICanvasRenderingContext2D';\nimport type { TextStyle, TextStyleWhiteSpace } from '../TextStyle';\n\n// The type for Intl.Segmenter is only available since TypeScript 4.7.2, so let's make a polyfill for it.\ninterface ISegmentData\n{\n    segment: string;\n}\ninterface ISegments\n{\n    [Symbol.iterator](): IterableIterator<ISegmentData>;\n}\ninterface ISegmenter\n{\n    segment(input: string): ISegments;\n}\ninterface IIntl\n{\n    Segmenter?: {\n        prototype: ISegmenter;\n        new(): ISegmenter;\n    };\n}\n\n/**\n * A number, or a string containing a number.\n * @memberof text\n * @typedef {object} FontMetrics\n * @property {number} ascent - Font ascent\n * @property {number} descent - Font descent\n * @property {number} fontSize - Font size\n */\nexport interface FontMetrics\n{\n    ascent: number;\n    descent: number;\n    fontSize: number;\n}\n\ntype CharacterWidthCache = Record<string, number>;\n\n// Default settings used for all getContext calls\nconst contextSettings: ICanvasRenderingContext2DSettings = {\n    // TextMetrics requires getImageData readback for measuring fonts.\n    willReadFrequently: true,\n};\n\n/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n * @example\n * import { CanvasTextMetrics, TextStyle } from 'pixi.js';\n *\n * const style = new TextStyle({\n *     fontFamily: 'Arial',\n *     fontSize: 24,\n *     fill: 0xff1010,\n *     align: 'center',\n * });\n * const textMetrics = CanvasTextMetrics.measureText('Your text', style);\n * @memberof text\n */\nexport class CanvasTextMetrics\n{\n    /** The text that was measured. */\n    public text: string;\n\n    /** The style that was measured. */\n    public style: TextStyle;\n\n    /** The measured width of the text. */\n    public width: number;\n\n    /** The measured height of the text. */\n    public height: number;\n\n    /** An array of lines of the text broken by new lines and wrapping is specified in style. */\n    public lines: string[];\n\n    /** An array of the line widths for each line matched to `lines`. */\n    public lineWidths: number[];\n\n    /** The measured line height for this style. */\n    public lineHeight: number;\n\n    /** The maximum line width for all measured lines. */\n    public maxLineWidth: number;\n\n    /** The font properties object from TextMetrics.measureFont. */\n    public fontProperties: FontMetrics;\n\n    /**\n     * String used for calculate font metrics.\n     * These characters are all tall to help calculate the height required for text.\n     */\n    public static METRICS_STRING = '|ÉqÅ';\n\n    /** Baseline symbol for calculate font metrics. */\n    public static BASELINE_SYMBOL = 'M';\n\n    /** Baseline multiplier for calculate font metrics. */\n    public static BASELINE_MULTIPLIER = 1.4;\n\n    /** Height multiplier for setting height of canvas to calculate font metrics. */\n    public static HEIGHT_MULTIPLIER = 2.0;\n\n    /**\n     * A Unicode \"character\", or \"grapheme cluster\", can be composed of multiple Unicode code points,\n     * such as letters with diacritical marks (e.g. `'\\u0065\\u0301'`, letter e with acute)\n     * or emojis with modifiers (e.g. `'\\uD83E\\uDDD1\\u200D\\uD83D\\uDCBB'`, technologist).\n     * The new `Intl.Segmenter` API in ES2022 can split the string into grapheme clusters correctly. If it is not available,\n     * PixiJS will fallback to use the iterator of String, which can only spilt the string into code points.\n     * If you want to get full functionality in environments that don't support `Intl.Segmenter` (such as Firefox),\n     * you can use other libraries such as [grapheme-splitter]{@link https://www.npmjs.com/package/grapheme-splitter}\n     * or [graphemer]{@link https://www.npmjs.com/package/graphemer} to create a polyfill. Since these libraries can be\n     * relatively large in size to handle various Unicode grapheme clusters properly, PixiJS won't use them directly.\n     */\n    public static graphemeSegmenter: (s: string) => string[] = (() =>\n    {\n        if (typeof (Intl as IIntl)?.Segmenter === 'function')\n        {\n            const segmenter = new (Intl as IIntl).Segmenter();\n\n            return (s: string) => [...segmenter.segment(s)].map((x) => x.segment);\n        }\n\n        return (s: string) => [...s];\n    })();\n\n    public static _experimentalLetterSpacingSupported?: boolean;\n\n    /**\n     * Checking that we can use modern canvas 2D API.\n     *\n     * Note: This is an unstable API, Chrome < 94 use `textLetterSpacing`, later versions use `letterSpacing`.\n     * @see TextMetrics.experimentalLetterSpacing\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/ICanvasRenderingContext2D/letterSpacing\n     * @see https://developer.chrome.com/origintrials/#/view_trial/3585991203293757441\n     */\n    public static get experimentalLetterSpacingSupported(): boolean\n    {\n        let result = CanvasTextMetrics._experimentalLetterSpacingSupported;\n\n        if (result !== undefined)\n        {\n            const proto = DOMAdapter.get().getCanvasRenderingContext2D().prototype;\n\n            result\n                = CanvasTextMetrics._experimentalLetterSpacingSupported\n                = 'letterSpacing' in proto || 'textLetterSpacing' in proto;\n        }\n\n        return result;\n    }\n\n    /**\n     * New rendering behavior for letter-spacing which uses Chrome's new native API. This will\n     * lead to more accurate letter-spacing results because it does not try to manually draw\n     * each character. However, this Chrome API is experimental and may not serve all cases yet.\n     * @see TextMetrics.experimentalLetterSpacingSupported\n     */\n    public static experimentalLetterSpacing = false;\n\n    /** Cache of {@see TextMetrics.FontMetrics} objects. */\n    private static _fonts: Record<string, FontMetrics> = {};\n\n    /** Cache of new line chars. */\n    private static readonly _newlines: number[] = [\n        0x000A, // line feed\n        0x000D, // carriage return\n    ];\n\n    /** Cache of breaking spaces. */\n    private static readonly _breakingSpaces: number[] = [\n        0x0009, // character tabulation\n        0x0020, // space\n        0x2000, // en quad\n        0x2001, // em quad\n        0x2002, // en space\n        0x2003, // em space\n        0x2004, // three-per-em space\n        0x2005, // four-per-em space\n        0x2006, // six-per-em space\n        0x2008, // punctuation space\n        0x2009, // thin space\n        0x200A, // hair space\n        0x205F, // medium mathematical space\n        0x3000, // ideographic space\n    ];\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    private static __canvas: ICanvas;\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    private static __context: ICanvasRenderingContext2D;\n\n    private static readonly _measurementCache: Record<string, CanvasTextMetrics> = {};\n\n    /**\n     * @param text - the text that was measured\n     * @param style - the style that was measured\n     * @param width - the measured width of the text\n     * @param height - the measured height of the text\n     * @param lines - an array of the lines of text broken by new lines and wrapping if specified in style\n     * @param lineWidths - an array of the line widths for each line matched to `lines`\n     * @param lineHeight - the measured line height for this style\n     * @param maxLineWidth - the maximum line width for all measured lines\n     * @param {FontMetrics} fontProperties - the font properties object from TextMetrics.measureFont\n     */\n    constructor(text: string, style: TextStyle, width: number, height: number, lines: string[], lineWidths: number[],\n        lineHeight: number, maxLineWidth: number, fontProperties: FontMetrics)\n    {\n        this.text = text;\n        this.style = style;\n        this.width = width;\n        this.height = height;\n        this.lines = lines;\n        this.lineWidths = lineWidths;\n        this.lineHeight = lineHeight;\n        this.maxLineWidth = maxLineWidth;\n        this.fontProperties = fontProperties;\n    }\n\n    /**\n     * Measures the supplied string of text and returns a Rectangle.\n     * @param text - The text to measure.\n     * @param style - The text style to use for measuring\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @param wordWrap\n     * @returns Measured width and height of the text.\n     */\n    public static measureText(\n        text = ' ',\n        style: TextStyle,\n        canvas: ICanvas = CanvasTextMetrics._canvas,\n        wordWrap: boolean = style.wordWrap,\n    ): CanvasTextMetrics\n    {\n        const textKey = `${text}:${style.styleKey}`;\n\n        // TODO - if we find this starts to go nuts with memory, we can remove the cache\n        // or instead just stick a usage tick that we increment each time we return it.\n        // if some are not used, we can just tidy them up!\n        if (CanvasTextMetrics._measurementCache[textKey]) return CanvasTextMetrics._measurementCache[textKey];\n\n        const font = fontStringFromTextStyle(style);\n        const fontProperties = CanvasTextMetrics.measureFont(font);\n\n        // fallback in case UA disallow canvas data extraction\n        if (fontProperties.fontSize === 0)\n        {\n            fontProperties.fontSize = style.fontSize as number;\n            fontProperties.ascent = style.fontSize as number;\n        }\n\n        const context = CanvasTextMetrics.__context; // canvas.getContext('2d', contextSettings);\n\n        context.font = font;\n\n        const outputText = wordWrap ? CanvasTextMetrics._wordWrap(text, style, canvas) : text;\n        const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n        const lineWidths = new Array<number>(lines.length);\n        let maxLineWidth = 0;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const lineWidth = CanvasTextMetrics._measureText(lines[i], style.letterSpacing, context);\n\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n\n        const strokeWidth = style._stroke?.width || 0;\n\n        let width = maxLineWidth + strokeWidth;\n\n        if (style.dropShadow)\n        {\n            width += style.dropShadow.distance;\n        }\n\n        const lineHeight = style.lineHeight || fontProperties.fontSize;\n\n        let height = Math.max(lineHeight, fontProperties.fontSize + (strokeWidth))\n            + ((lines.length - 1) * (lineHeight + style.leading));\n\n        if (style.dropShadow)\n        {\n            height += style.dropShadow.distance;\n        }\n\n        const measurements = new CanvasTextMetrics(\n            text,\n            style,\n            width,\n            height,\n            lines,\n            lineWidths,\n            lineHeight + style.leading,\n            maxLineWidth,\n            fontProperties\n        );\n\n        // CanvasTextMetrics._measurementCache[textKey] = measurements;\n\n        return measurements;\n    }\n\n    private static _measureText(\n        text: string,\n        letterSpacing: number,\n        context: ICanvasRenderingContext2D\n    )\n    {\n        let useExperimentalLetterSpacing = false;\n\n        if (CanvasTextMetrics.experimentalLetterSpacingSupported)\n        {\n            if (CanvasTextMetrics.experimentalLetterSpacing)\n            {\n                context.letterSpacing = `${letterSpacing}px`;\n                context.textLetterSpacing = `${letterSpacing}px`;\n                useExperimentalLetterSpacing = true;\n            }\n            else\n            {\n                context.letterSpacing = '0px';\n                context.textLetterSpacing = '0px';\n            }\n        }\n\n        const metrics = context.measureText(text);\n        let metricWidth = metrics.width;\n        const actualBoundingBoxLeft = -metrics.actualBoundingBoxLeft;\n        const actualBoundingBoxRight = metrics.actualBoundingBoxRight;\n        let boundsWidth = actualBoundingBoxRight - actualBoundingBoxLeft;\n\n        if (metricWidth > 0)\n        {\n            if (useExperimentalLetterSpacing)\n            {\n                metricWidth -= letterSpacing;\n                boundsWidth -= letterSpacing;\n            }\n            else\n            {\n                const val = (CanvasTextMetrics.graphemeSegmenter(text).length - 1) * letterSpacing;\n\n                metricWidth += val;\n                boundsWidth += val;\n            }\n        }\n\n        // NOTE: this is a bit of a hack as metrics.width and the bounding box width do not measure the same thing\n        // We can't seem to exclusively use one or the other, so are taking the largest of the two\n        return Math.max(metricWidth, boundsWidth);\n    }\n\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     * @param text - String to apply word wrapping to\n     * @param style - the style to use when wrapping\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @returns New string with new lines applied where required\n     */\n    private static _wordWrap(\n        text: string,\n        style: TextStyle,\n        canvas: ICanvas = CanvasTextMetrics._canvas\n    ): string\n    {\n        const context = canvas.getContext('2d', contextSettings);\n\n        let width = 0;\n        let line = '';\n        let lines = '';\n\n        const cache: CharacterWidthCache = Object.create(null);\n        const { letterSpacing, whiteSpace } = style;\n\n        // How to handle whitespaces\n        const collapseSpaces = CanvasTextMetrics._collapseSpaces(whiteSpace);\n        const collapseNewlines = CanvasTextMetrics._collapseNewlines(whiteSpace);\n\n        // whether or not spaces may be added to the beginning of lines\n        let canPrependSpaces = !collapseSpaces;\n\n        // There is letterSpacing after every char except the last one\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n        // so for convenience the above needs to be compared to width + 1 extra letterSpace\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n        // ________________________________________________\n        // And then the final space is simply no appended to each line\n        const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n\n        // break text into words, spaces and newline chars\n        const tokens = CanvasTextMetrics._tokenize(text);\n\n        for (let i = 0; i < tokens.length; i++)\n        {\n            // get the word, space or newlineChar\n            let token = tokens[i];\n\n            // if word is a new line\n            if (CanvasTextMetrics._isNewline(token))\n            {\n                // keep the new line\n                if (!collapseNewlines)\n                {\n                    lines += CanvasTextMetrics._addLine(line);\n                    canPrependSpaces = !collapseSpaces;\n                    line = '';\n                    width = 0;\n                    continue;\n                }\n\n                // if we should collapse new lines\n                // we simply convert it into a space\n                token = ' ';\n            }\n\n            // if we should collapse repeated whitespaces\n            if (collapseSpaces)\n            {\n                // check both this and the last tokens for spaces\n                const currIsBreakingSpace = CanvasTextMetrics.isBreakingSpace(token);\n                const lastIsBreakingSpace = CanvasTextMetrics.isBreakingSpace(line[line.length - 1]);\n\n                if (currIsBreakingSpace && lastIsBreakingSpace)\n                {\n                    continue;\n                }\n            }\n\n            // get word width from cache if possible\n            const tokenWidth = CanvasTextMetrics._getFromCache(token, letterSpacing, cache, context);\n\n            // word is longer than desired bounds\n            if (tokenWidth > wordWrapWidth)\n            {\n                // if we are not already at the beginning of a line\n                if (line !== '')\n                {\n                    // start newlines for overflow words\n                    lines += CanvasTextMetrics._addLine(line);\n                    line = '';\n                    width = 0;\n                }\n\n                // break large word over multiple lines\n                if (CanvasTextMetrics.canBreakWords(token, style.breakWords))\n                {\n                    // break word into characters\n                    const characters = CanvasTextMetrics.wordWrapSplit(token);\n\n                    // loop the characters\n                    for (let j = 0; j < characters.length; j++)\n                    {\n                        let char = characters[j];\n                        let lastChar = char;\n\n                        let k = 1;\n\n                        // we are not at the end of the token\n                        while (characters[j + k])\n                        {\n                            const nextChar = characters[j + k];\n\n                            // should not split chars\n                            if (!CanvasTextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords))\n                            {\n                                // combine chars & move forward one\n                                char += nextChar;\n                            }\n                            else\n                            {\n                                break;\n                            }\n\n                            lastChar = nextChar;\n                            k++;\n                        }\n\n                        j += k - 1;\n\n                        const characterWidth = CanvasTextMetrics._getFromCache(char, letterSpacing, cache, context);\n\n                        if (characterWidth + width > wordWrapWidth)\n                        {\n                            lines += CanvasTextMetrics._addLine(line);\n                            canPrependSpaces = false;\n                            line = '';\n                            width = 0;\n                        }\n\n                        line += char;\n                        width += characterWidth;\n                    }\n                }\n\n                // run word out of the bounds\n                else\n                {\n                    // if there are words in this line already\n                    // finish that line and start a new one\n                    if (line.length > 0)\n                    {\n                        lines += CanvasTextMetrics._addLine(line);\n                        line = '';\n                        width = 0;\n                    }\n\n                    const isLastToken = i === tokens.length - 1;\n\n                    // give it its own line if it's not the end\n                    lines += CanvasTextMetrics._addLine(token, !isLastToken);\n                    canPrependSpaces = false;\n                    line = '';\n                    width = 0;\n                }\n            }\n\n            // word could fit\n            else\n            {\n                // word won't fit because of existing words\n                // start a new line\n                if (tokenWidth + width > wordWrapWidth)\n                {\n                    // if its a space we don't want it\n                    canPrependSpaces = false;\n\n                    // add a new line\n                    lines += CanvasTextMetrics._addLine(line);\n\n                    // start a new line\n                    line = '';\n                    width = 0;\n                }\n\n                // don't add spaces to the beginning of lines\n                if (line.length > 0 || !CanvasTextMetrics.isBreakingSpace(token) || canPrependSpaces)\n                {\n                    // add the word to the current line\n                    line += token;\n\n                    // update width counter\n                    width += tokenWidth;\n                }\n            }\n        }\n\n        lines += CanvasTextMetrics._addLine(line, false);\n\n        return lines;\n    }\n\n    /**\n     * Convenience function for logging each line added during the wordWrap method.\n     * @param line    - The line of text to add\n     * @param newLine - Add new line character to end\n     * @returns A formatted line\n     */\n    private static _addLine(line: string, newLine = true): string\n    {\n        line = CanvasTextMetrics._trimRight(line);\n\n        line = (newLine) ? `${line}\\n` : line;\n\n        return line;\n    }\n\n    /**\n     * Gets & sets the widths of calculated characters in a cache object\n     * @param key            - The key\n     * @param letterSpacing  - The letter spacing\n     * @param cache          - The cache\n     * @param context        - The canvas context\n     * @returns The from cache.\n     */\n    private static _getFromCache(key: string, letterSpacing: number, cache: CharacterWidthCache,\n        context: ICanvasRenderingContext2D): number\n    {\n        let width = cache[key];\n\n        if (typeof width !== 'number')\n        {\n            width = CanvasTextMetrics._measureText(key, letterSpacing, context) + letterSpacing;\n            cache[key] = width;\n        }\n\n        return width;\n    }\n\n    /**\n     * Determines whether we should collapse breaking spaces.\n     * @param whiteSpace - The TextStyle property whiteSpace\n     * @returns Should collapse\n     */\n    private static _collapseSpaces(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal' || whiteSpace === 'pre-line');\n    }\n\n    /**\n     * Determines whether we should collapse newLine chars.\n     * @param whiteSpace - The white space\n     * @returns should collapse\n     */\n    private static _collapseNewlines(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal');\n    }\n\n    /**\n     * Trims breaking whitespaces from string.\n     * @param text - The text\n     * @returns Trimmed string\n     */\n    private static _trimRight(text: string): string\n    {\n        if (typeof text !== 'string')\n        {\n            return '';\n        }\n\n        for (let i = text.length - 1; i >= 0; i--)\n        {\n            const char = text[i];\n\n            if (!CanvasTextMetrics.isBreakingSpace(char))\n            {\n                break;\n            }\n\n            text = text.slice(0, -1);\n        }\n\n        return text;\n    }\n\n    /**\n     * Determines if char is a newline.\n     * @param char - The character\n     * @returns True if newline, False otherwise.\n     */\n    private static _isNewline(char: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return CanvasTextMetrics._newlines.includes(char.charCodeAt(0));\n    }\n\n    /**\n     * Determines if char is a breaking whitespace.\n     *\n     * It allows one to determine whether char should be a breaking whitespace\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param char - The character\n     * @param [_nextChar] - The next character\n     * @returns True if whitespace, False otherwise.\n     */\n    public static isBreakingSpace(char: string, _nextChar?: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return CanvasTextMetrics._breakingSpaces.includes(char.charCodeAt(0));\n    }\n\n    /**\n     * Splits a string into words, breaking-spaces and newLine characters\n     * @param text - The text\n     * @returns A tokenized array\n     */\n    private static _tokenize(text: string): string[]\n    {\n        const tokens: string[] = [];\n        let token = '';\n\n        if (typeof text !== 'string')\n        {\n            return tokens;\n        }\n\n        for (let i = 0; i < text.length; i++)\n        {\n            const char = text[i];\n            const nextChar = text[i + 1];\n\n            if (CanvasTextMetrics.isBreakingSpace(char, nextChar) || CanvasTextMetrics._isNewline(char))\n            {\n                if (token !== '')\n                {\n                    tokens.push(token);\n                    token = '';\n                }\n\n                tokens.push(char);\n\n                continue;\n            }\n\n            token += char;\n        }\n\n        if (token !== '')\n        {\n            tokens.push(token);\n        }\n\n        return tokens;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to customise which words should break\n     * Examples are if the token is CJK or numbers.\n     * It must return a boolean.\n     * @param _token - The token\n     * @param breakWords - The style attr break words\n     * @returns Whether to break word or not\n     */\n    public static canBreakWords(_token: string, breakWords: boolean): boolean\n    {\n        return breakWords;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to determine whether a pair of characters\n     * should be broken by newlines\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     * @param _char - The character\n     * @param _nextChar - The next character\n     * @param _token - The token/word the characters are from\n     * @param _index - The index in the token of the char\n     * @param _breakWords - The style attr break words\n     * @returns whether to break word or not\n     */\n    public static canBreakChars(_char: string, _nextChar: string, _token: string, _index: number,\n        _breakWords: boolean): boolean\n    {\n        return true;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It is called when a token (usually a word) has to be split into separate pieces\n     * in order to determine the point to break a word.\n     * It must return an array of characters.\n     * @param token - The token to split\n     * @returns The characters of the token\n     * @see CanvasTextMetrics.graphemeSegmenter\n     */\n    public static wordWrapSplit(token: string): string[]\n    {\n        return CanvasTextMetrics.graphemeSegmenter(token);\n    }\n\n    /**\n     * Calculates the ascent, descent and fontSize of a given font-style\n     * @param font - String representing the style of the font\n     * @returns Font properties object\n     */\n    public static measureFont(font: string): FontMetrics\n    {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (CanvasTextMetrics._fonts[font])\n        {\n            return CanvasTextMetrics._fonts[font];\n        }\n\n        const context = CanvasTextMetrics._context;\n\n        context.font = font;\n        const metrics = context.measureText(CanvasTextMetrics.METRICS_STRING + CanvasTextMetrics.BASELINE_SYMBOL);\n\n        const properties = {\n            ascent: metrics.actualBoundingBoxAscent,\n            descent: metrics.actualBoundingBoxDescent,\n            fontSize: metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent\n        };\n\n        CanvasTextMetrics._fonts[font] = properties;\n\n        return properties;\n    }\n\n    /**\n     * Clear font metrics in metrics cache.\n     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n     */\n    public static clearMetrics(font = ''): void\n    {\n        if (font)\n        {\n            delete CanvasTextMetrics._fonts[font];\n        }\n        else\n        {\n            CanvasTextMetrics._fonts = {};\n        }\n    }\n\n    /**\n     * Cached canvas element for measuring text\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _canvas(): ICanvas\n    {\n        if (!CanvasTextMetrics.__canvas)\n        {\n            let canvas: ICanvas;\n\n            try\n            {\n                // OffscreenCanvas2D measureText can be up to 40% faster.\n                const c = new OffscreenCanvas(0, 0);\n                const context = c.getContext('2d', contextSettings);\n\n                if (context?.measureText)\n                {\n                    CanvasTextMetrics.__canvas = c as ICanvas;\n\n                    return c as ICanvas;\n                }\n\n                canvas = DOMAdapter.get().createCanvas();\n            }\n            catch (_cx)\n            {\n                canvas = DOMAdapter.get().createCanvas();\n            }\n            canvas.width = canvas.height = 10;\n            CanvasTextMetrics.__canvas = canvas;\n        }\n\n        return CanvasTextMetrics.__canvas;\n    }\n\n    /**\n     * TODO: this should be private, but isn't because of backward compat, will fix later.\n     * @ignore\n     */\n    public static get _context(): ICanvasRenderingContext2D\n    {\n        if (!CanvasTextMetrics.__context)\n        {\n            CanvasTextMetrics.__context = CanvasTextMetrics._canvas.getContext('2d', contextSettings);\n        }\n\n        return CanvasTextMetrics.__context;\n    }\n}\n","import type { Matrix } from '../../../maths/matrix/Matrix';\nimport type { Batch, Batcher } from '../../../rendering/batcher/shared/Batcher';\nimport type { DefaultBatchableMeshElement } from '../../../rendering/batcher/shared/DefaultBatcher';\nimport type { Topology } from '../../../rendering/renderers/shared/geometry/const';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport type { ViewContainer } from '../../view/ViewContainer';\nimport type { MeshGeometry } from './MeshGeometry';\n\n/**\n * A batchable mesh object.\n * @ignore\n */\nexport class BatchableMesh implements DefaultBatchableMeshElement\n{\n    public batcherName = 'default';\n\n    public _topology: Topology;\n\n    public readonly packAsQuad = false;\n    public location: number;\n\n    public renderable: ViewContainer;\n\n    public indexOffset = 0;\n    public attributeOffset = 0;\n\n    public texture: Texture;\n    public geometry: MeshGeometry;\n    public transform: Matrix;\n    public roundPixels: 0 | 1 = 0;\n\n    public _attributeStart: number;\n    public _batcher: Batcher = null;\n    public _batch: Batch = null;\n    public _indexStart: number;\n    public _textureId: number;\n    public _textureMatrixUpdateId: number = -1;\n\n    private _transformedUvs: Float32Array;\n    private _uvUpdateId: number = -1;\n\n    get blendMode() { return this.renderable.groupBlendMode; }\n\n    get topology() { return this._topology || this.geometry.topology; }\n    set topology(value: Topology) { this._topology = value; }\n\n    public reset()\n    {\n        this.renderable = null;\n        this.texture = null;\n        this._batcher = null;\n        this._batch = null;\n        this.geometry = null;\n        this._uvUpdateId = -1;\n        this._textureMatrixUpdateId = -1;\n    }\n\n    /**\n     * Sets the texture for the batchable mesh.\n     * As it does so, it resets the texture matrix update ID.\n     * this is to ensure that the texture matrix is recalculated when the uvs are referenced\n     * @param value - The texture to set.\n     */\n    public setTexture(value: Texture)\n    {\n        if (this.texture === value) return;\n\n        this.texture = value;\n        this._textureMatrixUpdateId = -1;\n    }\n\n    get uvs()\n    {\n        const geometry = this.geometry;\n\n        const uvBuffer = geometry.getBuffer('aUV');\n\n        const uvs = uvBuffer.data;\n\n        let transformedUvs = uvs;\n        const textureMatrix = this.texture.textureMatrix;\n\n        if (!textureMatrix.isSimple)\n        {\n            transformedUvs = this._transformedUvs;\n\n            if (this._textureMatrixUpdateId !== textureMatrix._updateID || this._uvUpdateId !== uvBuffer._updateID)\n            {\n                if (!transformedUvs || transformedUvs.length < uvs.length)\n                {\n                    transformedUvs = this._transformedUvs = new Float32Array(uvs.length);\n                }\n\n                this._textureMatrixUpdateId = textureMatrix._updateID;\n                this._uvUpdateId = uvBuffer._updateID;\n\n                textureMatrix.multiplyUvs(uvs as Float32Array, transformedUvs);\n            }\n        }\n\n        return transformedUvs as Float32Array;\n    }\n\n    get positions()\n    {\n        return this.geometry.positions;\n    }\n\n    get indices()\n    {\n        return this.geometry.indices;\n    }\n\n    get color()\n    {\n        return this.renderable.groupColorAlpha;\n    }\n\n    get groupTransform()\n    {\n        return this.renderable.groupTransform;\n    }\n\n    get attributeSize()\n    {\n        return this.geometry.positions.length / 2;\n    }\n\n    get indexSize()\n    {\n        return this.geometry.indices.length;\n    }\n}\n","// TODO eventually we should not use this bit, but instead use the localUniformBit\n// have the MSDF bit be merged in with the localUniformBit\n\nexport const localUniformMSDFBit = {\n    name: 'local-uniform-msdf-bit',\n    vertex: {\n        header: /* wgsl */`\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32,\n                uRound:f32,\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `,\n        main: /* wgsl */`\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `,\n        end: /* wgsl */`\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    },\n    fragment: {\n        header: /* wgsl */`\n            struct LocalUniforms {\n                uColor:vec4<f32>,\n                uTransformMatrix:mat3x3<f32>,\n                uDistance: f32\n            }\n\n            @group(2) @binding(0) var<uniform> localUniforms : LocalUniforms;\n         `,\n        main: /* wgsl */` \n            outColor = vec4<f32>(calculateMSDFAlpha(outColor, localUniforms.uColor, localUniforms.uDistance));\n        `\n\n    }\n};\n\nexport const localUniformMSDFBitGl = {\n    name: 'local-uniform-msdf-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `,\n        main: /* glsl */`\n            vColor *= uColor;\n            modelMatrix *= uTransformMatrix;\n        `,\n        end: /* glsl */`\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    },\n    fragment: {\n        header: /* glsl */`\n            uniform float uDistance;\n         `,\n        main: /* glsl */` \n            outColor = vec4(calculateMSDFAlpha(outColor, vColor, uDistance));\n        `\n\n    }\n};\n","export const mSDFBit = {\n    name: 'msdf-bit',\n    fragment: {\n        header: /* wgsl */`\n            fn calculateMSDFAlpha(msdfColor:vec4<f32>, shapeColor:vec4<f32>, distance:f32) -> f32 {\n                \n                // MSDF\n                var median = msdfColor.r + msdfColor.g + msdfColor.b -\n                    min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                    max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n            \n                // SDF\n                median = min(median, msdfColor.a);\n\n                var screenPxDistance = distance * (median - 0.5);\n                var alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                var luma: f32 = dot(shapeColor.rgb, vec3<f32>(0.299, 0.587, 0.114));\n                var gamma: f32 = mix(1.0, 1.0 / 2.2, luma);\n                var coverage: f32 = pow(shapeColor.a * alpha, gamma);\n\n                return coverage;\n             \n            }\n        `,\n    }\n\n};\n\nexport const mSDFBitGl = {\n    name: 'msdf-bit',\n    fragment: {\n        header: /* glsl */`\n            float calculateMSDFAlpha(vec4 msdfColor, vec4 shapeColor, float distance) {\n                \n                // MSDF\n                float median = msdfColor.r + msdfColor.g + msdfColor.b -\n                                min(msdfColor.r, min(msdfColor.g, msdfColor.b)) -\n                                max(msdfColor.r, max(msdfColor.g, msdfColor.b));\n               \n                // SDF\n                median = min(median, msdfColor.a);\n            \n                float screenPxDistance = distance * (median - 0.5);\n                float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n           \n                if (median < 0.01) {\n                    alpha = 0.0;\n                } else if (median > 0.99) {\n                    alpha = 1.0;\n                }\n\n                // Gamma correction for coverage-like alpha\n                float luma = dot(shapeColor.rgb, vec3(0.299, 0.587, 0.114));\n                float gamma = mix(1.0, 1.0 / 2.2, luma);\n                float coverage = pow(shapeColor.a * alpha, gamma);  \n              \n                return coverage;\n            }\n        `,\n    }\n\n};\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport { getMaxTexturesPerBatch } from '../../../rendering/batcher/gl/utils/maxRecommendedTextures';\nimport {\n    compileHighShaderGlProgram,\n    compileHighShaderGpuProgram\n} from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { colorBit, colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit';\nimport {\n    generateTextureBatchBit,\n    generateTextureBatchBitGl\n} from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit';\nimport { roundPixelsBit, roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { localUniformMSDFBit, localUniformMSDFBitGl } from './shader-bits/localUniformMSDFBit';\nimport { mSDFBit, mSDFBitGl } from './shader-bits/mSDFBit';\n\nimport type { GlProgram } from '../../../rendering/renderers/gl/shader/GlProgram';\nimport type { GpuProgram } from '../../../rendering/renderers/gpu/shader/GpuProgram';\n\nlet gpuProgram: GpuProgram;\nlet glProgram: GlProgram;\n\nexport class SdfShader extends Shader\n{\n    constructor()\n    {\n        const uniforms = new UniformGroup({\n            uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n            uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uDistance: { value: 4, type: 'f32' },\n            uRound: { value: 0, type: 'f32' },\n        });\n\n        const maxTextures = getMaxTexturesPerBatch();\n\n        gpuProgram ??= compileHighShaderGpuProgram({\n            name: 'sdf-shader',\n            bits: [\n                colorBit,\n                generateTextureBatchBit(maxTextures),\n                localUniformMSDFBit,\n                mSDFBit,\n                roundPixelsBit\n            ]\n        });\n\n        glProgram ??= compileHighShaderGlProgram({\n            name: 'sdf-shader',\n            bits: [\n                colorBitGl,\n                generateTextureBatchBitGl(maxTextures),\n                localUniformMSDFBitGl,\n                mSDFBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                localUniforms: uniforms,\n                batchSamplers: getBatchSamplersUniformGroup(maxTextures),\n            }\n        });\n    }\n}\n","import EventEmitter from 'eventemitter3';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\n\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { FontMetrics } from '../text/canvas/CanvasTextMetrics';\n\n/** @memberof text */\nexport interface CharData\n{\n    /** Unique id of character */\n    id: number;\n    /** x-offset to apply when rendering character */\n    xOffset: number;\n    /** y-offset to apply when rendering character. */\n    yOffset: number;\n    /** Advancement to apply to next character. */\n    xAdvance: number;\n    /** The kerning values for this character. */\n    kerning: Record<string, number>;\n    /** The texture of the character. */\n    texture?: Texture;\n}\n\n/**\n * The raw data of a character in a bitmap font.\n * @memberof text\n */\nexport interface RawCharData extends Omit<CharData, 'texture'>\n{\n    /** The page of the font texture that the character is on. */\n    page: number;\n    /** The x position of the character in the page. */\n    x: number;\n    /** The y position of the character in the page. */\n    y: number;\n    /** The width of the character in the page. */\n    width: number;\n    /** The height of the character in the page. */\n    height: number;\n    /** The letter of the character. */\n    letter: string;\n}\n\n/**\n * The raw data of a bitmap font.\n * @memberof text\n */\nexport interface BitmapFontData\n{\n    /** The offset of the font face from the baseline. */\n    baseLineOffset: number;\n    /** The map of characters by character code. */\n    chars: Record<string, RawCharData>;\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    pages: {\n        /** Unique id for bitmap texture */\n        id: number;\n        /** File name */\n        file: string\n    }[];\n    /** The line-height of the font face in pixels. */\n    lineHeight: number;\n    /** The size of the font face in pixels. */\n    fontSize: number;\n    /** The name of the font face. */\n    fontFamily: string;\n    /** The range and type of the distance field for this font. */\n    distanceField?: {\n        /** Type of distance field */\n        type: 'sdf' | 'msdf' | 'none';\n        /** Range of the distance field in pixels */\n        range: number;\n    };\n}\n\ninterface BitmapFontEvents<Type>\n{\n    destroy: [Type];\n}\n\n/**\n * An abstract representation of a bitmap font.\n * @memberof text\n */\nexport abstract class AbstractBitmapFont<FontType>\n    extends EventEmitter<BitmapFontEvents<FontType>>\n    implements Omit<BitmapFontData, 'chars' | 'pages' | 'fontSize'>\n{\n    /** The map of characters by character code. */\n    public readonly chars: Record<string, CharData> = Object.create(null);\n\n    /**\n     * The line-height of the font face in pixels.\n     * @type {number}\n     */\n    public readonly lineHeight: BitmapFontData['lineHeight'] = 0;\n\n    /**\n     * The name of the font face\n     * @type {string}\n     */\n    public readonly fontFamily: BitmapFontData['fontFamily'] = '';\n    /** The metrics of the font face. */\n    public readonly fontMetrics: FontMetrics = { fontSize: 0, ascent: 0, descent: 0 };\n    /**\n     * The offset of the font face from the baseline.\n     * @type {number}\n     */\n    public readonly baseLineOffset: BitmapFontData['baseLineOffset'] = 0;\n    /** The range and type of the distance field for this font. */\n    public readonly distanceField: BitmapFontData['distanceField'] = { type: 'none', range: 0 };\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    public readonly pages: { texture: Texture }[] = [];\n    /** should the fill for this font be applied as a tint to the text. */\n    public applyFillAsTint = true;\n\n    /** The size of the font face in pixels. */\n    public readonly baseMeasurementFontSize: number = 100;\n    protected baseRenderedFontSize = 100;\n\n    /**\n     * The name of the font face.\n     * @deprecated since 8.0.0 Use `fontFamily` instead.\n     */\n    public get font(): BitmapFontData['fontFamily']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.font is deprecated, please use BitmapFont.fontFamily instead.');\n        // #endif\n\n        return this.fontFamily;\n    }\n\n    /**\n     * The map of base page textures (i.e., sheets of glyphs).\n     * @deprecated since 8.0.0 Use `pages` instead.\n     */\n    public get pageTextures(): AbstractBitmapFont<FontType>['pages']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.');\n        // #endif\n\n        return this.pages;\n    }\n\n    /**\n     * The size of the font face in pixels.\n     * @deprecated since 8.0.0 Use `fontMetrics.fontSize` instead.\n     */\n    public get size(): BitmapFontData['fontSize']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.size is deprecated, please use BitmapFont.fontMetrics.fontSize instead.');\n        // #endif\n\n        return this.fontMetrics.fontSize;\n    }\n\n    /**\n     * The kind of distance field for this font or \"none\".\n     * @deprecated since 8.0.0 Use `distanceField.type` instead.\n     */\n    public get distanceFieldRange(): NonNullable<BitmapFontData['distanceField']>['range']\n    {\n        // #if _DEBUG\n        // eslint-disable-next-line max-len\n        deprecation(v8_0_0, 'BitmapFont.distanceFieldRange is deprecated, please use BitmapFont.distanceField.range instead.');\n        // #endif\n\n        return this.distanceField.range;\n    }\n\n    /**\n     * The range of the distance field in pixels.\n     * @deprecated since 8.0.0 Use `distanceField.range` instead.\n     */\n    public get distanceFieldType(): NonNullable<BitmapFontData['distanceField']>['type']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.distanceFieldType is deprecated, please use BitmapFont.distanceField.type instead.');\n        // #endif\n\n        return this.distanceField.type;\n    }\n\n    public destroy(destroyTextures = false): void\n    {\n        this.emit('destroy', this as unknown as FontType);\n\n        this.removeAllListeners();\n\n        for (const i in this.chars)\n        {\n            // texture may not exist if the char is \" \", \\n, \\r, or \\t.\n            this.chars[i].texture?.destroy();\n        }\n\n        (this.chars as null) = null;\n\n        if (destroyTextures)\n        {\n            this.pages.forEach((page) => page.texture.destroy(true));\n            (this.pages as any) = null;\n        }\n    }\n}\n","/**\n * Processes the passed character set data and returns a flattened array of all the characters.\n *\n * Ignored because not directly exposed.\n * @ignore\n * @param {string | string[] | string[][] } chars\n * @returns {string[]} the flattened array of characters\n */\n\nexport function resolveCharacters(chars: string | (string | string[])[]): string[]\n{\n    // Skip unexpected 'empty set' check at end\n    if (chars === '')\n    {\n        return [];\n    }\n\n    // Split the chars string into individual characters\n    if (typeof chars === 'string')\n    {\n        chars = [chars];\n    }\n\n    // Handle an array of characters+ranges\n    const result: string[] = [];\n\n    for (let i = 0, j = chars.length; i < j; i++)\n    {\n        const item = chars[i];\n\n        // Handle range delimited by start/end chars\n        if (Array.isArray(item))\n        {\n            if (item.length !== 2)\n            {\n                throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n            }\n            if (item[0].length === 0 || item[1].length === 0)\n            {\n                throw new Error('[BitmapFont]: Invalid character delimiter.');\n            }\n\n            const startCode = item[0].charCodeAt(0);\n            const endCode = item[1].charCodeAt(0);\n\n            if (endCode < startCode)\n            {\n                throw new Error('[BitmapFont]: Invalid character range.');\n            }\n\n            for (let i = startCode, j = endCode; i <= j; i++)\n            {\n                result.push(String.fromCharCode(i));\n            }\n        }\n        else\n        {\n            result.push(...Array.from(item));\n        }\n    }\n\n    if (result.length === 0)\n    {\n        throw new Error('[BitmapFont]: Empty set when resolving characters.');\n    }\n\n    return result;\n}\n","import { Color } from '../../color/Color';\nimport { Rectangle } from '../../maths/shapes/Rectangle';\nimport { CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool';\nimport { ImageSource } from '../../rendering/renderers/shared/texture/sources/ImageSource';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { CanvasTextMetrics } from '../text/canvas/CanvasTextMetrics';\nimport { fontStringFromTextStyle } from '../text/canvas/utils/fontStringFromTextStyle';\nimport { getCanvasFillStyle } from '../text/canvas/utils/getCanvasFillStyle';\nimport { TextStyle } from '../text/TextStyle';\nimport { AbstractBitmapFont } from './AbstractBitmapFont';\nimport { resolveCharacters } from './utils/resolveCharacters';\n\nimport type { ICanvasRenderingContext2D } from '../../environment/canvas/ICanvasRenderingContext2D';\nimport type { CanvasAndContext } from '../../rendering/renderers/shared/texture/CanvasPool';\nimport type { FontMetrics } from '../text/canvas/CanvasTextMetrics';\n\nexport interface DynamicBitmapFontOptions\n{\n    style: TextStyle\n    skipKerning?: boolean\n    resolution?: number\n    padding?: number\n    overrideFill?: boolean\n    overrideSize?: boolean\n    textureSize?: number\n    mipmap?: boolean\n}\n\n/**\n * A BitmapFont that generates its glyphs dynamically.\n * @memberof text\n * @ignore\n */\nexport class DynamicBitmapFont extends AbstractBitmapFont<DynamicBitmapFont>\n{\n    public static defaultOptions: DynamicBitmapFontOptions = {\n        textureSize: 512,\n        style: new TextStyle(),\n        mipmap: true,\n    };\n    /**\n     * this is a resolution modifier for the font size..\n     * texture resolution will also be used to scale texture according to its font size also\n     */\n    public resolution = 1;\n    /** The pages of the font. */\n    public override readonly pages: {canvasAndContext?: CanvasAndContext, texture: Texture}[] = [];\n\n    private readonly _padding: number = 0;\n    private readonly _measureCache: Record<string, number> = Object.create(null);\n    private _currentChars: string[] = [];\n    private _currentX = 0;\n    private _currentY = 0;\n    private _currentPageIndex = -1;\n    private readonly _style: TextStyle;\n    private readonly _skipKerning: boolean = false;\n    private readonly _textureSize: number;\n    private readonly _mipmap: boolean;\n\n    /**\n     * @param options - The options for the dynamic bitmap font.\n     */\n    constructor(options: DynamicBitmapFontOptions)\n    {\n        super();\n\n        const dynamicOptions = { ...DynamicBitmapFont.defaultOptions, ...options };\n\n        this._textureSize = dynamicOptions.textureSize;\n        this._mipmap = dynamicOptions.mipmap;\n\n        const style = dynamicOptions.style.clone();\n\n        if (dynamicOptions.overrideFill)\n        {\n            // assuming no shape fill..\n            style._fill.color = 0xffffff;\n            style._fill.alpha = 1;\n            style._fill.texture = Texture.WHITE;\n            style._fill.fill = null;\n        }\n\n        this.applyFillAsTint = dynamicOptions.overrideFill;\n\n        const requestedFontSize = style.fontSize;\n\n        // adjust font size to match the base measurement size\n        style.fontSize = this.baseMeasurementFontSize;\n\n        const font = fontStringFromTextStyle(style);\n\n        if (dynamicOptions.overrideSize)\n        {\n            if (style._stroke)\n            {\n                // we want the stroke to fit the size of the requested text, so we need to scale it\n                // accordingly (eg font size 20, with stroke 10 - stroke is 50% of size,\n                // as dynamic font is size 100, the stroke should be adjusted to 50 to make it look right)\n                style._stroke.width *= this.baseRenderedFontSize / requestedFontSize;\n            }\n        }\n        else\n        {\n            style.fontSize = this.baseRenderedFontSize = requestedFontSize;\n        }\n\n        this._style = style;\n        this._skipKerning = dynamicOptions.skipKerning ?? false;\n        this.resolution = dynamicOptions.resolution ?? 1;\n        this._padding = dynamicOptions.padding ?? 4;\n\n        (this.fontMetrics as FontMetrics) = CanvasTextMetrics.measureFont(font);\n        (this.lineHeight as number) = style.lineHeight || this.fontMetrics.fontSize || style.fontSize;\n    }\n\n    public ensureCharacters(chars: string): void\n    {\n        const charList = resolveCharacters(chars)\n            .filter((char) => !this._currentChars.includes(char))\n            .filter((char, index, self) => self.indexOf(char) === index);\n        // filter returns..\n\n        if (!charList.length) return;\n\n        this._currentChars = [...this._currentChars, ...charList];\n\n        let pageData;\n\n        if (this._currentPageIndex === -1)\n        {\n            pageData = this._nextPage();\n        }\n        else\n        {\n            pageData = this.pages[this._currentPageIndex];\n        }\n\n        let { canvas, context } = pageData.canvasAndContext;\n        let textureSource = pageData.texture.source;\n\n        const style = this._style;\n\n        let currentX = this._currentX;\n        let currentY = this._currentY;\n\n        const fontScale = this.baseRenderedFontSize / this.baseMeasurementFontSize;\n        const padding = this._padding * fontScale;\n\n        let maxCharHeight = 0;\n        let skipTexture = false;\n\n        const maxTextureWidth = canvas.width / this.resolution;\n        const maxTextureHeight = canvas.height / this.resolution;\n\n        for (let i = 0; i < charList.length; i++)\n        {\n            const char = charList[i];\n\n            const metrics = CanvasTextMetrics.measureText(char, style, canvas, false);\n\n            // override the line height.. we want this to be the glyps height\n            // not the user specified one.\n            metrics.lineHeight = metrics.height;\n\n            const width = metrics.width * fontScale;\n            // This is ugly - but italics are given more space so they don't overlap\n            const textureGlyphWidth = Math.ceil((style.fontStyle === 'italic' ? 2 : 1) * width);\n\n            const height = (metrics.height) * fontScale;\n\n            const paddedWidth = textureGlyphWidth + (padding * 2);\n            const paddedHeight = height + (padding * 2);\n\n            skipTexture = false;\n            // don't let empty characters count towards the maxCharHeight\n            if (char !== '\\n' && char !== '\\r' && char !== '\\t' && char !== ' ')\n            {\n                skipTexture = true;\n                maxCharHeight = Math.ceil(Math.max(paddedHeight, maxCharHeight));// / 1.5;\n            }\n\n            if (currentX + paddedWidth > maxTextureWidth)\n            {\n                currentY += maxCharHeight;\n\n                // reset the line x and height..\n                maxCharHeight = paddedHeight;\n                currentX = 0;\n\n                if (currentY + maxCharHeight > maxTextureHeight)\n                {\n                    textureSource.update();\n\n                    const pageData = this._nextPage();\n\n                    canvas = pageData.canvasAndContext.canvas;\n                    context = pageData.canvasAndContext.context;\n                    textureSource = pageData.texture.source;\n\n                    currentY = 0;\n                }\n            }\n\n            const xAdvance = (width / fontScale)\n                - (style.dropShadow?.distance ?? 0)\n                - (style._stroke?.width ?? 0);\n\n            // This is in coord space of the measurements.. not the texture\n            this.chars[char] = {\n                id: char.codePointAt(0),\n                xOffset: -this._padding,\n                yOffset: -this._padding,\n                xAdvance,\n                kerning: {},\n            };\n\n            if (skipTexture)\n            {\n                this._drawGlyph(\n                    context,\n                    metrics,\n                    currentX + padding,\n                    currentY + padding,\n                    fontScale,\n                    style,\n                );\n\n                const px = textureSource.width * fontScale;\n                const py = textureSource.height * fontScale;\n\n                const frame = new Rectangle(\n                    ((currentX) / px) * textureSource.width,\n                    ((currentY) / py) * textureSource.height,\n                    ((paddedWidth) / px) * textureSource.width,\n                    ((paddedHeight) / py) * textureSource.height,\n                );\n\n                this.chars[char].texture = new Texture({\n                    source: textureSource,\n                    frame,\n                });\n\n                currentX += Math.ceil(paddedWidth);\n            }\n\n            // now add it to the font data..\n        }\n\n        textureSource.update();\n\n        this._currentX = currentX;\n        this._currentY = currentY;\n\n        // now apply kerning..\n        this._skipKerning && this._applyKerning(charList, context);\n    }\n\n    /**\n     * @deprecated since 8.0.0\n     * The map of base page textures (i.e., sheets of glyphs).\n     */\n    public override get pageTextures(): DynamicBitmapFont['pages']\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'BitmapFont.pageTextures is deprecated, please use BitmapFont.pages instead.');\n        // #endif\n\n        return this.pages;\n    }\n\n    private _applyKerning(newChars: string[], context: ICanvasRenderingContext2D): void\n    {\n        const measureCache = this._measureCache;\n\n        for (let i = 0; i < newChars.length; i++)\n        {\n            const first = newChars[i];\n\n            for (let j = 0; j < this._currentChars.length; j++)\n            {\n                // first go through new char being first\n                const second = this._currentChars[j];\n\n                let c1 = measureCache[first];\n\n                if (!c1) c1 = measureCache[first] = context.measureText(first).width;\n\n                let c2 = measureCache[second];\n\n                if (!c2) c2 = measureCache[second] = context.measureText(second).width;\n\n                let total = context.measureText(first + second).width;\n                let amount = total - (c1 + c2);\n\n                if (amount)\n                {\n                    this.chars[first].kerning[second] = amount;\n                }\n\n                // then go through new char being second\n                total = context.measureText(first + second).width;\n                amount = total - (c1 + c2);\n\n                if (amount)\n                {\n                    this.chars[second].kerning[first] = amount;\n                }\n            }\n        }\n    }\n\n    private _nextPage(): {canvasAndContext: CanvasAndContext, texture: Texture}\n    {\n        this._currentPageIndex++;\n\n        const textureResolution = this.resolution;\n        const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n            this._textureSize,\n            this._textureSize,\n            textureResolution\n        );\n\n        this._setupContext(canvasAndContext.context, this._style, textureResolution);\n\n        const resolution = textureResolution * (this.baseRenderedFontSize / this.baseMeasurementFontSize);\n        const texture = new Texture({\n            source: new ImageSource({\n                resource: canvasAndContext.canvas,\n                resolution,\n                alphaMode: 'premultiply-alpha-on-upload',\n                autoGenerateMipmaps: this._mipmap,\n            }),\n\n        });\n\n        const pageData = {\n            canvasAndContext,\n            texture,\n        };\n\n        this.pages[this._currentPageIndex] = pageData;\n\n        return pageData;\n    }\n\n    // canvas style!\n    private _setupContext(context: ICanvasRenderingContext2D, style: TextStyle, resolution: number): void\n    {\n        style.fontSize = this.baseRenderedFontSize;\n        context.scale(resolution, resolution);\n        context.font = fontStringFromTextStyle(style);\n        style.fontSize = this.baseMeasurementFontSize;\n        context.textBaseline = style.textBaseline;\n\n        const stroke = style._stroke;\n        const strokeThickness = stroke?.width ?? 0;\n\n        if (stroke)\n        {\n            context.lineWidth = strokeThickness;\n            context.lineJoin = stroke.join;\n            context.miterLimit = stroke.miterLimit;\n\n            // TODO prolly cache this??\n            context.strokeStyle = getCanvasFillStyle(stroke, context);\n        }\n\n        if (style._fill)\n        {\n            // set canvas text styles\n            context.fillStyle = getCanvasFillStyle(style._fill, context);\n        }\n\n        if (style.dropShadow)\n        {\n            const shadowOptions = style.dropShadow;\n            const rgb = Color.shared.setValue(shadowOptions.color).toArray();\n\n            const dropShadowBlur = shadowOptions.blur * resolution;\n            const dropShadowDistance = shadowOptions.distance * resolution;\n\n            context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${shadowOptions.alpha})`;\n            context.shadowBlur = dropShadowBlur;\n            context.shadowOffsetX = Math.cos(shadowOptions.angle) * dropShadowDistance;\n            context.shadowOffsetY = Math.sin(shadowOptions.angle) * dropShadowDistance;\n        }\n        else\n        {\n            context.shadowColor = 'black';\n            context.shadowBlur = 0;\n            context.shadowOffsetX = 0;\n            context.shadowOffsetY = 0;\n        }\n    }\n\n    private _drawGlyph(\n        context: ICanvasRenderingContext2D,\n        metrics: CanvasTextMetrics,\n        x: number,\n        y: number,\n        fontScale: number,\n        style: TextStyle\n    ): void\n    {\n        const char = metrics.text;\n        const fontProperties = metrics.fontProperties;\n        const stroke = style._stroke;\n\n        const strokeThickness = (stroke?.width ?? 0) * fontScale;\n\n        const tx = x + (strokeThickness / 2);\n        const ty = y - (strokeThickness / 2);\n\n        const descent = fontProperties.descent * fontScale;\n        const lineHeight = metrics.lineHeight * fontScale;\n\n        if (style.stroke && strokeThickness)\n        {\n            context.strokeText(char, tx, ty + lineHeight - descent);\n        }\n\n        if (style._fill)\n        {\n            context.fillText(char, tx, ty + lineHeight - descent);\n        }\n    }\n\n    public override destroy(): void\n    {\n        super.destroy();\n\n        for (let i = 0; i < this.pages.length; i++)\n        {\n            const { canvasAndContext, texture } = this.pages[i];\n\n            CanvasPool.returnCanvasAndContext(canvasAndContext);\n            texture.destroy(true);\n        }\n\n        (this.pages as null) = null;\n    }\n}\n","import type { TextStyle } from '../../text/TextStyle';\nimport type { AbstractBitmapFont } from '../AbstractBitmapFont';\n\nexport interface BitmapTextLayoutData\n{\n    width: number;\n    height: number;\n    scale: number;\n    offsetY: number;\n    lines: {\n        width: number\n        charPositions: number[],\n        chars: string[],\n        // / spaces: number\n        spaceWidth: number\n        spacesIndex: number[]\n    }[];\n}\n\nexport function getBitmapTextLayout(\n    chars: string[],\n    style: TextStyle,\n    font: AbstractBitmapFont<any>,\n    trimEnd: boolean\n): BitmapTextLayoutData\n{\n    const layoutData: BitmapTextLayoutData = {\n        width: 0,\n        height: 0,\n        offsetY: 0,\n        scale: style.fontSize / font.baseMeasurementFontSize,\n        lines: [{\n            width: 0,\n            charPositions: [] as number[],\n            spaceWidth: 0,\n            spacesIndex: [],\n            chars: [],\n        }]\n    };\n\n    layoutData.offsetY = font.baseLineOffset;\n\n    let currentLine = layoutData.lines[0];\n\n    let previousChar: string = null;\n    let firstWord = true;\n    //    let spaceCount = 0;\n\n    const currentWord = {\n        spaceWord: false,\n        width: 0,\n        start: 0,\n        index: 0, // use index to not modify the array as we use it a lot!\n        positions: [] as number[],\n        chars: [] as string[],\n    };\n\n    const nextWord = (word: typeof currentWord) =>\n    {\n        const start = currentLine.width;\n\n        for (let j = 0; j < currentWord.index; j++)\n        {\n            const position = word.positions[j];\n\n            currentLine.chars.push(word.chars[j]);\n            currentLine.charPositions.push(position + start);\n        }\n\n        currentLine.width += word.width;\n\n        firstWord = false;\n\n        // reset the word..\n        currentWord.width = 0;\n        currentWord.index = 0;\n        currentWord.chars.length = 0;\n\n        // spaceCount = 0;\n    };\n\n    const nextLine = () =>\n    {\n        let index = currentLine.chars.length - 1;\n\n        if (trimEnd)\n        {\n            let lastChar = currentLine.chars[index];\n\n            while (lastChar === ' ')\n            {\n                currentLine.width -= font.chars[lastChar].xAdvance;\n                lastChar = currentLine.chars[--index];\n            }\n        }\n\n        layoutData.width = Math.max(layoutData.width, currentLine.width);\n\n        currentLine = {\n            width: 0,\n            charPositions: [],\n            chars: [],\n            spaceWidth: 0,\n            spacesIndex: [],\n        };\n\n        firstWord = true;\n        layoutData.lines.push(currentLine);\n        layoutData.height += font.lineHeight;\n    };\n\n    const scale = font.baseMeasurementFontSize / style.fontSize;\n\n    const adjustedLetterSpacing = style.letterSpacing * scale;\n    const adjustedWordWrapWidth = style.wordWrapWidth * scale;\n\n    // loop an extra time to force a line break..\n    for (let i = 0; i < chars.length + 1; i++)\n    {\n        let char: string;\n\n        const isEnd = i === chars.length;\n\n        if (!isEnd)\n        {\n            char = chars[i];\n        }\n\n        const charData = font.chars[char] || font.chars[' '];\n\n        const isSpace = (/(?:\\s)/).test(char);\n        const isWordBreak = isSpace || char === '\\r' || char === '\\n' || isEnd;\n\n        // spaceCount++;\n        // wasSpace = isSpace;\n\n        if (isWordBreak)\n        {\n            const addWordToNextLine = !firstWord\n                && style.wordWrap\n                && (currentLine.width + currentWord.width - adjustedLetterSpacing) > adjustedWordWrapWidth;\n\n            if (addWordToNextLine)\n            {\n                nextLine();\n\n                nextWord(currentWord);\n\n                if (!isEnd)\n                {\n                    currentLine.charPositions.push(0);\n                }\n            }\n            else\n            {\n                currentWord.start = currentLine.width;\n\n                nextWord(currentWord);\n\n                if (!isEnd)\n                {\n                    currentLine.charPositions.push(0);\n                }\n            }\n\n            if (char === '\\r' || char === '\\n')\n            {\n                if (currentLine.width !== 0)\n                {\n                    nextLine();\n                }\n            }\n            else if (!isEnd)\n            {\n                const spaceWidth = charData.xAdvance + (charData.kerning[previousChar] || 0) + adjustedLetterSpacing;\n\n                currentLine.width += spaceWidth;\n\n                currentLine.spaceWidth = spaceWidth;\n                currentLine.spacesIndex.push(currentLine.charPositions.length);\n                currentLine.chars.push(char);\n\n                // spaceCount++;\n            }\n        }\n        else\n        {\n            const kerning = charData.kerning[previousChar] || 0;\n\n            const nextCharWidth = charData.xAdvance + kerning + adjustedLetterSpacing;\n\n            currentWord.positions[currentWord.index++] = currentWord.width + kerning;\n            currentWord.chars.push(char);\n\n            currentWord.width += nextCharWidth;\n        }\n\n        previousChar = char;\n        // lastChar = char;\n    }\n\n    nextLine();\n\n    if (style.align === 'center')\n    {\n        alignCenter(layoutData);\n    }\n    else if (style.align === 'right')\n    {\n        alignRight(layoutData);\n    }\n    else if (style.align === 'justify')\n    {\n        alignJustify(layoutData);\n    }\n\n    return layoutData;\n}\n\nfunction alignCenter(measurementData: BitmapTextLayoutData)\n{\n    for (let i = 0; i < measurementData.lines.length; i++)\n    {\n        const line = measurementData.lines[i];\n        const offset = ((measurementData.width / 2) - (line.width / 2));\n\n        for (let j = 0; j < line.charPositions.length; j++)\n        {\n            line.charPositions[j] += offset;\n        }\n    }\n}\n\nfunction alignRight(measurementData: BitmapTextLayoutData)\n{\n    for (let i = 0; i < measurementData.lines.length; i++)\n    {\n        const line = measurementData.lines[i];\n        const offset = ((measurementData.width) - (line.width));\n\n        for (let j = 0; j < line.charPositions.length; j++)\n        {\n            line.charPositions[j] += offset;\n        }\n    }\n}\n\nfunction alignJustify(measurementData: BitmapTextLayoutData)\n{\n    const width = measurementData.width;\n\n    for (let i = 0; i < measurementData.lines.length; i++)\n    {\n        const line = measurementData.lines[i];\n\n        let indy = 0;\n        let spaceIndex = line.spacesIndex[indy++];\n\n        let offset = 0;\n\n        const totalSpaces = line.spacesIndex.length;\n\n        const newSpaceWidth = (width - line.width) / totalSpaces;\n\n        const spaceWidth = newSpaceWidth;\n\n        for (let j = 0; j < line.charPositions.length; j++)\n        {\n            if (j === spaceIndex)\n            {\n                spaceIndex = line.spacesIndex[indy++];\n\n                offset += spaceWidth;\n            }\n\n            line.charPositions[j] += offset;\n        }\n    }\n}\n","import { Cache } from '../../assets/cache/Cache';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { warn } from '../../utils/logging/warn';\nimport { TextStyle } from '../text/TextStyle';\nimport { DynamicBitmapFont } from './DynamicBitmapFont';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout';\nimport { resolveCharacters } from './utils/resolveCharacters';\n\nimport type { TextStyleOptions } from '../text/TextStyle';\nimport type { BitmapFont } from './BitmapFont';\nimport type { BitmapTextLayoutData } from './utils/getBitmapTextLayout';\n\nlet fontCount = 0;\n\n/**\n *\n * The options for installing a new BitmapFont. Once installed the font will be available for use in the BitmapText.\n * It can be accessed by the `fontFamily` property of the TextStyle.\n *\n * Install a new BitmapFont will create the characters provided for the font and store them in the cache.\n * But don't worry, if a character is requested that hasn't been generated yet, it will be created on the fly.\n * @memberof text\n */\nexport interface BitmapFontInstallOptions\n{\n    /** the name of the font, this will be the name you use in the fontFamily of text style to access this font */\n    name?: string;\n    /**\n     * Characters included in the font set. You can also use ranges.\n     * For example, `[['a', 'z'], ['A', 'Z'], \"!@#$%^&*()~{}[] \"]`.\n     * Don't forget to include spaces ' ' in your character set!\n     * @default BitmapFont.ALPHANUMERIC\n     */\n    chars?: string | (string | string[])[];\n    /**\n     * Render resolution for glyphs.\n     * @default 1\n     */\n    resolution?: number;\n    /**\n     * Padding between glyphs on texture atlas. Lower values could mean more visual artifacts\n     * and bleeding from other glyphs, larger values increase the space required on the texture.\n     * @default 4\n     */\n    padding?: number;\n    /**\n     * Skip generation of kerning information for the BitmapFont.\n     * If true, this could potentially increase the performance, but may impact the rendered text appearance.\n     * @default false\n     */\n    skipKerning?: boolean;\n    /** Style options to render with BitmapFont. */\n    style?: TextStyle | TextStyleOptions;\n}\n\n/**\n * The BitmapFontManager is a helper that exists to install and uninstall fonts\n * into the cache for BitmapText objects.\n * @memberof text\n * @name BitmapFontManager\n * @example\n * import { BitmapFontManager, BitmapText } from 'pixi.js';\n *\n * BitmapFontManager.install({\n *   name: 'TitleFont',\n *   style: {}\n * });\n *\n * const title = new BitmapText({ text: 'This is the title', style: { fontFamily: 'TitleFont' }});\n */\nclass BitmapFontManagerClass\n{\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.ALPHA })\n     */\n    public readonly ALPHA = [['a', 'z'], ['A', 'Z'], ' '];\n\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.NUMERIC })\n     */\n    public readonly NUMERIC = [['0', '9']];\n\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @type {string[][]}\n     */\n    public readonly ALPHANUMERIC = [['a', 'z'], ['A', 'Z'], ['0', '9'], ' '];\n\n    /**\n     * This character set consists of all the ASCII table.\n     * @member {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    public readonly ASCII = [[' ', '~']];\n\n    /** Default options for installing a new BitmapFont. */\n    public defaultOptions: Omit<BitmapFontInstallOptions, 'style'> = {\n        chars: this.ALPHANUMERIC,\n        resolution: 1,\n        padding: 4,\n        skipKerning: false,\n    };\n\n    /**\n     * Get a font for the specified text and style.\n     * @param text - The text to get the font for\n     * @param style - The style to use\n     */\n    public getFont(text: string, style: TextStyle): BitmapFont\n    {\n        let fontFamilyKey = `${style.fontFamily as string}-bitmap`;\n        let overrideFill = true;\n\n        // assuming there is no texture we can use a tint!\n        if (style._fill.fill && !style._stroke)\n        {\n            fontFamilyKey += style._fill.fill.styleKey;\n            overrideFill = false;\n        }\n        else if (style._stroke || style.dropShadow)\n        {\n            // if there is a stoke, we need to use the style key as this the font generated cannot be tinted\n            // due to the fact the font has at least two colors.\n            let key = style.styleKey;\n\n            // remove the font size..\n            key = key.substring(0, key.lastIndexOf('-'));\n\n            fontFamilyKey = `${key}-bitmap`;\n            overrideFill = false;\n        }\n\n        // first get us the the right font...\n        if (!Cache.has(fontFamilyKey))\n        {\n            const fnt = new DynamicBitmapFont({\n                style,\n                overrideFill,\n                overrideSize: true,\n                ...this.defaultOptions,\n            });\n\n            fontCount++;\n\n            // warn users if they have created too many dynamic fonts\n            if (fontCount > 50)\n            {\n                // eslint-disable-next-line max-len\n                warn('BitmapText', `You have dynamically created ${fontCount} bitmap fonts, this can be inefficient. Try pre installing your font styles using \\`BitmapFont.install({name:\"style1\", style})\\``);\n            }\n\n            fnt.once('destroy', () =>\n            {\n                fontCount--;\n                Cache.remove(fontFamilyKey);\n            });\n\n            Cache.set(\n                fontFamilyKey as string,\n                fnt\n            );\n        }\n\n        const dynamicFont = Cache.get(fontFamilyKey);\n\n        (dynamicFont as DynamicBitmapFont).ensureCharacters?.(text);\n\n        return dynamicFont;\n    }\n\n    /**\n     * Get the layout of a text for the specified style.\n     * @param text - The text to get the layout for\n     * @param style - The style to use\n     * @param trimEnd - Whether to ignore whitespaces at the end of each line\n     */\n    public getLayout(text: string, style: TextStyle, trimEnd: boolean = true): BitmapTextLayoutData\n    {\n        const bitmapFont = this.getFont(text, style);\n\n        return getBitmapTextLayout([...text], style, bitmapFont, trimEnd);\n    }\n\n    /**\n     * Measure the text using the specified style.\n     * @param text - The text to measure\n     * @param style - The style to use\n     * @param trimEnd - Whether to ignore whitespaces at the end of each line\n     */\n    public measureText(\n        text: string,\n        style: TextStyle,\n        trimEnd: boolean = true\n    ): { width: number; height: number; scale: number; offsetY: number }\n    {\n        return this.getLayout(text, style, trimEnd);\n    }\n\n    /**\n     * Generates a bitmap-font for the given style and character set\n     * @param options - Setup options for font generation.\n     * @returns Font generated by style options.\n     * @example\n     * import { BitmapFontManager, BitmapText } from 'pixi.js';\n     *\n     * BitmapFontManager.install('TitleFont', {\n     *     fontFamily: 'Arial',\n     *     fontSize: 12,\n     *     strokeThickness: 2,\n     *     fill: 'purple',\n     * });\n     *\n     * const title = new BitmapText({ text: 'This is the title', fontFamily: 'TitleFont' });\n     */\n    public install(options: BitmapFontInstallOptions): BitmapFont;\n    /** @deprecated since 7.0.0 */\n    public install(name: string, style?: TextStyle | TextStyleOptions, options?: BitmapFontInstallOptions): BitmapFont;\n    // eslint-disable-next-line max-len\n    public install(...args: [string | BitmapFontInstallOptions, (TextStyle | TextStyleOptions)?, BitmapFontInstallOptions?]): BitmapFont\n    {\n        let options = args[0] as BitmapFontInstallOptions;\n\n        if (typeof options === 'string')\n        {\n            options = {\n                name: options,\n                style: args[1],\n                chars: args[2]?.chars,\n                resolution: args[2]?.resolution,\n                padding: args[2]?.padding,\n                skipKerning: args[2]?.skipKerning,\n            } as BitmapFontInstallOptions;\n\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation(v8_0_0, 'BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})');\n            // #endif\n        }\n\n        const name = options?.name;\n\n        if (!name)\n        {\n            throw new Error('[BitmapFontManager] Property `name` is required.');\n        }\n\n        options = { ...this.defaultOptions, ...options };\n\n        const textStyle = options.style;\n\n        const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n        const overrideFill = style._fill.fill !== null && style._fill.fill !== undefined;\n        const font = new DynamicBitmapFont({\n            style,\n            overrideFill,\n            skipKerning: options.skipKerning,\n            padding: options.padding,\n            resolution: options.resolution,\n            overrideSize: false\n        });\n\n        const flatChars = resolveCharacters(options.chars);\n\n        font.ensureCharacters(flatChars.join(''));\n\n        Cache.set(`${name}-bitmap`, font);\n\n        font.once('destroy', () => Cache.remove(`${name}-bitmap`));\n\n        return font;\n    }\n\n    /**\n     * Uninstalls a bitmap font from the cache.\n     * @param {string} name - The name of the bitmap font to uninstall.\n     */\n    public uninstall(name: string)\n    {\n        const cacheKey = `${name}-bitmap`;\n        const font = Cache.get<BitmapFont>(cacheKey);\n\n        if (font)\n        {\n            font.destroy();\n        }\n    }\n}\n\nexport const BitmapFontManager = new BitmapFontManagerClass();\n","import { Cache } from '../../assets/cache/Cache';\nimport { ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { Graphics } from '../graphics/shared/Graphics';\nimport { SdfShader } from '../text/sdfShader/SdfShader';\nimport { BitmapFontManager } from './BitmapFontManager';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../rendering/renderers/shared/Renderable';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { Container } from '../container/Container';\nimport type { BitmapText } from './BitmapText';\n\nexport class BitmapTextPipe implements RenderPipe<BitmapText>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'bitmapText',\n    } as const;\n\n    private _renderer: Renderer;\n    private _gpuBitmapText: Record<number, Graphics> = {};\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_gpuBitmapText');\n    }\n\n    public validateRenderable(bitmapText: BitmapText): boolean\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        if (bitmapText._didTextUpdate)\n        {\n            bitmapText._didTextUpdate = false;\n\n            this._updateContext(bitmapText, graphicsRenderable);\n        }\n\n        return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n\n        // TODO - need to shift all the verts in the graphicsData to the new anchor\n\n        // update the anchor...\n    }\n\n    public addRenderable(bitmapText: BitmapText, instructionSet: InstructionSet)\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        // sync..\n        syncWithProxy(bitmapText, graphicsRenderable);\n\n        if (bitmapText._didTextUpdate)\n        {\n            bitmapText._didTextUpdate = false;\n\n            this._updateContext(bitmapText, graphicsRenderable);\n        }\n\n        this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n\n        if (graphicsRenderable.context.customShader)\n        {\n            this._updateDistanceField(bitmapText);\n        }\n    }\n\n    public destroyRenderable(bitmapText: BitmapText)\n    {\n        bitmapText.off('destroyed', this._destroyRenderableBound);\n\n        this._destroyRenderableByUid(bitmapText.uid);\n    }\n\n    private _destroyRenderableByUid(renderableUid: number)\n    {\n        const context = this._gpuBitmapText[renderableUid].context;\n\n        if (context.customShader)\n        {\n            BigPool.return(context.customShader as PoolItem);\n\n            context.customShader = null;\n        }\n\n        BigPool.return(this._gpuBitmapText[renderableUid] as PoolItem);\n        this._gpuBitmapText[renderableUid] = null;\n    }\n\n    public updateRenderable(bitmapText: BitmapText)\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        // sync..\n        syncWithProxy(bitmapText, graphicsRenderable);\n\n        this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n\n        if (graphicsRenderable.context.customShader)\n        {\n            this._updateDistanceField(bitmapText);\n        }\n    }\n\n    private _updateContext(bitmapText: BitmapText, proxyGraphics: Graphics)\n    {\n        const { context } = proxyGraphics;\n\n        const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n\n        context.clear();\n\n        if (bitmapFont.distanceField.type !== 'none')\n        {\n            if (!context.customShader)\n            {\n                context.customShader = BigPool.get(SdfShader);\n            }\n        }\n\n        const chars = Array.from(bitmapText.text);\n        const style = bitmapText._style;\n\n        let currentY = bitmapFont.baseLineOffset;\n\n        // measure our text...\n        const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont, true);\n\n        let index = 0;\n\n        const padding = style.padding;\n        const scale = bitmapTextLayout.scale;\n\n        let tx = bitmapTextLayout.width;\n        let ty = bitmapTextLayout.height + bitmapTextLayout.offsetY;\n\n        if (style._stroke)\n        {\n            tx += style._stroke.width / scale;\n            ty += style._stroke.width / scale;\n        }\n\n        context\n            .translate((-bitmapText._anchor._x * tx) - padding, (-bitmapText._anchor._y * ty) - padding)\n            .scale(scale, scale);\n\n        const tint = bitmapFont.applyFillAsTint ? style._fill.color : 0xFFFFFF;\n\n        for (let i = 0; i < bitmapTextLayout.lines.length; i++)\n        {\n            const line = bitmapTextLayout.lines[i];\n\n            for (let j = 0; j < line.charPositions.length; j++)\n            {\n                const char = chars[index++];\n\n                const charData = bitmapFont.chars[char];\n\n                if (charData?.texture)\n                {\n                    context.texture(\n                        charData.texture,\n                        tint ? tint : 'black',\n                        Math.round(line.charPositions[j] + charData.xOffset),\n                        Math.round(currentY + charData.yOffset),\n                    );\n                }\n            }\n\n            currentY += bitmapFont.lineHeight;\n        }\n    }\n\n    private _getGpuBitmapText(bitmapText: BitmapText)\n    {\n        return this._gpuBitmapText[bitmapText.uid] || this.initGpuText(bitmapText);\n    }\n\n    public initGpuText(bitmapText: BitmapText)\n    {\n        // TODO we could keep a bunch of contexts around and reuse one that has the same style!\n        const proxyRenderable = BigPool.get(Graphics);\n\n        this._gpuBitmapText[bitmapText.uid] = proxyRenderable;\n\n        this._updateContext(bitmapText, proxyRenderable);\n\n        bitmapText.on('destroyed', this._destroyRenderableBound);\n\n        return this._gpuBitmapText[bitmapText.uid];\n    }\n\n    private _updateDistanceField(bitmapText: BitmapText)\n    {\n        const context = this._getGpuBitmapText(bitmapText).context;\n\n        const fontFamily = bitmapText._style.fontFamily as string;\n        const dynamicFont = Cache.get(`${fontFamily as string}-bitmap`);\n\n        // Inject the shader code with the correct value\n        const { a, b, c, d } = bitmapText.groupTransform;\n\n        const dx = Math.sqrt((a * a) + (b * b));\n        const dy = Math.sqrt((c * c) + (d * d));\n        const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n\n        const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n\n        const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale);\n\n        context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n    }\n\n    public destroy()\n    {\n        for (const uid in this._gpuBitmapText)\n        {\n            this._destroyRenderableByUid(uid as unknown as number);\n        }\n\n        this._gpuBitmapText = null;\n\n        this._renderer = null;\n    }\n}\n\nfunction syncWithProxy(container: Renderable, proxy: Renderable)\n{\n    proxy.groupTransform = container.groupTransform;\n    proxy.groupColorAlpha = container.groupColorAlpha;\n    proxy.groupColor = container.groupColor;\n    proxy.groupBlendMode = container.groupBlendMode;\n    proxy.globalDisplayStatus = container.globalDisplayStatus;\n    proxy.groupTransform = container.groupTransform;\n    proxy.localDisplayStatus = container.localDisplayStatus;\n    proxy.groupAlpha = container.groupAlpha;\n    proxy._roundPixels = container._roundPixels;\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { BitmapTextPipe } from './BitmapTextPipe';\n\nextensions.add(BitmapTextPipe);\n","export const localUniformBit = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* wgsl */`\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `,\n        main: /* wgsl */`\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `,\n        end: /* wgsl */`\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    },\n};\n\n// TODO this works, but i think down the road it will be better to manage groups automatically if there are clashes\nexport const localUniformBitGroup2 = {\n    ...localUniformBit,\n    vertex: {\n        ...localUniformBit.vertex,\n        // replace the group!\n        header: localUniformBit.vertex.header.replace('group(1)', 'group(2)'),\n    }\n};\n\nexport const localUniformBitGl = {\n    name: 'local-uniform-bit',\n    vertex: {\n        header: /* glsl */`\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `,\n        main: /* glsl */`\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `,\n        end: /* glsl */`\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    },\n};\n","import { ExtensionType } from '../extensions/Extensions';\n\nimport type { InstructionSet } from '../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../rendering/renderers/types';\nimport type { Container } from '../scene/container/Container';\nimport type { Effect } from '../scene/container/Effect';\nimport type { FilterInstruction } from './FilterSystem';\n\nexport class FilterPipe implements InstructionPipe<FilterInstruction>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'filter',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public push(filterEffect: Effect, container: Container, instructionSet: InstructionSet): void\n    {\n        const renderPipes = this._renderer.renderPipes;\n\n        renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            canBundle: false,\n            action: 'pushFilter',\n            container,\n            filterEffect,\n        } as FilterInstruction);\n    }\n\n    public pop(_filterEffect: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            action: 'popFilter',\n            canBundle: false,\n        });\n    }\n\n    public execute(instruction: FilterInstruction)\n    {\n        if (instruction.action === 'pushFilter')\n        {\n            this._renderer.filter.push(instruction);\n        }\n        else if (instruction.action === 'popFilter')\n        {\n            this._renderer.filter.pop();\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n    }\n}\n","import { ExtensionType } from '../extensions/Extensions';\nimport { Matrix } from '../maths/matrix/Matrix';\nimport { Point } from '../maths/point/Point';\nimport { BindGroup } from '../rendering/renderers/gpu/shader/BindGroup';\nimport { Geometry } from '../rendering/renderers/shared/geometry/Geometry';\nimport { UniformGroup } from '../rendering/renderers/shared/shader/UniformGroup';\nimport { Texture } from '../rendering/renderers/shared/texture/Texture';\nimport { TexturePool } from '../rendering/renderers/shared/texture/TexturePool';\nimport { type Renderer, RendererType } from '../rendering/renderers/types';\nimport { Bounds } from '../scene/container/bounds/Bounds';\nimport { getGlobalRenderableBounds } from '../scene/container/bounds/getRenderableBounds';\nimport { warn } from '../utils/logging/warn';\n\nimport type { WebGLRenderer } from '../rendering/renderers/gl/WebGLRenderer';\nimport type { WebGPURenderer } from '../rendering/renderers/gpu/WebGPURenderer';\nimport type { Instruction } from '../rendering/renderers/shared/instructions/Instruction';\nimport type { Renderable } from '../rendering/renderers/shared/Renderable';\nimport type { RenderTarget } from '../rendering/renderers/shared/renderTarget/RenderTarget';\nimport type { RenderSurface } from '../rendering/renderers/shared/renderTarget/RenderTargetSystem';\nimport type { System } from '../rendering/renderers/shared/system/System';\nimport type { Container } from '../scene/container/Container';\nimport type { Sprite } from '../scene/sprite/Sprite';\nimport type { Filter } from './Filter';\nimport type { FilterEffect } from './FilterEffect';\n\ntype FilterAction = 'pushFilter' | 'popFilter';\n\n//\nconst quadGeometry = new Geometry({\n    attributes: {\n        aPosition: {\n            buffer: new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n            format: 'float32x2',\n            stride: 2 * 4,\n            offset: 0,\n        },\n    },\n    indexBuffer: new Uint32Array([0, 1, 2, 0, 2, 3]),\n});\n\n/**\n * The filter pipeline is responsible for applying filters scene items!\n *\n * KNOWN BUGS:\n * 1. Global bounds calculation is incorrect if it is used when flip flopping filters. The maths can be found below\n * eg: filters [noiseFilter, blurFilter] noiseFilter will calculate the global bounds incorrectly.\n *\n * 2. RenderGroups do not work with filters. This is because the renderGroup matrix is not currently taken into account.\n *\n * Implementation notes:\n * 1. Gotcha - nesting filters that require blending will not work correctly. This creates a chicken and egg problem\n * the complexity and performance required to do this is not worth it i feel.. but lets see if others agree!\n *\n * 2. Filters are designed to be changed on the fly, this is means that changing filter information each frame will\n * not trigger an instruction rebuild. If you are constantly turning a filter on and off.. its therefore better to set\n * enabled to true or false on the filter. Or setting an empty array.\n *\n * 3. Need to look at perhaps aliasing when flip flopping filters. Really we should only need to antialias the FIRST\n * Texture we render too. The rest can be non aliased. This might help performance.\n * Currently we flip flop with an antialiased texture if antialiasing is enabled on the filter.\n */\nexport interface FilterInstruction extends Instruction\n{\n    renderPipeId: 'filter',\n    action: FilterAction,\n    container?: Container,\n    renderables?: Renderable[],\n    filterEffect: FilterEffect,\n}\n\nexport interface FilterData\n{\n    skip: boolean;\n    enabledLength?: number;\n    inputTexture: Texture\n    bounds: Bounds,\n    blendRequired: boolean,\n    container: Container,\n    filterEffect: FilterEffect,\n    previousRenderSurface: RenderSurface,\n    backTexture?: Texture,\n}\n\n/**\n * System that manages the filter pipeline\n * @memberof rendering\n */\nexport class FilterSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'filter',\n    } as const;\n\n    public readonly renderer: Renderer;\n\n    private _filterStackIndex = 0;\n    private _filterStack: FilterData[] = [];\n\n    private readonly _filterGlobalUniforms = new UniformGroup({\n        uInputSize: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uInputPixel: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uInputClamp: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uOutputFrame: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uGlobalFrame: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uOutputTexture: { value: new Float32Array(4), type: 'vec4<f32>' },\n    });\n\n    private readonly _globalFilterBindGroup: BindGroup = new BindGroup({});\n    private _activeFilterData: FilterData;\n\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * The back texture of the currently active filter. Requires the filter to have `blendRequired` set to true.\n     * @readonly\n     */\n    public get activeBackTexture(): Texture | undefined\n    {\n        return this._activeFilterData?.backTexture;\n    }\n\n    public push(instruction: FilterInstruction)\n    {\n        const renderer = this.renderer;\n\n        const filters = instruction.filterEffect.filters;\n\n        if (!this._filterStack[this._filterStackIndex])\n        {\n            this._filterStack[this._filterStackIndex] = this._getFilterData();\n        }\n\n        // get a filter data from the stack. They can be reused multiple times each frame,\n        // so we don't need to worry about overwriting them in a single pass.\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        this._filterStackIndex++;\n\n        // if there are no filters, we skip the pass\n        if (filters.length === 0)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        const bounds: Bounds = filterData.bounds;\n\n        // this path is used by the blend modes mostly!\n        // they collect all renderables and push them into a list.\n        // this list is then used to calculate the bounds of the filter area\n        if (instruction.renderables)\n        {\n            getGlobalRenderableBounds(instruction.renderables, bounds);\n        }\n        // if a filterArea is provided, we save our selves some measuring and just use that area supplied\n        else if (instruction.filterEffect.filterArea)\n        {\n            bounds.clear();\n\n            // transform the filterArea into global space..\n            bounds.addRect(instruction.filterEffect.filterArea);\n\n            // new for v8, we transform the bounds into the space of the container\n            bounds.applyMatrix(instruction.container.worldTransform);\n        }\n        // classic filter path, we get the bounds of the container and use it by recursively\n        // measuring.\n        else\n        {\n            // we want to factor render layers to get the real visual bounds of this container.\n            // so the last param is true..\n            instruction.container.getFastGlobalBounds(true, bounds);\n        }\n\n        if (instruction.container)\n        {\n            // When a container is cached as a texture, its filters need to be applied relative to its\n            // cached parent's coordinate space rather than world space. This transform adjustment ensures\n            // filters are applied in the correct coordinate system.\n            const renderGroup = instruction.container.renderGroup || instruction.container.parentRenderGroup;\n            const filterFrameTransform = renderGroup.cacheToLocalTransform;\n\n            if (filterFrameTransform)\n            {\n                bounds.applyMatrix(filterFrameTransform);\n            }\n        }\n\n        // get GLOBAL bounds of the item we are going to apply the filter to\n\n        const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n\n        // next we get the settings for the filter\n        // we need to find the LOWEST resolution for the filter list\n        let resolution = Infinity;\n        // Padding is additive to add padding to our padding\n        let padding = 0;\n        // if this is true for all filter, it should be true, and otherwise false\n        let antialias = true;\n        // true if any filter requires the previous render target\n        let blendRequired = false;\n        // true if any filter in the list is enabled\n        let enabled = false;\n        // false if any filter in the list has false\n        let clipToViewport = true;\n\n        for (let i = 0; i < filters.length; i++)\n        {\n            const filter = filters[i];\n\n            resolution = Math.min(resolution, filter.resolution === 'inherit'\n                ? colorTextureSource._resolution : filter.resolution);\n            padding += filter.padding;\n\n            if (filter.antialias === 'off')\n            {\n                antialias = false;\n            }\n            else if (filter.antialias === 'inherit')\n            {\n                antialias &&= colorTextureSource.antialias;\n            }\n\n            if (!filter.clipToViewport)\n            {\n                clipToViewport = false;\n            }\n\n            const isCompatible = !!(filter.compatibleRenderers & renderer.type);\n\n            if (!isCompatible)\n            {\n                enabled = false;\n                break;\n            }\n\n            if (filter.blendRequired && !((renderer as WebGLRenderer).backBuffer?.useBackBuffer ?? true))\n            {\n                // #if _DEBUG\n                // eslint-disable-next-line max-len\n                warn('Blend filter requires backBuffer on WebGL renderer to be enabled. Set `useBackBuffer: true` in the renderer options.');\n                // #endif\n\n                enabled = false;\n                break;\n            }\n\n            enabled = filter.enabled || enabled;\n            blendRequired ||= filter.blendRequired;\n        }\n\n        // if no filters are enabled lets skip!\n        if (!enabled)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        // here we constrain the bounds to the viewport we will render too\n        // this should not take into account the x, y offset of the viewport - as this is\n        // handled by the viewport on the gpu.\n        if (clipToViewport)\n        {\n            const viewPort = renderer.renderTarget.rootViewPort;\n\n            const rootResolution = renderer.renderTarget.renderTarget.resolution;\n\n            bounds.fitBounds(0, viewPort.width / rootResolution, 0, viewPort.height / rootResolution);\n        }\n\n        // round the bounds to the nearest pixel\n        bounds\n            .scale(resolution)\n            .ceil()\n            .scale(1 / resolution)\n            .pad(padding | 0);\n\n        // skip if the bounds are negative or zero as this means they are\n        // not visible on the screen\n        if (!bounds.isPositive)\n        {\n            filterData.skip = true;\n\n            return;\n        }\n\n        // set all the filter data\n        filterData.skip = false;\n\n        filterData.bounds = bounds;\n        filterData.blendRequired = blendRequired;\n        filterData.container = instruction.container;\n        filterData.filterEffect = instruction.filterEffect;\n\n        filterData.previousRenderSurface = renderer.renderTarget.renderSurface;\n\n        // bind...\n        // get a P02 texture from our pool...\n        filterData.inputTexture = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            resolution,\n            antialias,\n        );\n\n        renderer.renderTarget.bind(filterData.inputTexture, true);\n        // set the global uniforms to take into account the bounds offset required\n\n        renderer.globalUniforms.push({\n            offset: bounds,\n        });\n    }\n\n    public pop()\n    {\n        const renderer = this.renderer;\n\n        this._filterStackIndex--;\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        // if we are skipping this filter then we just do nothing :D\n        if (filterData.skip)\n        {\n            return;\n        }\n\n        this._activeFilterData = filterData;\n\n        const inputTexture = filterData.inputTexture;\n\n        const bounds = filterData.bounds;\n\n        let backTexture = Texture.EMPTY;\n\n        renderer.renderTarget.finishRenderPass();\n\n        if (filterData.blendRequired)\n        {\n            // this actually forces the current commandQueue to render everything so far.\n            // if we don't do this, we won't be able to copy pixels for the background\n            const previousBounds = this._filterStackIndex > 0 ? this._filterStack[this._filterStackIndex - 1].bounds : null;\n\n            const renderTarget = renderer.renderTarget.getRenderTarget(filterData.previousRenderSurface);\n\n            backTexture = this.getBackTexture(renderTarget, bounds, previousBounds);\n        }\n\n        filterData.backTexture = backTexture;\n\n        const filters = filterData.filterEffect.filters;\n\n        // get a BufferResource from the uniformBatch.\n        // this will batch the shader uniform data and give us a buffer resource we can\n        // set on our globalUniform Bind Group\n\n        // update the resources on the bind group...\n        this._globalFilterBindGroup.setResource(inputTexture.source.style, 2);\n        this._globalFilterBindGroup.setResource(backTexture.source, 3);\n\n        renderer.globalUniforms.pop();\n\n        if (filters.length === 1)\n        {\n            // render a single filter...\n            // this.applyFilter(filters[0], inputTexture, filterData.previousRenderSurface, false);\n            filters[0].apply(this, inputTexture, filterData.previousRenderSurface, false);\n\n            // return the texture to the pool so we can reuse the next frame\n            TexturePool.returnTexture(inputTexture);\n        }\n        else\n        {\n            let flip = filterData.inputTexture;\n\n            // get another texture that we will render the next filter too\n            let flop = TexturePool.getOptimalTexture(\n                bounds.width,\n                bounds.height,\n                flip.source._resolution,\n                false\n            );\n\n            let i = 0;\n\n            // loop and apply the filters, omitting the last one as we will render that to the final target\n            for (i = 0; i < filters.length - 1; ++i)\n            {\n                const filter = filters[i];\n\n                filter.apply(this, flip, flop, true);\n                const t = flip;\n\n                flip = flop;\n                flop = t;\n            }\n\n            filters[i].apply(this, flip, filterData.previousRenderSurface, false);\n\n            // return those textures for later!\n            TexturePool.returnTexture(flip);\n            TexturePool.returnTexture(flop);\n        }\n\n        // if we made a background texture, lets return that also\n        if (filterData.blendRequired)\n        {\n            TexturePool.returnTexture(backTexture);\n        }\n    }\n\n    public getBackTexture(lastRenderSurface: RenderTarget, bounds: Bounds, previousBounds?: Bounds)\n    {\n        const backgroundResolution = lastRenderSurface.colorTexture.source._resolution;\n\n        const backTexture = TexturePool.getOptimalTexture(\n            bounds.width,\n            bounds.height,\n            backgroundResolution,\n            false,\n        );\n\n        let x = bounds.minX;\n        let y = bounds.minY;\n\n        if (previousBounds)\n        {\n            x -= previousBounds.minX;\n            y -= previousBounds.minY;\n        }\n\n        x = Math.floor(x * backgroundResolution);\n        y = Math.floor(y * backgroundResolution);\n\n        const width = Math.ceil(bounds.width * backgroundResolution);\n        const height = Math.ceil(bounds.height * backgroundResolution);\n\n        this.renderer.renderTarget.copyToTexture(\n            lastRenderSurface,\n            backTexture,\n            { x, y },\n            { width, height },\n            { x: 0, y: 0 }\n        );\n\n        return backTexture;\n    }\n\n    public applyFilter(filter: Filter, input: Texture, output: RenderSurface, clear: boolean)\n    {\n        const renderer = this.renderer;\n\n        const filterData = this._filterStack[this._filterStackIndex];\n\n        const bounds = filterData.bounds;\n\n        const offset = Point.shared;\n        const previousRenderSurface = filterData.previousRenderSurface;\n\n        const isFinalTarget = previousRenderSurface === output;\n\n        let resolution = this.renderer.renderTarget.rootRenderTarget.colorTexture.source._resolution;\n\n        // to find the previous resolution we need to account for the skipped filters\n        // the following will find the last non skipped filter...\n        let currentIndex = this._filterStackIndex - 1;\n\n        while (currentIndex > 0 && this._filterStack[currentIndex].skip)\n        {\n            --currentIndex;\n        }\n\n        if (currentIndex > 0)\n        {\n            resolution = this._filterStack[currentIndex].inputTexture.source._resolution;\n        }\n\n        const filterUniforms = this._filterGlobalUniforms;\n        const uniforms = filterUniforms.uniforms;\n\n        const outputFrame = uniforms.uOutputFrame;\n        const inputSize = uniforms.uInputSize;\n        const inputPixel = uniforms.uInputPixel;\n        const inputClamp = uniforms.uInputClamp;\n        const globalFrame = uniforms.uGlobalFrame;\n        const outputTexture = uniforms.uOutputTexture;\n\n        // are we rendering back to the original surface?\n        if (isFinalTarget)\n        {\n            let lastIndex = this._filterStackIndex;\n\n            // get previous bounds.. we must take into account skipped filters also..\n            while (lastIndex > 0)\n            {\n                lastIndex--;\n                const filterData = this._filterStack[this._filterStackIndex - 1];\n\n                if (!filterData.skip)\n                {\n                    offset.x = filterData.bounds.minX;\n                    offset.y = filterData.bounds.minY;\n\n                    break;\n                }\n            }\n\n            outputFrame[0] = bounds.minX - offset.x;\n            outputFrame[1] = bounds.minY - offset.y;\n        }\n        else\n        {\n            outputFrame[0] = 0;\n            outputFrame[1] = 0;\n        }\n\n        outputFrame[2] = input.frame.width;\n        outputFrame[3] = input.frame.height;\n\n        inputSize[0] = input.source.width;\n        inputSize[1] = input.source.height;\n        inputSize[2] = 1 / inputSize[0];\n        inputSize[3] = 1 / inputSize[1];\n\n        inputPixel[0] = input.source.pixelWidth;\n        inputPixel[1] = input.source.pixelHeight;\n        inputPixel[2] = 1.0 / inputPixel[0];\n        inputPixel[3] = 1.0 / inputPixel[1];\n\n        inputClamp[0] = 0.5 * inputPixel[2];\n        inputClamp[1] = 0.5 * inputPixel[3];\n        inputClamp[2] = (input.frame.width * inputSize[2]) - (0.5 * inputPixel[2]);\n        inputClamp[3] = (input.frame.height * inputSize[3]) - (0.5 * inputPixel[3]);\n\n        const rootTexture = this.renderer.renderTarget.rootRenderTarget.colorTexture;\n\n        globalFrame[0] = offset.x * resolution;\n        globalFrame[1] = offset.y * resolution;\n\n        globalFrame[2] = rootTexture.source.width * resolution;\n        globalFrame[3] = rootTexture.source.height * resolution;\n\n        // set the output texture - this is where we are going to render to\n\n        const renderTarget = this.renderer.renderTarget.getRenderTarget(output);\n\n        renderer.renderTarget.bind(output, !!clear);\n\n        if (output instanceof Texture)\n        {\n            outputTexture[0] = output.frame.width;\n            outputTexture[1] = output.frame.height;\n        }\n        else\n        {\n            // this means a renderTarget was passed directly\n            outputTexture[0] = renderTarget.width;\n            outputTexture[1] = renderTarget.height;\n        }\n\n        outputTexture[2] = renderTarget.isRoot ? -1 : 1;\n        filterUniforms.update();\n\n        // TODO - should prolly use a adaptor...\n        if ((renderer as WebGPURenderer).renderPipes.uniformBatch)\n        {\n            const batchUniforms = (renderer as WebGPURenderer).renderPipes.uniformBatch\n                .getUboResource(filterUniforms);\n\n            this._globalFilterBindGroup.setResource(batchUniforms, 0);\n        }\n        else\n        {\n            this._globalFilterBindGroup.setResource(filterUniforms, 0);\n        }\n\n        // now lets update the output texture...\n\n        // set bind group..\n        this._globalFilterBindGroup.setResource(input.source, 1);\n        this._globalFilterBindGroup.setResource(input.source.style, 2);\n\n        filter.groups[0] = this._globalFilterBindGroup;\n\n        renderer.encoder.draw({\n            geometry: quadGeometry,\n            shader: filter,\n            state: filter._state,\n            topology: 'triangle-list'\n        });\n\n        // WebGPU blit's automatically, but WebGL does not!\n        if (renderer.type === RendererType.WEBGL)\n        {\n            renderer.renderTarget.finishRenderPass();\n        }\n    }\n\n    private _getFilterData(): FilterData\n    {\n        return {\n            skip: false,\n            inputTexture: null,\n            bounds: new Bounds(),\n            container: null,\n            filterEffect: null,\n            blendRequired: false,\n            previousRenderSurface: null,\n        };\n    }\n\n    /**\n     * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n     *\n     * Use `outputMatrix * vTextureCoord` in the shader.\n     * @param outputMatrix - The matrix to output to.\n     * @param {Sprite} sprite - The sprite to map to.\n     * @returns The mapped matrix.\n     */\n    public calculateSpriteMatrix(outputMatrix: Matrix, sprite: Sprite): Matrix\n    {\n        const data = this._activeFilterData;\n\n        const mappedMatrix = outputMatrix.set(\n            data.inputTexture._source.width,\n            0, 0,\n            data.inputTexture._source.height,\n            data.bounds.minX, data.bounds.minY\n        );\n\n        const worldTransform = sprite.worldTransform.copyTo(Matrix.shared);\n\n        const renderGroup = sprite.renderGroup || sprite.parentRenderGroup;\n\n        if (renderGroup && renderGroup.cacheToLocalTransform)\n        {\n            // get the matrix relative to the render group..\n            worldTransform.prepend(renderGroup.cacheToLocalTransform);\n        }\n\n        worldTransform.invert();\n        mappedMatrix.prepend(worldTransform);\n        mappedMatrix.scale(\n            1.0 / sprite.texture.frame.width,\n            1.0 / sprite.texture.frame.height\n        );\n\n        mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n\n        return mappedMatrix;\n    }\n\n    public destroy?: () => void;\n}\n","import type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { Bounds } from './Bounds';\n\nexport function getGlobalRenderableBounds(renderables: Renderable[], bounds: Bounds): Bounds\n{\n    bounds.clear();\n\n    // instead of copying the matrix each time we are assigning it in bounds\n    // this is a performance hack :D\n    // so we need to restore the matrix after we are done\n\n    const tempMatrix = bounds.matrix;\n\n    for (let i = 0; i < renderables.length; i++)\n    {\n        const renderable = renderables[i];\n\n        if (renderable.globalDisplayStatus < 0b111)\n        {\n            continue;\n        }\n\n        bounds.matrix = renderable.worldTransform;\n        bounds.addBounds(renderable.bounds);\n    }\n\n    bounds.matrix = tempMatrix;\n\n    return bounds;\n}\n","import { extensions } from '../extensions/Extensions';\nimport { FilterPipe } from './FilterPipe';\nimport { FilterSystem } from './FilterSystem';\n\nextensions.add(FilterSystem);\nextensions.add(FilterPipe);\n","import { DOMAdapter } from '../../../../environment/adapter';\nimport { nextPow2 } from '../../../../maths/misc/pow2';\n\nimport type { ICanvas, ICanvasRenderingContext2DSettings } from '../../../../environment/canvas/ICanvas';\nimport type { ICanvasRenderingContext2D } from '../../../../environment/canvas/ICanvasRenderingContext2D';\n\nexport interface CanvasAndContext\n{\n    canvas: ICanvas;\n    context: ICanvasRenderingContext2D;\n}\n\n/**\n * Texture pool, used by FilterSystem and plugins.\n *\n * Stores collection of temporary pow2 or screen-sized renderTextures\n *\n * If you use custom RenderTexturePool for your filters, you can use methods\n * `getFilterTexture` and `returnFilterTexture` same as in\n * @name CanvasPool\n * @memberof rendering\n */\nexport class CanvasPoolClass\n{\n    public canvasOptions: ICanvasRenderingContext2DSettings;\n\n    /**\n     * Allow renderTextures of the same size as screen, not just pow2\n     *\n     * Automatically sets to true after `setScreenSize`\n     * @default false\n     */\n    public enableFullScreen: boolean;\n    private _canvasPool: {[x in string | number]: CanvasAndContext[]};\n\n    constructor(canvasOptions?: ICanvasRenderingContext2DSettings)\n    {\n        this._canvasPool = Object.create(null);\n        this.canvasOptions = canvasOptions || {};\n        this.enableFullScreen = false;\n    }\n\n    /**\n     * Creates texture with params that were specified in pool constructor.\n     * @param pixelWidth - Width of texture in pixels.\n     * @param pixelHeight - Height of texture in pixels.\n     */\n    private _createCanvasAndContext(pixelWidth: number, pixelHeight: number): CanvasAndContext\n    {\n        const canvas = DOMAdapter.get().createCanvas();\n\n        canvas.width = pixelWidth;\n        canvas.height = pixelHeight;\n\n        const context = canvas.getContext('2d');\n\n        return { canvas, context };\n    }\n\n    /**\n     * Gets a Power-of-Two render texture or fullScreen texture\n     * @param minWidth - The minimum width of the render texture.\n     * @param minHeight - The minimum height of the render texture.\n     * @param resolution - The resolution of the render texture.\n     * @returns The new render texture.\n     */\n    public getOptimalCanvasAndContext(minWidth: number, minHeight: number, resolution = 1): CanvasAndContext\n    {\n        minWidth = Math.ceil((minWidth * resolution) - 1e-6);\n        minHeight = Math.ceil((minHeight * resolution) - 1e-6);\n        minWidth = nextPow2(minWidth);\n        minHeight = nextPow2(minHeight);\n\n        const key = (minWidth << 17) + (minHeight << 1);\n\n        if (!this._canvasPool[key])\n        {\n            this._canvasPool[key] = [];\n        }\n\n        let canvasAndContext = this._canvasPool[key].pop();\n\n        if (!canvasAndContext)\n        {\n            canvasAndContext = this._createCanvasAndContext(minWidth, minHeight);\n        }\n\n        return canvasAndContext;\n    }\n\n    /**\n     * Place a render texture back into the pool.\n     * @param canvasAndContext\n     */\n    public returnCanvasAndContext(canvasAndContext: CanvasAndContext): void\n    {\n        const canvas = canvasAndContext.canvas;\n        const { width, height } = canvas;\n\n        const key = (width << 17) + (height << 1);\n\n        canvasAndContext.context.clearRect(0, 0, width, height);\n\n        this._canvasPool[key].push(canvasAndContext);\n    }\n\n    public clear(): void\n    {\n        this._canvasPool = {};\n    }\n}\n\nexport const CanvasPool = new CanvasPoolClass();\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation';\n\nimport type { Topology } from '../../../rendering/renderers/shared/geometry/const';\nimport type { BatchMode } from '../../graphics/shared/GraphicsContext';\n\n/**\n * Options for the mesh geometry.\n * @memberof scene\n */\nexport interface MeshGeometryOptions\n{\n    /** The positions of the mesh. */\n    positions?: Float32Array;\n    /** The UVs of the mesh. If not provided, they will be filled with 0 and match the size of the positions. */\n    uvs?: Float32Array;\n    /** The indices of the mesh. */\n    indices?: Uint32Array;\n    /** The topology of the mesh. */\n    topology?: Topology;\n    /** Whether to shrink the buffers to fit the data. */\n    shrinkBuffersToFit?: boolean;\n}\n\n/**\n * A geometry used to batch multiple meshes with the same texture.\n * @memberof scene\n */\nexport class MeshGeometry extends Geometry\n{\n    public static defaultOptions: MeshGeometryOptions = {\n        topology: 'triangle-list',\n        shrinkBuffersToFit: false,\n    };\n\n    public batchMode: BatchMode = 'auto';\n\n    /**\n     * @param {scene.MeshGeometryOptions} options - The options of the mesh geometry.\n     */\n    constructor(options: MeshGeometryOptions);\n    /** @deprecated since 8.0.0 */\n    constructor(positions: Float32Array, uvs: Float32Array, indices: Uint32Array);\n    constructor(...args: [MeshGeometryOptions] | [Float32Array, Float32Array, Uint32Array])\n    {\n        let options = args[0] ?? {};\n\n        if (options instanceof Float32Array)\n        {\n            // #if _DEBUG\n            deprecation(v8_0_0, 'use new MeshGeometry({ positions, uvs, indices }) instead');\n            // #endif\n\n            options = {\n                positions: options,\n                uvs: args[1],\n                indices: args[2],\n            };\n        }\n\n        options = { ...MeshGeometry.defaultOptions, ...options };\n\n        const positions = options.positions || new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n\n        let uvs = options.uvs;\n\n        if (!uvs)\n        {\n            if (options.positions)\n            {\n                uvs = new Float32Array(positions.length);\n            }\n            else\n            {\n                uvs = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);\n            }\n        }\n\n        const indices = options.indices || new Uint32Array([0, 1, 2, 0, 2, 3]);\n\n        const shrinkToFit = options.shrinkBuffersToFit;\n\n        const positionBuffer = new Buffer({\n            data: positions,\n            label: 'attribute-mesh-positions',\n            shrinkToFit,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n        });\n\n        const uvBuffer = new Buffer({\n            data: uvs,\n            label: 'attribute-mesh-uvs',\n            shrinkToFit,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST,\n        });\n\n        const indexBuffer = new Buffer({\n            data: indices,\n            label: 'index-mesh-buffer',\n            shrinkToFit,\n            usage: BufferUsage.INDEX | BufferUsage.COPY_DST,\n        });\n\n        super({\n            attributes: {\n                aPosition: {\n                    buffer: positionBuffer,\n                    format: 'float32x2',\n                    stride: 2 * 4,\n                    offset: 0,\n                },\n                aUV: {\n                    buffer: uvBuffer,\n                    format: 'float32x2',\n                    stride: 2 * 4,\n                    offset: 0,\n                },\n            },\n            indexBuffer,\n            topology: options.topology,\n        });\n    }\n\n    /** The positions of the mesh. */\n    get positions(): Float32Array\n    {\n        return this.attributes.aPosition.buffer.data as Float32Array;\n    }\n\n    /**\n     * Set the positions of the mesh.\n     * When setting the positions, its important that the uvs array is at least as long as the positions array.\n     * otherwise the geometry will not be valid.\n     * @param {Float32Array} value - The positions of the mesh.\n     */\n    set positions(value: Float32Array)\n    {\n        this.attributes.aPosition.buffer.data = value;\n    }\n\n    /** The UVs of the mesh. */\n    get uvs(): Float32Array\n    {\n        return this.attributes.aUV.buffer.data as Float32Array;\n    }\n\n    /**\n     * Set the UVs of the mesh.\n     * Its important that the uvs array you set is at least as long as the positions array.\n     * otherwise the geometry will not be valid.\n     * @param {Float32Array} value - The UVs of the mesh.\n     */\n    set uvs(value: Float32Array)\n    {\n        this.attributes.aUV.buffer.data = value;\n    }\n\n    /** The indices of the mesh. */\n    get indices(): Uint32Array\n    {\n        return this.indexBuffer.data as Uint32Array;\n    }\n\n    set indices(value: Uint32Array)\n    {\n        this.indexBuffer.data = value;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { BindGroup } from '../../../rendering/renderers/gpu/shader/BindGroup';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform';\nimport { BatchableMesh } from './BatchableMesh';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type {\n    InstructionPipe,\n    RenderPipe\n} from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Container } from '../../container/Container';\nimport type { Mesh } from './Mesh';\n\n// TODO Record mode is a P2, will get back to this as it's not a priority\n// const recordMode = true;\n\ninterface MeshData\n{\n    batched: boolean;\n    indexSize: number;\n    vertexSize: number;\n}\n\nexport interface MeshAdaptor\n{\n    init(): void;\n    execute(meshPipe: MeshPipe, mesh: Mesh): void;\n    destroy(): void;\n}\n\nexport class MeshPipe implements RenderPipe<Mesh>, InstructionPipe<Mesh>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'mesh',\n    } as const;\n\n    public localUniforms = new UniformGroup({\n        uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n        uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n        uRound: { value: 0, type: 'f32' },\n    });\n\n    public localUniformsBindGroup = new BindGroup({\n        0: this.localUniforms,\n    });\n\n    public renderer: Renderer;\n\n    private _meshDataHash: Record<number, MeshData> = Object.create(null);\n    private _gpuBatchableMeshHash: Record<number, BatchableMesh> = Object.create(null);\n    private _adaptor: MeshAdaptor;\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer, adaptor: MeshAdaptor)\n    {\n        this.renderer = renderer;\n        this._adaptor = adaptor;\n\n        this._adaptor.init();\n\n        renderer.renderableGC.addManagedHash(this, '_gpuBatchableMeshHash');\n        renderer.renderableGC.addManagedHash(this, '_meshDataHash');\n    }\n\n    public validateRenderable(mesh: Mesh): boolean\n    {\n        const meshData = this._getMeshData(mesh);\n\n        const wasBatched = meshData.batched;\n\n        const isBatched = mesh.batched;\n\n        meshData.batched = isBatched;\n\n        if (wasBatched !== isBatched)\n        {\n            return true;\n        }\n        else if (isBatched)\n        {\n            const geometry = mesh._geometry;\n\n            // no need to break the batch if it's the same size\n            if (geometry.indices.length !== meshData.indexSize\n                    || geometry.positions.length !== meshData.vertexSize)\n            {\n                meshData.indexSize = geometry.indices.length;\n                meshData.vertexSize = geometry.positions.length;\n\n                return true;\n            }\n\n            const batchableMesh = this._getBatchableMesh(mesh);\n\n            if (batchableMesh.texture.uid !== mesh._texture.uid)\n            {\n                batchableMesh._textureMatrixUpdateId = -1;\n            }\n\n            return !batchableMesh._batcher.checkAndUpdateTexture(\n                batchableMesh,\n                mesh._texture\n            );\n        }\n\n        return false;\n    }\n\n    public addRenderable(mesh: Mesh, instructionSet: InstructionSet)\n    {\n        const batcher = this.renderer.renderPipes.batch;\n\n        const { batched } = this._getMeshData(mesh);\n\n        if (batched)\n        {\n            const gpuBatchableMesh = this._getBatchableMesh(mesh);\n\n            gpuBatchableMesh.setTexture(mesh._texture);\n            gpuBatchableMesh.geometry = mesh._geometry;\n\n            batcher.addToBatch(gpuBatchableMesh, instructionSet);\n        }\n        else\n        {\n            batcher.break(instructionSet);\n\n            instructionSet.add(mesh);\n        }\n    }\n\n    public updateRenderable(mesh: Mesh)\n    {\n        if (mesh.batched)\n        {\n            const gpuBatchableMesh = this._gpuBatchableMeshHash[mesh.uid];\n\n            gpuBatchableMesh.setTexture(mesh._texture);\n\n            gpuBatchableMesh.geometry = mesh._geometry;\n\n            gpuBatchableMesh._batcher.updateElement(gpuBatchableMesh);\n        }\n    }\n\n    public destroyRenderable(mesh: Mesh)\n    {\n        this._meshDataHash[mesh.uid] = null;\n\n        const gpuMesh = this._gpuBatchableMeshHash[mesh.uid];\n\n        if (gpuMesh)\n        {\n            BigPool.return(gpuMesh as PoolItem);\n            this._gpuBatchableMeshHash[mesh.uid] = null;\n        }\n\n        mesh.off('destroyed', this._destroyRenderableBound);\n    }\n\n    public execute(mesh: Mesh)\n    {\n        if (!mesh.isRenderable) return;\n\n        mesh.state.blendMode = getAdjustedBlendModeBlend(mesh.groupBlendMode, mesh.texture._source);\n\n        const localUniforms = this.localUniforms;\n\n        localUniforms.uniforms.uTransformMatrix = mesh.groupTransform;\n        localUniforms.uniforms.uRound = this.renderer._roundPixels | mesh._roundPixels;\n        localUniforms.update();\n\n        color32BitToUniform(\n            mesh.groupColorAlpha,\n            localUniforms.uniforms.uColor,\n            0\n        );\n\n        this._adaptor.execute(this, mesh);\n    }\n\n    private _getMeshData(mesh: Mesh): MeshData\n    {\n        return this._meshDataHash[mesh.uid] || this._initMeshData(mesh);\n    }\n\n    private _initMeshData(mesh: Mesh): MeshData\n    {\n        this._meshDataHash[mesh.uid] = {\n            batched: mesh.batched,\n            indexSize: mesh._geometry.indices?.length,\n            vertexSize: mesh._geometry.positions?.length,\n        };\n\n        mesh.on('destroyed', this._destroyRenderableBound);\n\n        return this._meshDataHash[mesh.uid];\n    }\n\n    private _getBatchableMesh(mesh: Mesh): BatchableMesh\n    {\n        return this._gpuBatchableMeshHash[mesh.uid] || this._initBatchableMesh(mesh);\n    }\n\n    private _initBatchableMesh(mesh: Mesh): BatchableMesh\n    {\n        // TODO - make this batchable graphics??\n        const gpuMesh: BatchableMesh = BigPool.get(BatchableMesh);\n\n        gpuMesh.renderable = mesh;\n        gpuMesh.setTexture(mesh._texture);\n        gpuMesh.transform = mesh.groupTransform;\n        gpuMesh.roundPixels = (this.renderer._roundPixels | mesh._roundPixels) as 0 | 1;\n\n        this._gpuBatchableMeshHash[mesh.uid] = gpuMesh;\n\n        return gpuMesh;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuBatchableMeshHash)\n        {\n            if (this._gpuBatchableMeshHash[i])\n            {\n                BigPool.return(this._gpuBatchableMeshHash[i] as PoolItem);\n            }\n        }\n\n        this._gpuBatchableMeshHash = null;\n        this._meshDataHash = null;\n\n        this.localUniforms = null;\n        this.localUniformsBindGroup = null;\n\n        this._adaptor.destroy();\n        this._adaptor = null;\n\n        this.renderer = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { MeshPipe } from './shared/MeshPipe';\n\nextensions.add(MeshPipe);\n","import EventEmitter from 'eventemitter3';\nimport { Color, type ColorSource } from '../../color/Color';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { FillGradient } from '../graphics/shared/fill/FillGradient';\nimport { FillPattern } from '../graphics/shared/fill/FillPattern';\nimport { GraphicsContext } from '../graphics/shared/GraphicsContext';\nimport {\n    toFillStyle,\n    toStrokeStyle\n} from '../graphics/shared/utils/convertFillInputToFillStyle';\nimport { generateTextStyleKey } from './utils/generateTextStyleKey';\n\nimport type { TextureDestroyOptions, TypeOrBool } from '../container/destroyTypes';\nimport type {\n    ConvertedFillStyle,\n    ConvertedStrokeStyle,\n    FillInput,\n    FillStyle,\n    StrokeInput,\n    StrokeStyle\n} from '../graphics/shared/FillTypes';\n\nexport type TextStyleAlign = 'left' | 'center' | 'right' | 'justify';\nexport type TextStyleFill = string | string[] | number | number[] | CanvasGradient | CanvasPattern;\nexport type TextStyleFontStyle = 'normal' | 'italic' | 'oblique';\nexport type TextStyleFontVariant = 'normal' | 'small-caps';\n// eslint-disable-next-line max-len\nexport type TextStyleFontWeight = 'normal' | 'bold' | 'bolder' | 'lighter' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';\nexport type TextStyleLineJoin = 'miter' | 'round' | 'bevel';\nexport type TextStyleTextBaseline = 'alphabetic' | 'top' | 'hanging' | 'middle' | 'ideographic' | 'bottom';\nexport type TextStyleWhiteSpace = 'normal' | 'pre' | 'pre-line';\n\n/**\n * A collection of text related classes.\n * @namespace text\n */\n\n/**\n * A drop shadow effect.\n * @memberof text\n */\nexport type TextDropShadow = {\n    /** Set alpha for the drop shadow  */\n    alpha: number;\n    /** Set a angle of the drop shadow */\n    angle: number;\n    /** Set a shadow blur radius */\n    blur: number;\n    /** A fill style to be used on the  e.g., 'red', '#00FF00' */\n    color: ColorSource;\n    /** Set a distance of the drop shadow */\n    distance: number;\n};\n\n/**\n * Constructor options used for `TextStyle` instances.\n * ```js\n * const textStyle = new TextStyle({\n *    fontSize: 12,\n *    fill: 'black',\n * });\n * ```\n * @see {@link text.TextStyle}\n * @memberof text\n */\nexport interface TextStyleOptions\n{\n    /**\n     * Alignment for multiline text, does not affect single line text\n     * @type {'left'|'center'|'right'|'justify'}\n     */\n    align?: TextStyleAlign;\n    /** Indicates if lines can be wrapped within words, it needs `wordWrap` to be set to `true` */\n    breakWords?: boolean;\n    /** Set a drop shadow for the text */\n    dropShadow?: boolean | Partial<TextDropShadow>;\n    /**\n     * A canvas fillstyle that will be used on the text e.g., 'red', '#00FF00'.\n     * Can be an array to create a gradient, e.g., `['#000000','#FFFFFF']`\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     * @type {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n     */\n    fill?: FillInput;\n    /** The font family, can be a single font name, or a list of names where the first is the preferred font. */\n    fontFamily?: string | string[];\n    /** The font size (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em') */\n    fontSize?: number | string;\n    /**\n     * The font style.\n     * @type {'normal'|'italic'|'oblique'}\n     */\n    fontStyle?: TextStyleFontStyle;\n    /**\n     * The font variant.\n     * @type {'normal'|'small-caps'}\n     */\n    fontVariant?: TextStyleFontVariant;\n    /**\n     * The font weight.\n     * @type {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n     */\n    fontWeight?: TextStyleFontWeight;\n    /** The height of the line, a number that represents the vertical space that a letter uses. */\n    leading?: number;\n    /** The amount of spacing between letters, default is 0 */\n    letterSpacing?: number;\n    /** The line height, a number that represents the vertical space that a letter uses */\n    lineHeight?: number;\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from\n     * happening by adding padding to all sides of the text.\n     */\n    padding?: number;\n    /** A canvas fillstyle that will be used on the text stroke, e.g., 'blue', '#FCFF00' */\n    stroke?: StrokeInput;\n    /**\n     * The baseline of the text that is rendered.\n     * @type {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n     */\n    textBaseline?: TextStyleTextBaseline;\n    trim?: boolean,\n    /**\n     * Determines whether newlines & spaces are collapsed or preserved \"normal\"\n     * (collapse, collapse), \"pre\" (preserve, preserve) | \"pre-line\" (preserve,\n     * collapse). It needs wordWrap to be set to true.\n     * @type {'normal'|'pre'|'pre-line'}\n     */\n    whiteSpace?: TextStyleWhiteSpace;\n    /** Indicates if word wrap should be used */\n    wordWrap?: boolean;\n    /** The width at which text will wrap, it needs wordWrap to be set to true */\n    wordWrapWidth?: number;\n}\n\n/**\n * A TextStyle Object contains information to decorate a Text objects.\n *\n * An instance can be shared between multiple Text objects; then changing the style will update all text objects using it.\n * @memberof text\n * @example\n * import { TextStyle } from 'pixi.js';\n * const style = new TextStyle({\n *   fontFamily: ['Helvetica', 'Arial', 'sans-serif'],\n *   fontSize: 36,\n * });\n */\nexport class TextStyle extends EventEmitter<{\n    update: TextDropShadow\n}>\n{\n    /** The default drop shadow settings */\n    public static defaultDropShadow: TextDropShadow = {\n        /** Set alpha for the drop shadow */\n        alpha: 1,\n        /** Set a angle of the drop shadow */\n        angle: Math.PI / 6,\n        /** Set a shadow blur radius */\n        blur: 0,\n        /** A fill style to be used on the  e.g., 'red', '#00FF00' */\n        color: 'black',\n        /** Set a distance of the drop shadow */\n        distance: 5,\n    };\n\n    /** The default text style settings */\n    public static defaultTextStyle: TextStyleOptions = {\n        /**\n         * See {@link TextStyle.align}\n         * @type {'left'|'center'|'right'|'justify'}\n         */\n        align: 'left',\n        /** See {@link TextStyle.breakWords} */\n        breakWords: false,\n        /** See {@link TextStyle.dropShadow} */\n        dropShadow:  null,\n        /**\n         * See {@link TextStyle.fill}\n         * @type {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n         */\n        fill: 'black',\n        /**\n         * See {@link TextStyle.fontFamily}\n         * @type {string|string[]}\n         */\n        fontFamily: 'Arial',\n        /**\n         * See {@link TextStyle.fontSize}\n         * @type {number|string}\n         */\n        fontSize: 26,\n        /**\n         * See {@link TextStyle.fontStyle}\n         * @type {'normal'|'italic'|'oblique'}\n         */\n        fontStyle: 'normal',\n        /**\n         * See {@link TextStyle.fontVariant}\n         * @type {'normal'|'small-caps'}\n         */\n        fontVariant: 'normal',\n        /**\n         * See {@link TextStyle.fontWeight}\n         * @type {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n         */\n        fontWeight: 'normal',\n        /** See {@link TextStyle.leading} */\n        leading: 0,\n        /** See {@link TextStyle.letterSpacing} */\n        letterSpacing: 0,\n        /** See {@link TextStyle.lineHeight} */\n        lineHeight: 0,\n        /** See {@link TextStyle.padding} */\n        padding: 0,\n        /**\n         * See {@link TextStyle.stroke}\n         * @type {string|number}\n         */\n        stroke: null,\n        /**\n         * See {@link TextStyle.textBaseline}\n         * @type {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n         */\n        textBaseline: 'alphabetic',\n        /** See {@link TextStyle.trim} */\n        trim: false,\n        /**\n         * See {@link TextStyle.whiteSpace}\n         * @type {'normal'|'pre'|'pre-line'}\n         */\n        whiteSpace: 'pre',\n        /** See {@link TextStyle.wordWrap} */\n        wordWrap: false,\n        /** See {@link TextStyle.wordWrapWidth} */\n        wordWrapWidth: 100,\n    };\n\n    // colors!!\n    public _fill: ConvertedFillStyle;\n    private _originalFill: FillInput;\n\n    public _stroke: ConvertedStrokeStyle;\n    private _originalStroke: StrokeInput;\n\n    private _dropShadow: TextDropShadow;\n\n    private _fontFamily: string | string[];\n    private _fontSize: number;\n    private _fontStyle: TextStyleFontStyle;\n    private _fontVariant: TextStyleFontVariant;\n    private _fontWeight: TextStyleFontWeight;\n\n    private _breakWords: boolean;\n    private _align: TextStyleAlign;\n    private _leading: number;\n    private _letterSpacing: number;\n    private _lineHeight: number;\n\n    private _textBaseline: TextStyleTextBaseline;\n    private _whiteSpace: TextStyleWhiteSpace;\n    private _wordWrap: boolean;\n    private _wordWrapWidth: number;\n\n    private _padding: number;\n\n    protected _styleKey: string;\n    private _trim: boolean;\n\n    constructor(style: Partial<TextStyleOptions> = {})\n    {\n        super();\n\n        convertV7Tov8Style(style);\n\n        const fullStyle = { ...TextStyle.defaultTextStyle, ...style };\n\n        for (const key in fullStyle)\n        {\n            const thisKey = key as keyof typeof this;\n\n            this[thisKey] = fullStyle[key as keyof TextStyleOptions] as any;\n        }\n\n        this.update();\n    }\n\n    /**\n     * Alignment for multiline text, does not affect single line text.\n     * @member {'left'|'center'|'right'|'justify'}\n     */\n    get align(): TextStyleAlign { return this._align; }\n    set align(value: TextStyleAlign) { this._align = value; this.update(); }\n    /** Indicates if lines can be wrapped within words, it needs wordWrap to be set to true. */\n    get breakWords(): boolean { return this._breakWords; }\n    set breakWords(value: boolean) { this._breakWords = value; this.update(); }\n    /** Set a drop shadow for the text. */\n    get dropShadow(): TextDropShadow { return this._dropShadow; }\n    set dropShadow(value: boolean | TextDropShadow)\n    {\n        if (value !== null && typeof value === 'object')\n        {\n            this._dropShadow = this._createProxy({ ...TextStyle.defaultDropShadow, ...value });\n        }\n        else\n        {\n            this._dropShadow = value ? this._createProxy({ ...TextStyle.defaultDropShadow }) : null;\n        }\n\n        this.update();\n    }\n    /** The font family, can be a single font name, or a list of names where the first is the preferred font. */\n    get fontFamily(): string | string[] { return this._fontFamily; }\n    set fontFamily(value: string | string[]) { this._fontFamily = value; this.update(); }\n    /** The font size (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em') */\n    get fontSize(): number { return this._fontSize; }\n    set fontSize(value: string | number)\n    {\n        if (typeof value === 'string')\n        {\n            // eg '34px' to number\n            this._fontSize = parseInt(value as string, 10);\n        }\n        else\n        {\n            this._fontSize = value as number;\n        }\n        this.update();\n    }\n    /**\n     * The font style.\n     * @member {'normal'|'italic'|'oblique'}\n     */\n    get fontStyle(): TextStyleFontStyle { return this._fontStyle; }\n    set fontStyle(value: TextStyleFontStyle)\n    {\n        this._fontStyle = value.toLowerCase() as TextStyleFontStyle;\n        this.update();\n    }\n    /**\n     * The font variant.\n     * @member {'normal'|'small-caps'}\n     */\n    get fontVariant(): TextStyleFontVariant { return this._fontVariant; }\n    set fontVariant(value: TextStyleFontVariant) { this._fontVariant = value; this.update(); }\n    /**\n     * The font weight.\n     * @member {'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900'}\n     */\n    get fontWeight(): TextStyleFontWeight { return this._fontWeight; }\n    set fontWeight(value: TextStyleFontWeight) { this._fontWeight = value; this.update(); }\n    /** The space between lines. */\n    get leading(): number { return this._leading; }\n    set leading(value: number) { this._leading = value; this.update(); }\n    /** The amount of spacing between letters, default is 0. */\n    get letterSpacing(): number { return this._letterSpacing; }\n    set letterSpacing(value: number) { this._letterSpacing = value; this.update(); }\n    /** The line height, a number that represents the vertical space that a letter uses. */\n    get lineHeight(): number { return this._lineHeight; }\n    set lineHeight(value: number) { this._lineHeight = value; this.update(); }\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n     * by adding padding to all sides of the text.\n     */\n    get padding(): number { return this._padding; }\n    set padding(value: number) { this._padding = value; this.update(); }\n\n    /** Trim transparent borders. This is an expensive operation so only use this if you have to! */\n    get trim(): boolean { return this._trim; }\n    set trim(value: boolean) { this._trim = value; this.update(); }\n    /**\n     * The baseline of the text that is rendered.\n     * @member {'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom'}\n     */\n    get textBaseline(): TextStyleTextBaseline { return this._textBaseline; }\n    set textBaseline(value: TextStyleTextBaseline) { this._textBaseline = value; this.update(); }\n    /**\n     * How newlines and spaces should be handled.\n     * Default is 'pre' (preserve, preserve).\n     *\n     *  value       | New lines     |   Spaces\n     *  ---         | ---           |   ---\n     * 'normal'     | Collapse      |   Collapse\n     * 'pre'        | Preserve      |   Preserve\n     * 'pre-line'   | Preserve      |   Collapse\n     * @member {'normal'|'pre'|'pre-line'}\n     */\n    get whiteSpace(): TextStyleWhiteSpace { return this._whiteSpace; }\n    set whiteSpace(value: TextStyleWhiteSpace) { this._whiteSpace = value; this.update(); }\n    /** Indicates if word wrap should be used. */\n    get wordWrap(): boolean { return this._wordWrap; }\n    set wordWrap(value: boolean) { this._wordWrap = value; this.update(); }\n    /** The width at which text will wrap, it needs wordWrap to be set to true. */\n    get wordWrapWidth(): number { return this._wordWrapWidth; }\n    set wordWrapWidth(value: number) { this._wordWrapWidth = value; this.update(); }\n\n    /**\n     * The fill style that will be used to color the text.\n     * This can be:\n     * - A color string like 'red', '#00FF00', or 'rgba(255,0,0,0.5)'\n     * - A hex number like 0xff0000 for red\n     * - A FillStyle object with properties like { color: 0xff0000, alpha: 0.5 }\n     * - A FillGradient for gradient fills\n     * - A FillPattern for pattern/texture fills\n     *\n     * When using a FillGradient, vertical gradients (angle of 90 degrees) are applied per line of text,\n     * while gradients at any other angle are spread across the entire text body as a whole.\n     * @example\n     * // Vertical gradient applied per line\n     * const verticalGradient = new FillGradient(0, 0, 0, 1)\n     *     .addColorStop(0, 0xff0000)\n     *     .addColorStop(1, 0x0000ff);\n     *\n     * const text = new Text({\n     *     text: 'Line 1\\nLine 2',\n     *     style: { fill: verticalGradient }\n     * });\n     *\n     * To manage the gradient in a global scope, set the textureSpace property of the FillGradient to 'global'.\n     * @type {string|number|FillStyle|FillGradient|FillPattern}\n     */\n    get fill(): FillInput\n    {\n        return this._originalFill;\n    }\n\n    set fill(value: FillInput)\n    {\n        if (value === this._originalFill) return;\n\n        this._originalFill = value;\n\n        if (this._isFillStyle(value))\n        {\n            this._originalFill = this._createProxy({ ...GraphicsContext.defaultFillStyle, ...value }, () =>\n            {\n                this._fill = toFillStyle(\n                    { ...this._originalFill as FillStyle },\n                    GraphicsContext.defaultFillStyle\n                );\n            });\n        }\n\n        this._fill = toFillStyle(\n            value === 0x0 ? 'black' : value,\n            GraphicsContext.defaultFillStyle\n        );\n        this.update();\n    }\n\n    /** A fillstyle that will be used on the text stroke, e.g., 'blue', '#FCFF00'. */\n    get stroke(): StrokeInput\n    {\n        return this._originalStroke;\n    }\n\n    set stroke(value: StrokeInput)\n    {\n        if (value === this._originalStroke) return;\n\n        this._originalStroke = value;\n\n        if (this._isFillStyle(value))\n        {\n            this._originalStroke = this._createProxy({ ...GraphicsContext.defaultStrokeStyle, ...value }, () =>\n            {\n                this._stroke = toStrokeStyle(\n                    { ...this._originalStroke as StrokeStyle },\n                    GraphicsContext.defaultStrokeStyle\n                );\n            });\n        }\n\n        this._stroke = toStrokeStyle(value, GraphicsContext.defaultStrokeStyle);\n        this.update();\n    }\n\n    protected _generateKey(): string\n    {\n        this._styleKey = generateTextStyleKey(this);\n\n        return this._styleKey;\n    }\n\n    public update()\n    {\n        this._styleKey = null;\n        this.emit('update', this);\n    }\n\n    /** Resets all properties to the default values */\n    public reset()\n    {\n        const defaultStyle = TextStyle.defaultTextStyle;\n\n        for (const key in defaultStyle)\n        {\n            this[key as keyof typeof this] = defaultStyle[key as keyof TextStyleOptions] as any;\n        }\n    }\n\n    get styleKey()\n    {\n        return this._styleKey || this._generateKey();\n    }\n\n    /**\n     * Creates a new TextStyle object with the same values as this one.\n     * @returns New cloned TextStyle object\n     */\n    public clone(): TextStyle\n    {\n        return new TextStyle({\n            align: this.align,\n            breakWords: this.breakWords,\n            dropShadow: this._dropShadow ? { ...this._dropShadow } : null,\n            fill: this._fill,\n            fontFamily: this.fontFamily,\n            fontSize: this.fontSize,\n            fontStyle: this.fontStyle,\n            fontVariant: this.fontVariant,\n            fontWeight: this.fontWeight,\n            leading: this.leading,\n            letterSpacing: this.letterSpacing,\n            lineHeight: this.lineHeight,\n            padding: this.padding,\n            stroke: this._stroke,\n            textBaseline: this.textBaseline,\n            whiteSpace: this.whiteSpace,\n            wordWrap: this.wordWrap,\n            wordWrapWidth: this.wordWrapWidth,\n        });\n    }\n\n    /**\n     * Destroys this text style.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.texture=false] - Should it destroy the texture of the this style\n     * @param {boolean} [options.textureSource=false] - Should it destroy the textureSource of the this style\n     */\n    public destroy(options: TypeOrBool<TextureDestroyOptions> = false)\n    {\n        this.removeAllListeners();\n\n        const destroyTexture = typeof options === 'boolean' ? options : options?.texture;\n\n        if (destroyTexture)\n        {\n            const destroyTextureSource = typeof options === 'boolean' ? options : options?.textureSource;\n\n            if (this._fill?.texture)\n            {\n                this._fill.texture.destroy(destroyTextureSource);\n            }\n\n            if ((this._originalFill as FillStyle)?.texture)\n            {\n                (this._originalFill as FillStyle).texture.destroy(destroyTextureSource);\n            }\n\n            if (this._stroke?.texture)\n            {\n                this._stroke.texture.destroy(destroyTextureSource);\n            }\n\n            if ((this._originalStroke as FillStyle)?.texture)\n            {\n                (this._originalStroke as FillStyle).texture.destroy(destroyTextureSource);\n            }\n        }\n\n        this._fill = null;\n        this._stroke = null;\n        this.dropShadow = null;\n        this._originalStroke = null;\n        this._originalFill = null;\n    }\n\n    private _createProxy<T extends object>(value: T, cb?: (property: string, newValue: any) => void): T\n    {\n        return new Proxy<T>(value, {\n            set: (target, property, newValue) =>\n            {\n                target[property as keyof T] = newValue;\n                cb?.(property as string, newValue);\n                this.update();\n\n                return true;\n            }\n        });\n    }\n\n    private _isFillStyle(value: FillInput): value is FillStyle\n    {\n        return ((value ?? null) !== null\n            && !(Color.isColorLike(value) || value instanceof FillGradient || value instanceof FillPattern));\n    }\n}\n\nfunction convertV7Tov8Style(style: TextStyleOptions)\n{\n    const oldStyle = style as TextStyleOptions & {\n        dropShadowAlpha?: number;\n        dropShadowAngle?: number;\n        dropShadowBlur?: number;\n        dropShadowColor?: number;\n        dropShadowDistance?: number;\n        fillGradientStops?: number[];\n        strokeThickness?: number;\n    };\n\n    if (typeof oldStyle.dropShadow === 'boolean' && oldStyle.dropShadow)\n    {\n        const defaults = TextStyle.defaultDropShadow;\n\n        style.dropShadow = {\n            alpha: oldStyle.dropShadowAlpha ?? defaults.alpha,\n            angle: oldStyle.dropShadowAngle ?? defaults.angle,\n            blur: oldStyle.dropShadowBlur ?? defaults.blur,\n            color: oldStyle.dropShadowColor ?? defaults.color,\n            distance:   oldStyle.dropShadowDistance ?? defaults.distance,\n        };\n    }\n\n    if (oldStyle.strokeThickness !== undefined)\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'strokeThickness is now a part of stroke');\n        // #endif\n\n        const color = oldStyle.stroke;\n        let obj: FillStyle = {};\n\n        // handles stroke: 0x0, stroke: { r: 0, g: 0, b: 0, a: 0 } stroke: new Color(0x0)\n        if (Color.isColorLike(color as ColorSource))\n        {\n            obj.color = color as ColorSource;\n        }\n        // handles stroke: new FillGradient()\n        else if (color instanceof FillGradient || color instanceof FillPattern)\n        {\n            obj.fill = color as FillGradient | FillPattern;\n        }\n        // handles stroke: { color: 0x0 } or stroke: { fill: new FillGradient() }\n        else if (Object.hasOwnProperty.call(color, 'color') || Object.hasOwnProperty.call(color, 'fill'))\n        {\n            obj = color as FillStyle;\n        }\n        else\n        {\n            throw new Error('Invalid stroke value.');\n        }\n\n        style.stroke = {\n            ...obj,\n            width: oldStyle.strokeThickness\n        };\n    }\n\n    if (Array.isArray(oldStyle.fillGradientStops))\n    {\n        // #if _DEBUG\n        deprecation(v8_0_0, 'gradient fill is now a fill pattern: `new FillGradient(...)`');\n        // #endif\n\n        let fontSize: number;\n\n        // eslint-disable-next-line no-eq-null, eqeqeq\n        if (style.fontSize == null)\n        {\n            style.fontSize = TextStyle.defaultTextStyle.fontSize;\n        }\n        else if (typeof style.fontSize === 'string')\n        {\n            // eg '34px' to number\n            fontSize = parseInt(style.fontSize as string, 10);\n        }\n        else\n        {\n            fontSize = style.fontSize as number;\n        }\n\n        const gradientFill = new FillGradient({\n            start: { x: 0, y: 0 },\n            end: { x: 0, y: (fontSize || 0) * 1.7 },\n        });\n\n        const fills: number[] = oldStyle.fillGradientStops\n            .map((color: ColorSource) => Color.shared.setValue(color).toNumber());\n\n        fills.forEach((number, index) =>\n        {\n            const ratio = index / (fills.length - 1);\n\n            gradientFill.addColorStop(ratio, number);\n        });\n\n        style.fill = {\n            fill: gradientFill\n        };\n    }\n}\n\n","import { TexturePool } from '../../../rendering/renderers/shared/texture/TexturePool';\nimport { Bounds } from '../../container/bounds/Bounds';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { Texture } from '../../../rendering/renderers/shared/texture/Texture';\n\nconst tempBounds = new Bounds();\n\n/**\n * Takes an image and creates a texture from it, using a power of 2 texture from the texture pool.\n * Remember to return the texture when you don't need it any more!\n * @param image - The image to create a texture from\n * @param width - the frame width of the texture\n * @param height - the frame height of the texture\n * @param resolution - The resolution of the texture\n * @returns - The texture\n */\nexport function getPo2TextureFromSource(\n    image: HTMLImageElement | HTMLCanvasElement | ICanvas,\n    width: number,\n    height: number,\n    resolution: number\n): Texture\n{\n    const bounds = tempBounds;\n\n    bounds.minX = 0;\n    bounds.minY = 0;\n\n    bounds.maxX = (image.width / resolution) | 0;\n    bounds.maxY = (image.height / resolution) | 0;\n\n    const texture = TexturePool.getOptimalTexture(\n        bounds.width,\n        bounds.height,\n        resolution,\n        false\n    );\n\n    texture.source.uploadMethodId = 'image';\n    texture.source.resource = image;\n    texture.source.alphaMode = 'premultiply-alpha-on-upload';\n\n    texture.frame.width = width / resolution;\n    texture.frame.height = height / resolution;\n\n    // We want to update the resource on the GPU,\n    // but we do not want to resize the texture.\n    // calling `texture.source.update` will fit the resource to the texture\n    // causing a resize of the texture on the GPU.\n    // which is not what we want!\n    texture.source.emit('update', texture.source);\n\n    texture.updateUvs();\n\n    return texture;\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableSprite } from '../sprite/BatchableSprite';\nimport { updateTextBounds } from '../text/utils/updateTextBounds';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { Container } from '../container/Container';\nimport type { HTMLText } from './HTMLText';\nimport type { HTMLTextStyle } from './HTMLTextStyle';\n\nexport class HTMLTextPipe implements RenderPipe<HTMLText>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'htmlText',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _gpuText: Record<number, {\n        textureNeedsUploading: boolean;\n        generatingTexture: boolean;\n        texture: Texture,\n        currentKey: string,\n        batchableSprite: BatchableSprite,\n    }> = Object.create(null);\n\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.runners.resolutionChange.add(this);\n        this._renderer.renderableGC.addManagedHash(this, '_gpuText');\n    }\n\n    public resolutionChange()\n    {\n        for (const i in this._gpuText)\n        {\n            const gpuText = this._gpuText[i];\n\n            if (!gpuText) continue;\n\n            const text = gpuText.batchableSprite.renderable as HTMLText;\n\n            if (text._autoResolution)\n            {\n                text._resolution = this._renderer.resolution;\n                text.onViewUpdate();\n            }\n        }\n    }\n\n    public validateRenderable(htmlText: HTMLText): boolean\n    {\n        const gpuText = this._getGpuText(htmlText);\n\n        const newKey = htmlText._getKey();\n\n        if (gpuText.textureNeedsUploading)\n        {\n            gpuText.textureNeedsUploading = false;\n\n            return true;\n        }\n\n        if (gpuText.currentKey !== newKey)\n        {\n            // TODO - could look into optimising this a tad!\n            // if its a single texture, then we could just swap it?\n            // same for CanvasText..\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(htmlText: HTMLText, instructionSet: InstructionSet)\n    {\n        const gpuText = this._getGpuText(htmlText);\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (htmlText._didTextUpdate)\n        {\n            this._updateText(htmlText);\n        }\n\n        this._renderer.renderPipes.batch.addToBatch(batchableSprite, instructionSet);\n    }\n\n    public updateRenderable(htmlText: HTMLText)\n    {\n        const gpuText = this._getGpuText(htmlText);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (htmlText._didTextUpdate)\n        {\n            this._updateText(htmlText);\n        }\n\n        batchableSprite._batcher.updateElement(batchableSprite);\n    }\n\n    public destroyRenderable(htmlText: HTMLText)\n    {\n        htmlText.off('destroyed', this._destroyRenderableBound);\n        this._destroyRenderableById(htmlText.uid);\n    }\n\n    private _destroyRenderableById(htmlTextUid: number)\n    {\n        const gpuText = this._gpuText[htmlTextUid];\n\n        this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n\n        BigPool.return(gpuText.batchableSprite);\n\n        this._gpuText[htmlTextUid] = null;\n    }\n\n    private _updateText(htmlText: HTMLText)\n    {\n        const newKey = htmlText._getKey();\n        const gpuText = this._getGpuText(htmlText);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.currentKey !== newKey)\n        {\n            this._updateGpuText(htmlText).catch((e) =>\n            {\n                console.error(e);\n            });\n        }\n\n        htmlText._didTextUpdate = false;\n\n        updateTextBounds(batchableSprite, htmlText);\n    }\n\n    private async _updateGpuText(htmlText: HTMLText)\n    {\n        htmlText._didTextUpdate = false;\n\n        const gpuText = this._getGpuText(htmlText);\n\n        if (gpuText.generatingTexture) return;\n\n        const newKey = htmlText._getKey();\n\n        this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n\n        gpuText.generatingTexture = true;\n\n        gpuText.currentKey = newKey;\n\n        const resolution = htmlText.resolution ?? this._renderer.resolution;\n\n        const texture = await this._renderer.htmlText.getManagedTexture(\n            htmlText.text,\n            resolution,\n            htmlText._style as HTMLTextStyle,\n            htmlText._getKey()\n        );\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        batchableSprite.texture = gpuText.texture = texture;\n\n        gpuText.generatingTexture = false;\n\n        gpuText.textureNeedsUploading = true;\n        htmlText.onViewUpdate();\n\n        updateTextBounds(batchableSprite, htmlText);\n    }\n\n    private _getGpuText(htmlText: HTMLText)\n    {\n        return this._gpuText[htmlText.uid] || this.initGpuText(htmlText);\n    }\n\n    public initGpuText(htmlText: HTMLText)\n    {\n        const gpuTextData: HTMLTextPipe['_gpuText'][number] = {\n            texture: Texture.EMPTY,\n            currentKey: '--',\n            batchableSprite: BigPool.get(BatchableSprite),\n            textureNeedsUploading: false,\n            generatingTexture: false,\n        };\n\n        const batchableSprite = gpuTextData.batchableSprite;\n\n        batchableSprite.renderable = htmlText;\n        batchableSprite.transform = htmlText.groupTransform;\n        batchableSprite.texture = Texture.EMPTY;\n        batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n        batchableSprite.roundPixels = (this._renderer._roundPixels | htmlText._roundPixels) as 0 | 1;\n\n        htmlText._resolution = htmlText._autoResolution ? this._renderer.resolution : htmlText.resolution;\n        this._gpuText[htmlText.uid] = gpuTextData;\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        htmlText.on('destroyed', this._destroyRenderableBound);\n\n        return gpuTextData;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuText)\n        {\n            this._destroyRenderableById(i as unknown as number);\n        }\n\n        this._gpuText = null;\n        this._renderer = null;\n    }\n}\n\n","import type { CanvasAndContext } from '../../rendering/renderers/shared/texture/CanvasPool';\n\nexport const nssvg = 'http://www.w3.org/2000/svg';\nexport const nsxhtml = 'http://www.w3.org/1999/xhtml';\n\nexport class HTMLTextRenderData\n{\n    public svgRoot = document.createElementNS(nssvg, 'svg');\n    public foreignObject = document.createElementNS(nssvg, 'foreignObject');\n    public domElement = document.createElementNS(nsxhtml, 'div');\n    public styleElement = document.createElementNS(nsxhtml, 'style');\n    public image = new Image();\n    public canvasAndContext?: CanvasAndContext;\n\n    constructor()\n    {\n        const { foreignObject, svgRoot, styleElement, domElement } = this;\n        // Arbitrary max size\n\n        foreignObject.setAttribute('width', '10000');\n        foreignObject.setAttribute('height', '10000');\n        foreignObject.style.overflow = 'hidden';\n\n        svgRoot.appendChild(foreignObject);\n\n        foreignObject.appendChild(styleElement);\n        foreignObject.appendChild(domElement);\n    }\n}\n","import { Color } from '../../../color/Color';\n\nimport type { ConvertedStrokeStyle } from '../../graphics/shared/FillTypes';\nimport type { TextStyle } from '../../text/TextStyle';\nimport type { HTMLTextStyle, HTMLTextStyleOptions } from '../HTMLTextStyle';\n\n/**\n * Internally converts all of the style properties into CSS equivalents.\n * @param style\n * @returns The CSS style string, for setting `style` property of root HTMLElement.\n */\nexport function textStyleToCSS(style: HTMLTextStyle): string\n{\n    const stroke = style._stroke;\n    const fill = style._fill;\n\n    const cssStyleString = [\n        `color: ${Color.shared.setValue(fill.color).toHex()}`,\n        `font-size: ${(style.fontSize as number)}px`,\n        `font-family: ${style.fontFamily}`,\n        `font-weight: ${style.fontWeight}`,\n        `font-style: ${style.fontStyle}`,\n        `font-variant: ${style.fontVariant}`,\n        `letter-spacing: ${style.letterSpacing}px`,\n        `text-align: ${style.align}`,\n        `padding: ${style.padding}px`,\n        `white-space: ${(style.whiteSpace === 'pre' && style.wordWrap) ? 'pre-wrap' : style.whiteSpace}`,\n        ...style.lineHeight ? [`line-height: ${style.lineHeight}px`] : [],\n        ...style.wordWrap ? [\n            `word-wrap: ${style.breakWords ? 'break-all' : 'break-word'}`,\n            `max-width: ${style.wordWrapWidth}px`\n        ] : [],\n        ...stroke ? [strokeToCSS(stroke)] : [],\n        ...style.dropShadow ? [dropShadowToCSS(style.dropShadow)] : [],\n        ...style.cssOverrides,\n    ].join(';');\n\n    const cssStyles = [`div { ${cssStyleString} }`];\n\n    tagStyleToCSS(style.tagStyles, cssStyles);\n\n    return cssStyles.join(' ');\n}\n\nfunction dropShadowToCSS(dropShadowStyle: TextStyle['dropShadow']): string\n{\n    const color = Color.shared.setValue(dropShadowStyle.color).setAlpha(dropShadowStyle.alpha).toHexa();\n    const x = Math.round(Math.cos(dropShadowStyle.angle) * dropShadowStyle.distance);\n    const y = Math.round(Math.sin(dropShadowStyle.angle) * dropShadowStyle.distance);\n\n    const position = `${x}px ${y}px`;\n\n    if (dropShadowStyle.blur > 0)\n    {\n        return `text-shadow: ${position} ${dropShadowStyle.blur}px ${color}`;\n    }\n\n    return `text-shadow: ${position} ${color}`;\n}\n\nfunction strokeToCSS(stroke: ConvertedStrokeStyle): string\n{\n    return [\n        `-webkit-text-stroke-width: ${stroke.width}px`,\n        `-webkit-text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n        `text-stroke-width: ${stroke.width}px`,\n        `text-stroke-color: ${Color.shared.setValue(stroke.color).toHex()}`,\n        'paint-order: stroke',\n    ].join(';');\n}\n\n/** Converts the tag styles into CSS. */\nconst templates = {\n    fontSize: `font-size: {{VALUE}}px`,\n    fontFamily: `font-family: {{VALUE}}`,\n    fontWeight: `font-weight: {{VALUE}}`,\n    fontStyle: `font-style: {{VALUE}}`,\n    fontVariant: `font-variant: {{VALUE}}`,\n    letterSpacing: `letter-spacing: {{VALUE}}px`,\n    align: `text-align: {{VALUE}}`,\n    padding: `padding: {{VALUE}}px`,\n    whiteSpace: `white-space: {{VALUE}}`,\n    lineHeight: `line-height: {{VALUE}}px`,\n    wordWrapWidth: `max-width: {{VALUE}}px`,\n};\n\n/** Converts the tag styles into CSS if modifications are required */\nconst transform = {\n    fill: (value: string) => `color: ${Color.shared.setValue(value).toHex()}`,\n    breakWords: (value: string) => `word-wrap: ${value ? 'break-all' : 'break-word'}`,\n    stroke: strokeToCSS,\n    dropShadow: dropShadowToCSS\n};\n\nfunction tagStyleToCSS(tagStyles: Record<string, HTMLTextStyleOptions>, out: string[])\n{\n    for (const i in tagStyles)\n    {\n        const tagStyle = tagStyles[i];\n        const cssTagStyle = [];\n\n        for (const j in tagStyle)\n        {\n            if (transform[j as keyof typeof transform])\n            {\n                cssTagStyle.push(transform[j as keyof typeof transform](tagStyle[j as keyof HTMLTextStyleOptions] as any));\n            }\n            else if (templates[j as keyof typeof templates])\n            {\n                // eslint-disable-next-line max-len\n                cssTagStyle.push(templates[j as keyof typeof templates].replace('{{VALUE}}', tagStyle[j as keyof HTMLTextStyleOptions] as any));\n            }\n        }\n\n        out.push(`${i} { ${cssTagStyle.join(';')} }`);\n    }\n}\n","/* eslint-disable accessor-pairs */\nimport { warn } from '../../utils/logging/warn';\nimport { TextStyle } from '../text/TextStyle';\nimport { generateTextStyleKey } from '../text/utils/generateTextStyleKey';\nimport { textStyleToCSS } from './utils/textStyleToCSS';\n\nimport type { FillInput, StrokeInput } from '../graphics/shared/FillTypes';\nimport type { TextStyleOptions } from '../text/TextStyle';\n\n/**\n * Options for HTML text style, extends {@link TextStyle}.\n * @memberof text\n * @extends text.TextStyleOptions\n * @property {string[]} [cssOverrides] - CSS style(s) to add.\n * @property {Record<string, text.HTMLTextStyleOptions>} [tagStyles] - Tag styles.\n */\nexport interface HTMLTextStyleOptions extends Omit<TextStyleOptions, 'leading' | 'textBaseline' | 'trim' >\n{\n    cssOverrides?: string[];\n    tagStyles?: Record<string, HTMLTextStyleOptions>;\n}\n\n/**\n * A TextStyle object rendered by the HTMLTextSystem.\n * @memberof text\n */\nexport class HTMLTextStyle extends TextStyle\n{\n    private _cssOverrides: string[] = [];\n    private _cssStyle: string;\n    /**\n     * List of styles per tag.\n     * @example\n     * new HTMLText({\n     *   text:'<red>Red</red>,<blue>Blue</blue>,<green>Green</green>',\n     *   style:{\n     *       fontFamily: 'DM Sans',\n     *       fill: 'white',\n     *       fontSize:100,\n     *       tagStyles:{\n     *           red:{\n     *               fill:'red',\n     *           },\n     *           blue:{\n     *               fill:'blue',\n     *           },\n     *           green:{\n     *               fill:'green',\n     *           }\n     *       }\n     *   }\n     * );\n     */\n    public tagStyles: Record<string, HTMLTextStyleOptions>;\n\n    constructor(options: HTMLTextStyleOptions = {})\n    {\n        super(options);\n\n        this.cssOverrides ??= options.cssOverrides;\n        this.tagStyles = options.tagStyles ?? {};\n    }\n\n    /** List of style overrides that will be applied to the HTML text. */\n    set cssOverrides(value: string | string[])\n    {\n        this._cssOverrides = value instanceof Array ? value : [value];\n        this.update();\n    }\n\n    get cssOverrides(): string[]\n    {\n        return this._cssOverrides;\n    }\n\n    protected override _generateKey(): string\n    {\n        this._styleKey = generateTextStyleKey(this) + this._cssOverrides.join('-');\n\n        return this._styleKey;\n    }\n\n    public update()\n    {\n        this._cssStyle = null;\n        super.update();\n    }\n\n    /**\n     * Creates a new HTMLTextStyle object with the same values as this one.\n     * @returns New cloned HTMLTextStyle object\n     */\n    public clone(): HTMLTextStyle\n    {\n        return new HTMLTextStyle({\n            align: this.align,\n            breakWords: this.breakWords,\n            dropShadow: this.dropShadow ? { ...this.dropShadow } : null,\n            fill: this._fill,\n            fontFamily: this.fontFamily,\n            fontSize: this.fontSize,\n            fontStyle: this.fontStyle,\n            fontVariant: this.fontVariant,\n            fontWeight: this.fontWeight,\n            letterSpacing: this.letterSpacing,\n            lineHeight: this.lineHeight,\n            padding: this.padding,\n            stroke: this._stroke,\n            whiteSpace: this.whiteSpace,\n            wordWrap: this.wordWrap,\n            wordWrapWidth: this.wordWrapWidth,\n            cssOverrides: this.cssOverrides,\n        });\n    }\n\n    get cssStyle(): string\n    {\n        if (!this._cssStyle)\n        {\n            this._cssStyle = textStyleToCSS(this);\n        }\n\n        return this._cssStyle;\n    }\n\n    /**\n     * Add a style override, this can be any CSS property\n     * it will override any built-in style. This is the\n     * property and the value as a string (e.g., `color: red`).\n     * This will override any other internal style.\n     * @param {string} value - CSS style(s) to add.\n     * @example\n     * style.addOverride('background-color: red');\n     */\n    public addOverride(...value: string[]): void\n    {\n        const toAdd = value.filter((v) => !this.cssOverrides.includes(v));\n\n        if (toAdd.length > 0)\n        {\n            this.cssOverrides.push(...toAdd);\n            this.update();\n        }\n    }\n\n    /**\n     * Remove any overrides that match the value.\n     * @param {string} value - CSS style to remove.\n     * @example\n     * style.removeOverride('background-color: red');\n     */\n    public removeOverride(...value: string[]): void\n    {\n        const toRemove = value.filter((v) => this.cssOverrides.includes(v));\n\n        if (toRemove.length > 0)\n        {\n            this.cssOverrides = this.cssOverrides.filter((v) => !toRemove.includes(v));\n            this.update();\n        }\n    }\n\n    override set fill(value: FillInput)\n    {\n        // if its not a string or a number, then its a texture!\n        if (typeof value !== 'string' && typeof value !== 'number')\n        {\n            // #if _DEBUG\n            warn('[HTMLTextStyle] only color fill is not supported by HTMLText');\n            // #endif\n        }\n\n        super.fill = value;\n    }\n\n    override set stroke(value: StrokeInput)\n    {\n        // if its not a string or a number, then its a texture!\n        if (value && typeof value !== 'string' && typeof value !== 'number')\n        {\n            // #if _DEBUG\n            warn('[HTMLTextStyle] only color stroke is not supported by HTMLText');\n            // #endif\n        }\n\n        super.stroke = value;\n    }\n}\n","import { loadFontAsBase64 } from './loadFontAsBase64';\n\nexport interface FontCSSStyleOptions\n{\n    fontFamily: string | string[]\n    fontWeight: string\n    fontStyle: string\n}\n\n/**\n * This will take a font url and a style and return a css string that can be injected into a style tag\n * This will contain inlined base64 font and the font family information\n * @param style - the style to generate the css for\n * @param url - The url to load the font from\n * @returns - The css string\n */\nexport async function loadFontCSS(style: FontCSSStyleOptions, url: string): Promise<string>\n{\n    const dataSrc = await loadFontAsBase64(url);\n\n    return `@font-face {\n        font-family: \"${style.fontFamily}\";\n        src: url('${dataSrc}');\n        font-weight: ${style.fontWeight};\n        font-style: ${style.fontStyle};\n    }`;\n}\n","import { DOMAdapter } from '../../../environment/adapter';\n\n/**\n * Resolves a font url to a base64 string\n * @param url - The url to load the font from\n * @returns - The font as a base64 string\n */\nexport async function loadFontAsBase64(url: string): Promise<string>\n{\n    const response = await DOMAdapter.get().fetch(url);\n\n    const blob = await response.blob();\n\n    const reader = new FileReader();\n\n    const dataSrc: string = await new Promise((resolve, reject) =>\n    {\n        reader.onloadend = () => resolve(reader.result as string);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n    });\n\n    return dataSrc;\n}\n","import { Cache } from '../../../assets/cache/Cache';\nimport { loadFontCSS } from './loadFontCSS';\n\nimport type { FontCSSStyleOptions } from './loadFontCSS';\n\nexport const FontStylePromiseCache = new Map<string, Promise<string>>();\n\n/**\n * takes the font families and returns a css string that can be injected into a style tag\n * It will contain the font families and the font urls encoded as base64\n * @param fontFamilies - The font families to load\n * @param style - The FontCSSStyleOptions to load the font with (used for the first font family)\n * @param defaultOptions - The default options to load the font with (used for the rest of the font families)\n * @param defaultOptions.fontWeight - The default font weight\n * @param defaultOptions.fontStyle - The default font style\n * @returns - The css string\n */\nexport async function getFontCss(\n    fontFamilies: string[],\n    style: FontCSSStyleOptions,\n    defaultOptions: {fontWeight: string, fontStyle: string}\n)\n{\n    const fontPromises = fontFamilies\n        .filter((fontFamily) => Cache.has(`${fontFamily}-and-url`))\n        .map((fontFamily, i) =>\n        {\n            if (!FontStylePromiseCache.has(fontFamily))\n            {\n                const { url } = Cache.get(`${fontFamily}-and-url`);\n\n                if (i === 0)\n                {\n                    FontStylePromiseCache.set(fontFamily, loadFontCSS({\n                        fontWeight: style.fontWeight,\n                        fontStyle: style.fontStyle,\n                        fontFamily,\n                    }, url));\n                }\n\n                else\n                {\n                    FontStylePromiseCache.set(fontFamily, loadFontCSS({\n                        fontWeight: defaultOptions.fontWeight,\n                        fontStyle: defaultOptions.fontStyle,\n                        fontFamily,\n                    }, url));\n                }\n            }\n\n            return FontStylePromiseCache.get(fontFamily);\n        });\n\n    return (await Promise.all(fontPromises)).join('\\n');\n}\n","import { HTMLTextRenderData } from '../HTMLTextRenderData';\n\nimport type { Size } from '../../../maths/misc/Size';\nimport type { HTMLTextStyle } from '../HTMLTextStyle';\n\nlet tempHTMLTextRenderData: HTMLTextRenderData;\n\n/**\n * Measures the HTML text without actually generating an image.\n * This is used to calculate the size of the text.\n * @param text - The text to measure\n * @param style - The style to use\n * @param fontStyleCSS - The font css to use\n * @param htmlTextRenderData - The HTMLTextRenderData to write the SVG to\n * @returns - The size of the text\n */\nexport function measureHtmlText(\n    text: string,\n    style: HTMLTextStyle,\n    fontStyleCSS?: string,\n    htmlTextRenderData?: HTMLTextRenderData\n): Size\n{\n    htmlTextRenderData ||= tempHTMLTextRenderData || (tempHTMLTextRenderData = new HTMLTextRenderData());\n\n    const { domElement, styleElement, svgRoot } = htmlTextRenderData;\n\n    domElement.innerHTML = `<style>${style.cssStyle};</style><div style='padding:0'>${text}</div>`;\n\n    domElement.setAttribute('style', 'transform-origin: top left; display: inline-block');\n\n    if (fontStyleCSS)\n    {\n        styleElement.textContent = fontStyleCSS;\n    }\n\n    // Measure the contents using the shadow DOM\n    document.body.appendChild(svgRoot);\n\n    const contentBounds = domElement.getBoundingClientRect();\n\n    svgRoot.remove();\n\n    // padding is included in the CSS calculation, so we need to remove it here\n    const doublePadding = style.padding * 2;\n\n    return {\n        width: contentBounds.width - doublePadding,\n        height: contentBounds.height - doublePadding,\n    };\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { type CanvasAndContext, CanvasPool } from '../../rendering/renderers/shared/texture/CanvasPool';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool';\nimport { type Renderer, RendererType } from '../../rendering/renderers/types';\nimport { isSafari } from '../../utils/browser/isSafari';\nimport { warn } from '../../utils/logging/warn';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { getPo2TextureFromSource } from '../text/utils/getPo2TextureFromSource';\nimport { HTMLTextRenderData } from './HTMLTextRenderData';\nimport { HTMLTextStyle } from './HTMLTextStyle';\nimport { extractFontFamilies } from './utils/extractFontFamilies';\nimport { getFontCss } from './utils/getFontCss';\nimport { getSVGUrl } from './utils/getSVGUrl';\nimport { getTemporaryCanvasFromImage } from './utils/getTemporaryCanvasFromImage';\nimport { loadSVGImage } from './utils/loadSVGImage';\nimport { measureHtmlText } from './utils/measureHtmlText';\n\nimport type { System } from '../../rendering/renderers/shared/system/System';\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { HTMLTextOptions } from './HTMLText';\nimport type { FontCSSStyleOptions } from './utils/loadFontCSS';\n\ninterface HTMLTextTexture\n{\n    texture: Texture,\n    usageCount: number,\n    promise: Promise<Texture>,\n}\n\n/**\n * System plugin to the renderer to manage HTMLText\n * @memberof rendering\n */\nexport class HTMLTextSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'htmlText',\n    } as const;\n\n    public static defaultFontOptions: FontCSSStyleOptions = {\n        fontFamily: 'Arial',\n        fontStyle: 'normal',\n        fontWeight: 'normal',\n    };\n\n    private _activeTextures: Record<string, HTMLTextTexture> = {};\n\n    /**\n     * WebGPU has a cors issue when uploading an image that is an SVGImage\n     * To get around this we need to create a canvas draw the image to it and upload that instead.\n     * Bit of a shame.. but no other work around just yet!\n     */\n    private readonly _createCanvas: boolean;\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._createCanvas = renderer.type === RendererType.WEBGPU;\n    }\n\n    public getTexture(options: HTMLTextOptions): Promise<Texture>\n    {\n        return this._buildTexturePromise(\n            options.text as string,\n            options.resolution,\n            options.style as HTMLTextStyle\n        );\n    }\n\n    public getManagedTexture(\n        text: string,\n        resolution: number,\n        style: HTMLTextStyle,\n        textKey: string\n    ): Promise<Texture>\n    {\n        if (this._activeTextures[textKey])\n        {\n            this._increaseReferenceCount(textKey);\n\n            return this._activeTextures[textKey].promise;\n        }\n\n        const promise = this._buildTexturePromise(text, resolution, style)\n            .then((texture) =>\n            {\n                this._activeTextures[textKey].texture = texture;\n\n                return texture;\n            });\n\n        this._activeTextures[textKey] = {\n            texture: null,\n            promise,\n            usageCount: 1,\n        };\n\n        return promise;\n    }\n\n    private async _buildTexturePromise(\n        text: string,\n        resolution: number,\n        style: HTMLTextStyle,\n    )\n    {\n        const htmlTextData = BigPool.get(HTMLTextRenderData);\n        const fontFamilies = extractFontFamilies(text, style);\n        const fontCSS = await getFontCss(\n            fontFamilies,\n            style,\n            HTMLTextStyle.defaultTextStyle as {fontWeight: string, fontStyle: string}\n        );\n        const measured = measureHtmlText(text, style, fontCSS, htmlTextData);\n\n        const width = Math.ceil(Math.ceil((Math.max(1, measured.width) + (style.padding * 2))) * resolution);\n        const height = Math.ceil(Math.ceil((Math.max(1, measured.height) + (style.padding * 2))) * resolution);\n\n        const image = htmlTextData.image;\n\n        // this off set will ensure we don't get any UV bleeding!\n        const uvSafeOffset = 2;\n\n        image.width = (width | 0) + uvSafeOffset;\n        image.height = (height | 0) + uvSafeOffset;\n\n        const svgURL = getSVGUrl(text, style, resolution, fontCSS, htmlTextData);\n\n        await loadSVGImage(image, svgURL, isSafari() && fontFamilies.length > 0);\n\n        const resource: HTMLImageElement | HTMLCanvasElement = image;\n        let canvasAndContext: CanvasAndContext;\n\n        if (this._createCanvas)\n        {\n            // silly webGPU workaround..\n            canvasAndContext = getTemporaryCanvasFromImage(image, resolution);\n        }\n\n        const texture = getPo2TextureFromSource(canvasAndContext ? canvasAndContext.canvas : resource,\n            image.width - uvSafeOffset,\n            image.height - uvSafeOffset,\n            resolution\n        );\n\n        if (this._createCanvas)\n        {\n            this._renderer.texture.initSource(texture.source);\n            CanvasPool.returnCanvasAndContext(canvasAndContext);\n        }\n\n        BigPool.return(htmlTextData as PoolItem);\n\n        return texture;\n    }\n\n    private _increaseReferenceCount(textKey: string)\n    {\n        this._activeTextures[textKey].usageCount++;\n    }\n\n    public decreaseReferenceCount(textKey: string)\n    {\n        const activeTexture = this._activeTextures[textKey];\n\n        // TODO SHOULD NOT BE NEEDED\n        if (!activeTexture) return;\n\n        activeTexture.usageCount--;\n\n        if (activeTexture.usageCount === 0)\n        {\n            if (activeTexture.texture)\n            {\n                this._cleanUp(activeTexture);\n            }\n            else\n            {\n                // we did not resolve...\n                activeTexture.promise.then((texture) =>\n                {\n                    activeTexture.texture = texture;\n\n                    this._cleanUp(activeTexture);\n                }).catch(() =>\n                {\n                    // #if _DEBUG\n                    warn('HTMLTextSystem: Failed to clean texture');\n                    // #endif\n                });\n            }\n\n            this._activeTextures[textKey] = null;\n        }\n    }\n\n    private _cleanUp(activeTexture: HTMLTextTexture)\n    {\n        TexturePool.returnTexture(activeTexture.texture);\n        activeTexture.texture.source.resource = null;\n        activeTexture.texture.source.uploadMethodId = 'unknown';\n    }\n\n    public getReferenceCount(textKey: string)\n    {\n        return this._activeTextures[textKey].usageCount;\n    }\n\n    public destroy(): void\n    {\n        this._activeTextures = null;\n    }\n}\n","import type { HTMLTextStyle } from '../HTMLTextStyle';\n\n/**\n * Extracts font families from text. It will extract font families from the style, tagStyles and any font families\n * embedded in the text. It should also strip out duplicates as it goes.\n * @param  text - The text to extract font families from\n * @param style - The style to extract font families from\n * @returns {string[]} - The font families as an array of strings\n */\nexport function extractFontFamilies(text: string, style: HTMLTextStyle): string[]\n{\n    const fontFamily = style.fontFamily;\n    const fontFamilies: string[] = [];\n    const dedupe: Record<string, boolean> = {};\n\n    // first ensure fonts are loaded inline..\n    // find any font..\n    const regex = /font-family:([^;\"\\s]+)/g;\n\n    const matches = text.match(regex);\n\n    function addFontFamily(fontFamily: string)\n    {\n        if (!dedupe[fontFamily])\n        {\n            fontFamilies.push(fontFamily);\n\n            dedupe[fontFamily] = true;\n        }\n    }\n\n    if (Array.isArray(fontFamily))\n    {\n        for (let i = 0; i < fontFamily.length; i++)\n        {\n            addFontFamily(fontFamily[i]);\n        }\n    }\n    else\n    {\n        addFontFamily(fontFamily);\n    }\n\n    if (matches)\n    {\n        matches.forEach((match) =>\n        {\n            const fontFamily = match.split(':')[1].trim();\n\n            addFontFamily(fontFamily);\n        });\n    }\n\n    for (const i in style.tagStyles)\n    {\n        const fontFamily = style.tagStyles[i].fontFamily;\n\n        addFontFamily(fontFamily as string);\n    }\n\n    return fontFamilies;\n}\n","import type { HTMLTextRenderData } from '../HTMLTextRenderData';\nimport type { HTMLTextStyle } from '../HTMLTextStyle';\n\n/**\n * takes all the data and returns a svg url string can be loaded by an image element\n * @param text - The text to measure\n * @param style - The style to use\n * @param resolution - The resolution to use\n * @param fontCSS - The font css to use\n * @param htmlTextData - The HTMLTextRenderData to write the SVG to\n * @returns - The SVG as a url string\n */\nexport function getSVGUrl(\n    text: string,\n    style: HTMLTextStyle,\n    resolution: number,\n    fontCSS: string,\n    htmlTextData: HTMLTextRenderData\n)\n{\n    const { domElement, styleElement, svgRoot } = htmlTextData;\n\n    domElement.innerHTML = `<style>${style.cssStyle}</style><div style='padding:0;'>${text}</div>`;\n    domElement.setAttribute('style', `transform: scale(${resolution});transform-origin: top left; display: inline-block`);\n    styleElement.textContent = fontCSS;\n\n    const { width, height } = htmlTextData.image;\n\n    svgRoot.setAttribute('width', width.toString());\n    svgRoot.setAttribute('height', height.toString());\n\n    return new XMLSerializer().serializeToString(svgRoot);\n}\n","/**\n * This function loads an SVG image into an HTMLImageElement.\n * The image can then be uploaded as texture to the GPU.\n * iOS has a bug where embedded fonts are not available immediately after the image loads,\n * so we wait an arbitrary amount of time before resolving the promise.\n * @param image - The image to load the SVG into\n * @param url - The url to load the SVG from\n * @param delay - Whether to delay the load\n * @returns - A promise that resolves when the image has loaded\n */\nexport function loadSVGImage(image: HTMLImageElement, url: string, delay: boolean)\n{\n    return new Promise<void>(async (resolve) =>\n    {\n        // Safari has a known bug where embedded fonts are not available\n        // immediately after the image loads, to compensate we wait an\n        // arbitrary amount of time\n        // @see https://bugs.webkit.org/show_bug.cgi?id=219770\n        if (delay)\n        {\n            await new Promise<void>((resolve) => setTimeout(resolve, 100));\n        }\n\n        image.onload = () =>\n        {\n            resolve();\n        };\n\n        image.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(url)}`;\n        image.crossOrigin = 'anonymous';\n    });\n}\n","import { DOMAdapter } from '../../environment/adapter';\n\nexport function isSafari(): boolean\n{\n    const { userAgent } = DOMAdapter.get().getNavigator();\n\n    return (/^((?!chrome|android).)*safari/i).test(userAgent);\n}\n","import { CanvasPool } from '../../../rendering/renderers/shared/texture/CanvasPool';\n\nimport type { CanvasAndContext } from '../../../rendering/renderers/shared/texture/CanvasPool';\n\n/**\n * This function converts an image to a canvas, and returns the canvas.\n * It is used to convert images to canvases to work around a CORS issue where WebGPU cannot\n * upload an SVGImage to a texture.\n *\n * It uses the CanvasPool to get an optimal canvas and context, and then draws the image onto it.\n * Remember to return this canvas is immediately to the CanvasPool for reuse when you are done with it.\n * (eg upload it to the GPU!)\n * @param image - The image to convert to a canvas.\n * @param resolution - The resolution of the canvas.\n */\nexport function getTemporaryCanvasFromImage(image: HTMLImageElement, resolution: number): CanvasAndContext\n{\n    // Get an optimal canvas and context from the CanvasPool, based on the\n    // dimensions of the image and the desired resolution.\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(\n        image.width,\n        image.height,\n        resolution\n    );\n\n    // Clear the context of the canvas, and draw the image onto it.\n    const { context } = canvasAndContext;\n\n    context.clearRect(0, 0, image.width, image.height);\n    context.drawImage(image, 0, 0);\n\n    // Return the canvas.\n    return canvasAndContext;\n}\n\n","import { extensions } from '../../extensions/Extensions';\nimport { HTMLTextPipe } from './HTMLTextPipe';\nimport { HTMLTextSystem } from './HTMLTextSystem';\n\nextensions.add(HTMLTextSystem);\nextensions.add(HTMLTextPipe);\n","import type { BLEND_MODES, CULL_MODES } from './const';\n\nconst blendModeIds = {\n    normal: 0,\n    add: 1,\n    multiply: 2,\n    screen: 3,\n    overlay: 4,\n    erase: 5,\n    'normal-npm': 6,\n    'add-npm': 7,\n    'screen-npm': 8,\n    min: 9,\n    max: 10,\n};\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\n\n/**\n * This is a WebGL state, and is is passed to {@link StateSystem}.\n *\n * Each mesh rendered may require WebGL to be in a different state.\n * For example you may want different blend mode or to enable polygon offsets\n * @memberof rendering\n */\nexport class State\n{\n    /**\n     * The data is a unique number based on the states settings.\n     * This lets us quickly compare states with a single number rather than looking\n     * at all the individual settings.\n     */\n    public data: number;\n    public _blendModeId: number;\n    private _blendMode: BLEND_MODES;\n    private _polygonOffset: number;\n\n    constructor()\n    {\n        this.data = 0;\n\n        this.blendMode = 'normal';\n        this.polygonOffset = 0;\n\n        this.blend = true;\n        this.depthMask = true;\n    }\n\n    /**\n     * Activates blending of the computed fragment color values.\n     * @default true\n     */\n    get blend(): boolean\n    {\n        return !!(this.data & (1 << BLEND));\n    }\n\n    set blend(value: boolean)\n    {\n        if (!!(this.data & (1 << BLEND)) !== value)\n        {\n            this.data ^= (1 << BLEND);\n        }\n    }\n\n    /**\n     * Activates adding an offset to depth values of polygon's fragments\n     * @default false\n     */\n    get offsets(): boolean\n    {\n        return !!(this.data & (1 << OFFSET));\n    }\n\n    set offsets(value: boolean)\n    {\n        if (!!(this.data & (1 << OFFSET)) !== value)\n        {\n            this.data ^= (1 << OFFSET);\n        }\n    }\n\n    /** The culling settings for this state none - No culling back - Back face culling front - Front face culling */\n    set cullMode(value: CULL_MODES)\n    {\n        if (value === 'none')\n        {\n            this.culling = false;\n\n            return;\n        }\n\n        this.culling = true;\n        this.clockwiseFrontFace = value === 'front';\n    }\n\n    get cullMode(): CULL_MODES\n    {\n        if (!this.culling)\n        {\n            return 'none';\n        }\n\n        return this.clockwiseFrontFace ? 'front' : 'back';\n    }\n\n    /**\n     * Activates culling of polygons.\n     * @default false\n     */\n    get culling(): boolean\n    {\n        return !!(this.data & (1 << CULLING));\n    }\n\n    set culling(value: boolean)\n    {\n        if (!!(this.data & (1 << CULLING)) !== value)\n        {\n            this.data ^= (1 << CULLING);\n        }\n    }\n\n    /**\n     * Activates depth comparisons and updates to the depth buffer.\n     * @default false\n     */\n    get depthTest(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_TEST));\n    }\n\n    set depthTest(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_TEST)) !== value)\n        {\n            this.data ^= (1 << DEPTH_TEST);\n        }\n    }\n\n    /**\n     * Enables or disables writing to the depth buffer.\n     * @default true\n     */\n    get depthMask(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_MASK));\n    }\n\n    set depthMask(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_MASK)) !== value)\n        {\n            this.data ^= (1 << DEPTH_MASK);\n        }\n    }\n\n    /**\n     * Specifies whether or not front or back-facing polygons can be culled.\n     * @default false\n     */\n    get clockwiseFrontFace(): boolean\n    {\n        return !!(this.data & (1 << WINDING));\n    }\n\n    set clockwiseFrontFace(value: boolean)\n    {\n        if (!!(this.data & (1 << WINDING)) !== value)\n        {\n            this.data ^= (1 << WINDING);\n        }\n    }\n\n    /**\n     * The blend mode to be applied when this state is set. Apply a value of `normal` to reset the blend mode.\n     * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n     * @default 'normal'\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this._blendMode;\n    }\n\n    set blendMode(value: BLEND_MODES)\n    {\n        this.blend = (value !== 'none');\n        this._blendMode = value;\n        this._blendModeId = blendModeIds[value as keyof typeof blendModeIds] || 0;\n    }\n\n    /**\n     * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n     * @default 0\n     */\n    get polygonOffset(): number\n    {\n        return this._polygonOffset;\n    }\n\n    set polygonOffset(value: number)\n    {\n        this.offsets = !!value;\n        this._polygonOffset = value;\n    }\n\n    // #if _DEBUG\n    public toString(): string\n    {\n        return `[pixi.js/core:State `\n            + `blendMode=${this.blendMode} `\n            + `clockwiseFrontFace=${this.clockwiseFrontFace} `\n            + `culling=${this.culling} `\n            + `depthMask=${this.depthMask} `\n            + `polygonOffset=${this.polygonOffset}`\n            + `]`;\n    }\n    // #endif\n\n    /**\n     * A quickly getting an instance of a State that is configured for 2d rendering.\n     * @returns a new State with values set for 2d rendering\n     */\n    public static for2d(): State\n    {\n        const state = new State();\n\n        state.depthTest = false;\n        state.blend = true;\n\n        return state;\n    }\n\n    public static default2d = State.for2d();\n}\n\n","import type { TextStyle } from '../../TextStyle';\n\nconst genericFontFamilies = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui',\n];\n\n/**\n * Generates a font style string to use for `TextMetrics.measureFont()`.\n * @param style\n * @returns Font style string, for passing to `TextMetrics.measureFont()`\n */\nexport function fontStringFromTextStyle(style: TextStyle): string\n{\n    // build canvas api font setting from individual components. Convert a numeric style.fontSize to px\n    const fontSizeString = (typeof style.fontSize === 'number') ? `${style.fontSize}px` : style.fontSize;\n\n    // Clean-up fontFamily property by quoting each font name\n    // this will support font names with spaces\n    let fontFamilies: string | string[] = style.fontFamily;\n\n    if (!Array.isArray(style.fontFamily))\n    {\n        fontFamilies = style.fontFamily.split(',');\n    }\n\n    for (let i = fontFamilies.length - 1; i >= 0; i--)\n    {\n        // Trim any extra white-space\n        let fontFamily = fontFamilies[i].trim();\n\n        // Check if font already contains strings\n        if (!(/([\\\"\\'])[^\\'\\\"]+\\1/).test(fontFamily) && !genericFontFamilies.includes(fontFamily))\n        {\n            fontFamily = `\"${fontFamily}\"`;\n        }\n        (fontFamilies as string[])[i] = fontFamily;\n    }\n\n    // eslint-disable-next-line max-len\n    return `${style.fontStyle} ${style.fontVariant} ${style.fontWeight} ${fontSizeString} ${(fontFamilies as string[]).join(',')}`;\n}\n","import { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { MeshGeometry } from '../mesh/shared/MeshGeometry';\n\nimport type { MeshGeometryOptions } from '../mesh/shared/MeshGeometry';\n\n/**\n * Constructor options used for `PlaneGeometry` instances.\n * ```js\n * const planeGeometry = new PlaneGeometry({\n *    width: 100,\n *    height: 100,\n *    verticesX: 10,\n *    verticesY: 10,\n * });\n * ```\n * @see {@link scene.PlaneGeometry}\n * @memberof scene\n */\nexport interface PlaneGeometryOptions\n{\n    /** Width of plane */\n    width?: number;\n    /** Height of plane */\n    height?: number;\n    /** Number of vertices on x-axis */\n    verticesX?: number;\n    /** Number of vertices on y-axis */\n    verticesY?: number;\n}\n\n/**\n * The PlaneGeometry allows you to draw a 2d plane\n * @memberof scene\n */\nexport class PlaneGeometry extends MeshGeometry\n{\n    public static defaultOptions: PlaneGeometryOptions & MeshGeometryOptions = {\n        width: 100,\n        height: 100,\n        verticesX: 10,\n        verticesY: 10,\n    };\n\n    /** The number of vertices on x-axis */\n    public verticesX: number;\n    /** The number of vertices on y-axis */\n    public verticesY: number;\n    /** The width of plane */\n    public width: number;\n    /** The height of plane */\n    public height: number;\n\n    /**\n     * @param {PlaneGeometryOptions} options - Options to be applied to plane geometry\n     */\n    constructor(options: PlaneGeometryOptions);\n    /** @deprecated since 8.0.0 */\n    constructor(width?: number, height?: number, verticesX?: number, verticesY?: number);\n    constructor(...args: [PlaneGeometryOptions?] | [number?, number?, number?, number?])\n    {\n        super({});\n\n        let options = args[0] ?? {};\n\n        if (typeof options === 'number')\n        {\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation(v8_0_0, 'PlaneGeometry constructor changed please use { width, height, verticesX, verticesY } instead');\n            // #endif\n\n            options = {\n                width: options,\n                height: args[1],\n                verticesX: args[2],\n                verticesY: args[3],\n            };\n        }\n\n        this.build(options);\n    }\n\n    /**\n     * Refreshes plane coordinates\n     * @param options - Options to be applied to plane geometry\n     */\n    public build(options: PlaneGeometryOptions): void\n    {\n        options = { ...PlaneGeometry.defaultOptions, ...options };\n\n        this.verticesX = this.verticesX ?? options.verticesX;\n        this.verticesY = this.verticesY ?? options.verticesY;\n\n        this.width = this.width ?? options.width;\n        this.height = this.height ?? options.height;\n\n        const total = this.verticesX * this.verticesY;\n        const verts = [];\n        const uvs = [];\n        const indices = [];\n\n        const verticesX = this.verticesX - 1;\n        const verticesY = this.verticesY - 1;\n\n        const sizeX = (this.width) / verticesX;\n        const sizeY = (this.height) / verticesY;\n\n        for (let i = 0; i < total; i++)\n        {\n            const x = (i % this.verticesX);\n            const y = ((i / this.verticesX) | 0);\n\n            verts.push(x * sizeX, y * sizeY);\n            uvs.push(x / verticesX, y / verticesY);\n        }\n\n        const totalSub = verticesX * verticesY;\n\n        for (let i = 0; i < totalSub; i++)\n        {\n            const xpos = i % verticesX;\n            const ypos = (i / verticesX) | 0;\n\n            const value = (ypos * this.verticesX) + xpos;\n            const value2 = (ypos * this.verticesX) + xpos + 1;\n            const value3 = ((ypos + 1) * this.verticesX) + xpos;\n            const value4 = ((ypos + 1) * this.verticesX) + xpos + 1;\n\n            indices.push(value, value2, value3,\n                value2, value4, value3);\n        }\n\n        this.buffers[0].data = new Float32Array(verts);\n        this.buffers[1].data = new Float32Array(uvs);\n        this.indexBuffer.data = new Uint32Array(indices);\n\n        // ensure that the changes are uploaded\n        this.buffers[0].update();\n        this.buffers[1].update();\n        this.indexBuffer.update();\n    }\n}\n","import { PlaneGeometry } from '../mesh-plane/PlaneGeometry';\nimport { type PointData } from '~/maths/point/PointData';\n\n/**\n * Options for the NineSliceGeometry.\n * @memberof scene\n */\nexport interface NineSliceGeometryOptions\n{\n\n    /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    width?: number\n    /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    height?: number\n    /** The original width of the texture */\n    originalWidth?: number\n    /** The original height of the texture */\n    originalHeight?: number\n    /** The width of the left column. */\n    leftWidth?: number\n    /** The height of the top row. */\n    topHeight?: number\n    /** The width of the right column. */\n    rightWidth?: number\n    /** The height of the bottom row. */\n    bottomHeight?: number\n\n    /** The anchor point of the NineSliceSprite. */\n    anchor?: PointData\n}\n\n/**\n * The NineSliceGeometry class allows you to create a NineSlicePlane object.\n * @memberof scene\n */\nexport class NineSliceGeometry extends PlaneGeometry\n{\n    /** The default options for the NineSliceGeometry. */\n    public static defaultOptions: NineSliceGeometryOptions = {\n        /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        width: 100,\n        /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        height: 100,\n        /** The width of the left column. */\n        leftWidth: 10,\n        /** The height of the top row. */\n        topHeight: 10,\n        /** The width of the right column. */\n        rightWidth: 10,\n        /** The height of the bottom row. */\n        bottomHeight: 10,\n\n        /** The original width of the texture */\n        originalWidth: 100,\n        /** The original height of the texture */\n        originalHeight: 100,\n    };\n\n    public _leftWidth: number;\n    public _rightWidth: number;\n    public _topHeight: number;\n    public _bottomHeight: number;\n\n    private _originalWidth: number;\n    private _originalHeight: number;\n    private _anchorX: any;\n    private _anchorY: number;\n\n    constructor(options: NineSliceGeometryOptions = {})\n    {\n        options = { ...NineSliceGeometry.defaultOptions, ...options };\n\n        super({\n            width: options.width,\n            height: options.height,\n            verticesX: 4,\n            verticesY: 4,\n        });\n\n        this.update(options);\n    }\n\n    /**\n     * Updates the NineSliceGeometry with the options.\n     * @param options - The options of the NineSliceGeometry.\n     */\n    public update(options: NineSliceGeometryOptions)\n    {\n        this.width = options.width ?? this.width;\n        this.height = options.height ?? this.height;\n        this._originalWidth = options.originalWidth ?? this._originalWidth;\n        this._originalHeight = options.originalHeight ?? this._originalHeight;\n        this._leftWidth = options.leftWidth ?? this._leftWidth;\n        this._rightWidth = options.rightWidth ?? this._rightWidth;\n        this._topHeight = options.topHeight ?? this._topHeight;\n        this._bottomHeight = options.bottomHeight ?? this._bottomHeight;\n\n        this._anchorX = options.anchor?.x;\n        this._anchorY = options.anchor?.y;\n\n        this.updateUvs();\n        this.updatePositions();\n    }\n\n    /** Updates the positions of the vertices. */\n    public updatePositions()\n    {\n        const p = this.positions;\n        const {\n            width,\n            height,\n            _leftWidth,\n            _rightWidth,\n            _topHeight,\n            _bottomHeight,\n            _anchorX,\n            _anchorY,\n        } = this;\n\n        const w = _leftWidth + _rightWidth;\n        const scaleW = width > w ? 1.0 : width / w;\n\n        const h = _topHeight + _bottomHeight;\n        const scaleH = height > h ? 1.0 : height / h;\n\n        const scale = Math.min(scaleW, scaleH);\n\n        const anchorOffsetX = _anchorX * width;\n        const anchorOffsetY = _anchorY * height;\n\n        p[0] = p[8] = p[16] = p[24] = -anchorOffsetX;\n        p[2] = p[10] = p[18] = p[26] = (_leftWidth * scale) - anchorOffsetX;\n        p[4] = p[12] = p[20] = p[28] = width - (_rightWidth * scale) - anchorOffsetX;\n        p[6] = p[14] = p[22] = p[30] = width - anchorOffsetX;\n\n        p[1] = p[3] = p[5] = p[7] = -anchorOffsetY;\n        p[9] = p[11] = p[13] = p[15] = (_topHeight * scale) - anchorOffsetY;\n        p[17] = p[19] = p[21] = p[23] = height - (_bottomHeight * scale) - anchorOffsetY;\n        p[25] = p[27] = p[29] = p[31] = height - anchorOffsetY;\n\n        this.getBuffer('aPosition').update();\n    }\n\n    /** Updates the UVs of the vertices. */\n    public updateUvs()\n    {\n        const uvs = this.uvs;\n\n        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n\n        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n\n        const _uvw = 1.0 / this._originalWidth;\n        const _uvh = 1.0 / this._originalHeight;\n\n        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n\n        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);\n        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);\n\n        this.getBuffer('aUV').update();\n    }\n}\n\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableMesh } from '../mesh/shared/BatchableMesh';\nimport { NineSliceGeometry } from './NineSliceGeometry';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { Container } from '../container/Container';\nimport type { NineSliceSprite } from './NineSliceSprite';\n\nexport class NineSliceSpritePipe implements RenderPipe<NineSliceSprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'nineSliceSprite',\n    } as const;\n\n    private readonly _renderer: Renderer;\n    private readonly _gpuSpriteHash: Record<number, BatchableMesh> = Object.create(null);\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as (renderable: Container) => void;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n        this._renderer.renderableGC.addManagedHash(this, '_gpuSpriteHash');\n    }\n\n    public addRenderable(sprite: NineSliceSprite, instructionSet: InstructionSet)\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        this._renderer.renderPipes.batch.addToBatch(gpuSprite, instructionSet);\n    }\n\n    public updateRenderable(sprite: NineSliceSprite)\n    {\n        const gpuSprite = this._gpuSpriteHash[sprite.uid];\n\n        if (sprite.didViewUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        gpuSprite._batcher.updateElement(gpuSprite);\n    }\n\n    public validateRenderable(sprite: NineSliceSprite): boolean\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        return !gpuSprite._batcher.checkAndUpdateTexture(\n            gpuSprite,\n            sprite._texture\n        );\n    }\n\n    public destroyRenderable(sprite: NineSliceSprite)\n    {\n        const batchableMesh = this._gpuSpriteHash[sprite.uid];\n\n        // this will call reset!\n        BigPool.return(batchableMesh.geometry as PoolItem);\n        BigPool.return(batchableMesh as PoolItem);\n\n        this._gpuSpriteHash[sprite.uid] = null;\n\n        sprite.off('destroyed', this._destroyRenderableBound);\n    }\n\n    private _updateBatchableSprite(sprite: NineSliceSprite, batchableSprite: BatchableMesh)\n    {\n        (batchableSprite.geometry as NineSliceGeometry)\n            .update(sprite);\n\n        // = sprite.bounds;\n        batchableSprite.setTexture(sprite._texture);\n    }\n\n    private _getGpuSprite(sprite: NineSliceSprite): BatchableMesh\n    {\n        return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n    }\n\n    private _initGPUSprite(sprite: NineSliceSprite): BatchableMesh\n    {\n        const batchableMesh = BigPool.get(BatchableMesh);\n\n        batchableMesh.geometry = BigPool.get(NineSliceGeometry);\n        batchableMesh.renderable = sprite;\n        batchableMesh.transform = sprite.groupTransform;\n        batchableMesh.texture = sprite._texture;\n        batchableMesh.roundPixels = (this._renderer._roundPixels | sprite._roundPixels) as 0 | 1;\n\n        this._gpuSpriteHash[sprite.uid] = batchableMesh;\n\n        // if the sprite has not been updated by the view, we need to update the batchable mesh now.\n        if (!sprite.didViewUpdate)\n        {\n            this._updateBatchableSprite(sprite, batchableMesh);\n        }\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        sprite.on('destroyed', this._destroyRenderableBound);\n\n        return batchableMesh;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuSpriteHash)\n        {\n            const batchableMesh = this._gpuSpriteHash[i];\n\n            batchableMesh.geometry.destroy();\n        }\n\n        (this._gpuSpriteHash as null) = null;\n        (this._renderer as null) = null;\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { NineSliceSpritePipe } from './NineSliceSpritePipe';\n\nextensions.add(NineSliceSpritePipe);\n","import type { WebGLRenderer } from '../../../rendering/renderers/gl/WebGLRenderer';\nimport type { ParticleContainer } from '../shared/ParticleContainer';\nimport type { ParticleContainerAdaptor, ParticleContainerPipe } from '../shared/ParticleContainerPipe';\n\nexport class GlParticleContainerAdaptor implements ParticleContainerAdaptor\n{\n    public execute(particleContainerPipe: ParticleContainerPipe, container: ParticleContainer)\n    {\n        const state = particleContainerPipe.state;\n        const renderer = particleContainerPipe.renderer as WebGLRenderer;\n        const shader = container.shader || particleContainerPipe.defaultShader;\n\n        shader.resources.uTexture = container.texture._source;\n        shader.resources.uniforms = particleContainerPipe.localUniforms;\n\n        const gl = renderer.gl;\n\n        const buffer = particleContainerPipe.getBuffers(container);\n\n        // now lets upload and render the buffers..\n        renderer.shader.bind(shader);\n        renderer.state.set(state);\n        renderer.geometry.bind(buffer.geometry, shader.glProgram);\n\n        const byteSize = buffer.geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n        const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n\n        gl.drawElements(gl.TRIANGLES, container.particleChildren.length * 6, glType, 0);\n    }\n}\n","/**\n * Generic Mask Stack data structure\n * @function createIndicesForQuads\n * @param {number} size - Number of quads\n * @param {Uint16Array|Uint32Array} [outBuffer] - Buffer for output, length has to be `6 * size`\n * @returns {Uint16Array|Uint32Array} - Resulting index buffer\n */\nexport function createIndicesForQuads(\n    size: number,\n    outBuffer: Uint16Array | Uint32Array | null = null\n): Uint16Array | Uint32Array\n{\n    // the total number of indices in our array, there are 6 points per quad.\n    const totalIndices = size * 6;\n\n    // Check if we need to use Uint32Array\n    if (totalIndices > 65535)\n    {\n        outBuffer ||= new Uint32Array(totalIndices); // Use Uint32Array if needed\n    }\n    else\n    {\n        outBuffer ||= new Uint16Array(totalIndices);\n    }\n\n    if (outBuffer.length !== totalIndices)\n    {\n        throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n    }\n\n    // fill the indices with the quads to draw\n    for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4)\n    {\n        outBuffer[i + 0] = j + 0;\n        outBuffer[i + 1] = j + 1;\n        outBuffer[i + 2] = j + 2;\n        outBuffer[i + 3] = j + 0;\n        outBuffer[i + 4] = j + 2;\n        outBuffer[i + 5] = j + 3;\n    }\n\n    return outBuffer;\n}\n","import {\n    getAttributeInfoFromFormat\n} from '../../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat';\n\nimport type { IParticle } from '../Particle';\nimport type { ParticleRendererProperty } from '../particleData';\n\n// TODO rename to update function\nexport type ParticleUpdateFunction = (ps: IParticle[], f32v: Float32Array, u32v: Uint32Array) => void;\n\nexport function generateParticleUpdateFunction(properties: Record<string, ParticleRendererProperty>)\n{\n    return {\n        dynamicUpdate: generateUpdateFunction(properties, true),\n        staticUpdate: generateUpdateFunction(properties, false),\n    };\n}\n\nfunction generateUpdateFunction(\n    properties: Record<string, ParticleRendererProperty>,\n    dynamic: boolean\n): ParticleUpdateFunction\n{\n    const funcFragments: string[] = [];\n\n    funcFragments.push(`\n      \n        var index = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n\n            `);\n\n    let offset = 0;\n\n    for (const i in properties)\n    {\n        const property = properties[i];\n\n        if (dynamic !== property.dynamic) continue;\n\n        funcFragments.push(`offset = index + ${offset}`);\n\n        funcFragments.push(property.code);\n\n        const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n        offset += attributeInfo.stride / 4;\n    }\n\n    funcFragments.push(`\n            index += stride * 4;\n        }\n    `);\n\n    // add to the front..\n    funcFragments.unshift(`\n        var stride = ${offset};\n    `);\n\n    const functionSource = funcFragments.join('\\n');\n\n    // eslint-disable-next-line no-new-func\n    return new Function('ps', 'f32v', 'u32v', functionSource) as ParticleUpdateFunction;\n}\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport { getAttributeInfoFromFormat } from '../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat';\nimport { ViewableBuffer } from '../../../utils/data/ViewableBuffer';\nimport { createIndicesForQuads } from './utils/createIndicesForQuads';\nimport { generateParticleUpdateFunction } from './utils/generateParticleUpdateFunction';\n\nimport type { IndexBufferArray } from '../../../rendering/renderers/shared/geometry/Geometry';\nimport type { IParticle } from './Particle';\nimport type { ParticleRendererProperty } from './particleData';\nimport type { ParticleUpdateFunction } from './utils/generateParticleUpdateFunction';\n\n/**\n * Options for creating a ParticleBuffer.\n * @property {number} size - The size of the particle buffer.\n * @property {Record<string, ParticleRendererProperty>} properties - A record of attributes that the particle container uses.\n */\nexport interface ParticleBufferOptions\n{\n    size: number;\n    properties: Record<string, ParticleRendererProperty>;\n}\n\n/**\n * The ParticleBuffer holds the buffers and geometry for a particle container.\n * It also contains the upload functions for the static and dynamic properties.\n * @internal\n */\nexport class ParticleBuffer\n{\n    /** The buffer containing static attribute data for all elements in the batch. */\n    public staticAttributeBuffer: ViewableBuffer;\n    /** The buffer containing dynamic attribute data for all elements in the batch. */\n    public dynamicAttributeBuffer: ViewableBuffer;\n\n    private readonly _staticBuffer: Buffer;\n    private readonly _dynamicBuffer: Buffer;\n\n    /** The buffer containing index data for all elements in the batch. */\n    public indexBuffer: IndexBufferArray;\n\n    private readonly _dynamicStride: number;\n    private readonly _staticStride: number;\n\n    /** The geometry of the particle buffer. */\n    public readonly geometry: Geometry;\n\n    private _size = 0;\n    private readonly _dynamicUpload: ParticleUpdateFunction;\n    private readonly _staticUpload: ParticleUpdateFunction;\n    private readonly _generateParticleUpdateCache: Record<string, {\n        dynamicUpdate: ParticleUpdateFunction;\n        staticUpdate: ParticleUpdateFunction;\n    }> = {};\n\n    constructor(options: ParticleBufferOptions)\n    {\n        // size in sprites!\n        const size = this._size = options.size ?? 1000;\n\n        // TODO add the option to specify what is dynamic!\n        const properties = options.properties;\n\n        // in bytes!\n        let staticVertexSize = 0;\n        let dynamicVertexSize = 0;\n\n        for (const i in properties)\n        {\n            const property = properties[i];\n            const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n            if (property.dynamic)\n            {\n                // dynamic.\n                dynamicVertexSize += attributeInfo.stride;\n            }\n            else\n            {\n                // static.\n                staticVertexSize += attributeInfo.stride;\n            }\n        }\n\n        this._dynamicStride = dynamicVertexSize / 4;\n        this._staticStride = staticVertexSize / 4;\n\n        this.staticAttributeBuffer = new ViewableBuffer(size * 4 * staticVertexSize);\n        this.dynamicAttributeBuffer = new ViewableBuffer(size * 4 * dynamicVertexSize);\n\n        this.indexBuffer = createIndicesForQuads(size);\n\n        // build geometry..\n\n        const geometry = new Geometry();\n\n        let dynamicOffset = 0;\n        let staticOffset = 0;\n\n        this._staticBuffer = new Buffer({\n            data: new Float32Array(1),\n            label: 'static-particle-buffer',\n            shrinkToFit: false,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n        });\n\n        this._dynamicBuffer = new Buffer({\n            data: new Float32Array(1),\n            label: 'dynamic-particle-buffer',\n            shrinkToFit: false,\n            usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n        });\n\n        for (const i in properties)\n        {\n            const property = properties[i];\n            const attributeInfo = getAttributeInfoFromFormat(property.format);\n\n            if (property.dynamic)\n            {\n                geometry.addAttribute(property.attributeName, {\n                    buffer: this._dynamicBuffer,\n                    stride: this._dynamicStride * 4,\n                    offset: dynamicOffset * 4,\n                    format: property.format,\n                });\n                dynamicOffset += attributeInfo.size;\n            }\n            else\n            {\n                geometry.addAttribute(property.attributeName, {\n                    buffer: this._staticBuffer,\n                    stride: this._staticStride * 4,\n                    offset: staticOffset * 4,\n                    format: property.format,\n                });\n                staticOffset += attributeInfo.size;\n            }\n        }\n\n        geometry.addIndex(this.indexBuffer);\n\n        const uploadFunction = this.getParticleUpdate(properties);\n\n        this._dynamicUpload = uploadFunction.dynamicUpdate;\n        this._staticUpload = uploadFunction.staticUpdate;\n\n        this.geometry = geometry;\n    }\n\n    public getParticleUpdate(properties: Record<string, ParticleRendererProperty>)\n    {\n        const key = getParticleSyncKey(properties);\n\n        if (this._generateParticleUpdateCache[key])\n        {\n            return this._generateParticleUpdateCache[key];\n        }\n\n        this._generateParticleUpdateCache[key] = this.generateParticleUpdate(properties);\n\n        return this._generateParticleUpdateCache[key];\n    }\n\n    public generateParticleUpdate(properties: Record<string, ParticleRendererProperty>)\n    {\n        return generateParticleUpdateFunction(properties);\n    }\n\n    public update(particles: IParticle[], uploadStatic: boolean)\n    {\n        // first resize the buffers if needed!\n        // TODO resize!\n        if (particles.length > this._size)\n        {\n            uploadStatic = true;\n\n            this._size = Math.max(particles.length, (this._size * 1.5) | 0);\n\n            this.staticAttributeBuffer = new ViewableBuffer(this._size * this._staticStride * 4 * 4);\n            this.dynamicAttributeBuffer = new ViewableBuffer(this._size * this._dynamicStride * 4 * 4);\n            this.indexBuffer = createIndicesForQuads(this._size);\n\n            this.geometry.indexBuffer.setDataWithSize(\n                this.indexBuffer, this.indexBuffer.byteLength, true);\n        }\n\n        const dynamicAttributeBuffer = this.dynamicAttributeBuffer;\n\n        this._dynamicUpload(particles, dynamicAttributeBuffer.float32View, dynamicAttributeBuffer.uint32View);\n\n        this._dynamicBuffer.setDataWithSize(\n            this.dynamicAttributeBuffer.float32View, particles.length * this._dynamicStride * 4, true);\n\n        if (uploadStatic)\n        {\n            const staticAttributeBuffer = this.staticAttributeBuffer;\n\n            this._staticUpload(particles, staticAttributeBuffer.float32View, staticAttributeBuffer.uint32View);\n\n            this._staticBuffer.setDataWithSize(\n                staticAttributeBuffer.float32View, particles.length * this._staticStride * 4, true);\n        }\n    }\n\n    public destroy()\n    {\n        this._staticBuffer.destroy();\n        this._dynamicBuffer.destroy();\n        this.geometry.destroy();\n    }\n}\n\nfunction getParticleSyncKey(properties: Record<string, ParticleRendererProperty>)\n{\n    const keyGen: string[] = [];\n\n    for (const key in properties)\n    {\n        const property = properties[key];\n\n        keyGen.push(key, property.code, property.dynamic ? 'd' : 's');\n    }\n\n    return keyGen.join('_');\n}\n\n","import { Color } from '../../../../color/Color';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { GlProgram } from '../../../../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../../../rendering/renderers/gpu/shader/GpuProgram';\nimport { Shader } from '../../../../rendering/renderers/shared/shader/Shader';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { TextureStyle } from '../../../../rendering/renderers/shared/texture/TextureStyle';\nimport fragment from './particles.frag';\nimport vertex from './particles.vert';\nimport wgsl from './particles.wgsl';\n\nexport class ParticleShader extends Shader\n{\n    constructor()\n    {\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment\n        });\n\n        const gpuProgram = GpuProgram.from({\n            fragment: {\n                source: wgsl,\n                entryPoint: 'mainFragment'\n            },\n            vertex: {\n                source: wgsl,\n                entryPoint: 'mainVertex'\n            }\n        });\n\n        super({\n            glProgram,\n            gpuProgram,\n            resources: {\n                // this will be replaced with the texture from the particle container\n                uTexture: Texture.WHITE.source,\n                // this will be replaced with the texture style from the particle container\n                uSampler: new TextureStyle({}),\n                // this will be replaced with the local uniforms from the particle container\n                uniforms: {\n                    uTranslationMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n                    uColor: { value: new Color(0xFFFFFF), type: 'vec4<f32>' },\n                    uRound: { value: 1, type: 'f32' },\n                    uResolution: { value: [0, 0], type: 'vec2<f32>' },\n                }\n            }\n        });\n    }\n}\n","import { Matrix } from '../../../maths/matrix/Matrix';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend';\nimport { State } from '../../../rendering/renderers/shared/state/State';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform';\nimport { ParticleBuffer } from './ParticleBuffer';\nimport { ParticleShader } from './shader/ParticleShader';\n\nimport type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport type { Renderer } from '../../../rendering/renderers/types';\nimport type { Container } from '../../container/Container';\nimport type { ParticleContainer } from './ParticleContainer';\n\nexport interface ParticleContainerAdaptor\n{\n    execute(particleContainerPop: ParticleContainerPipe, container: ParticleContainer): void;\n}\n\n/**\n * Renderer for Particles that is designer for speed over feature set.\n * @memberof scene\n */\nexport class ParticleContainerPipe implements RenderPipe<ParticleContainer>\n{\n    /** The default shader that is used if a sprite doesn't have a more specific one. */\n    public defaultShader: Shader;\n\n    public adaptor: ParticleContainerAdaptor;\n    public readonly state = State.for2d();\n    public readonly renderer: Renderer;\n\n    private _gpuBufferHash: Record<number, ParticleBuffer> = Object.create(null);\n    // eslint-disable-next-line max-len\n    private readonly _destroyRenderableBound = this.destroyRenderable.bind(this) as unknown as (renderable: Container) => void;\n\n    public readonly localUniforms = new UniformGroup({\n        uTranslationMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n        uColor: { value: new Float32Array(4), type: 'vec4<f32>' },\n        uRound: { value: 1, type: 'f32' },\n        uResolution: { value: [0, 0], type: 'vec2<f32>' },\n    });\n\n    /**\n     * @param renderer - The renderer this sprite batch works for.\n     * @param adaptor\n     */\n    constructor(renderer: Renderer, adaptor: ParticleContainerAdaptor)\n    {\n        this.renderer = renderer;\n\n        this.adaptor = adaptor;\n\n        this.defaultShader = new ParticleShader();\n\n        this.state = State.for2d();\n    }\n\n    public validateRenderable(_renderable: ParticleContainer): boolean\n    {\n        // always fine :D\n        return false;\n    }\n\n    public addRenderable(renderable: ParticleContainer, instructionSet: InstructionSet)\n    {\n        this.renderer.renderPipes.batch.break(instructionSet);\n        instructionSet.add(renderable);\n    }\n\n    public getBuffers(renderable: ParticleContainer): ParticleBuffer\n    {\n        return this._gpuBufferHash[renderable.uid] || this._initBuffer(renderable);\n    }\n\n    private _initBuffer(renderable: ParticleContainer): ParticleBuffer\n    {\n        this._gpuBufferHash[renderable.uid] = new ParticleBuffer({\n            size: renderable.particleChildren.length,\n            properties: renderable._properties,\n        });\n\n        renderable.on('destroyed', this._destroyRenderableBound);\n\n        return this._gpuBufferHash[renderable.uid];\n    }\n\n    public updateRenderable(_renderable: ParticleContainer)\n    {\n        // nothing to be done here!\n\n    }\n\n    public destroyRenderable(renderable: ParticleContainer)\n    {\n        const buffer = this._gpuBufferHash[renderable.uid];\n\n        buffer.destroy();\n\n        this._gpuBufferHash[renderable.uid] = null;\n\n        renderable.off('destroyed', this._destroyRenderableBound);\n    }\n\n    public execute(container: ParticleContainer): void\n    {\n        const children = container.particleChildren;\n\n        if (children.length === 0)\n        {\n            return;\n        }\n\n        const renderer = this.renderer;\n        const buffer = this.getBuffers(container);\n\n        container.texture ||= children[0].texture;\n\n        const state = this.state;\n\n        buffer.update(children, container._childrenDirty);\n        container._childrenDirty = false;\n\n        state.blendMode = getAdjustedBlendModeBlend(container.blendMode, container.texture._source);\n\n        const uniforms = this.localUniforms.uniforms;\n\n        const transformationMatrix = uniforms.uTranslationMatrix;\n\n        container.worldTransform.copyTo(transformationMatrix);\n\n        transformationMatrix.prepend(renderer.globalUniforms.globalUniformData.projectionMatrix);\n\n        uniforms.uResolution = renderer.globalUniforms.globalUniformData.resolution;\n        uniforms.uRound = renderer._roundPixels | container._roundPixels;\n\n        color32BitToUniform(\n            container.groupColorAlpha,\n            uniforms.uColor,\n            0\n        );\n\n        this.adaptor.execute(this, container);\n    }\n\n    /** Destroys the ParticleRenderer. */\n    public destroy(): void\n    {\n        if (this.defaultShader)\n        {\n            this.defaultShader.destroy();\n            this.defaultShader = null;\n        }\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { GlParticleContainerAdaptor } from '../gl/GlParticleContainerAdaptor';\nimport { ParticleContainerPipe } from './ParticleContainerPipe';\n\nimport type { WebGLRenderer } from '../../../rendering/renderers/gl/WebGLRenderer';\n\nexport class GlParticleContainerPipe extends ParticleContainerPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n        ],\n        name: 'particle',\n    } as const;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        super(renderer, new GlParticleContainerAdaptor());\n    }\n}\n","import type { WebGPURenderer } from '../../../rendering/renderers/gpu/WebGPURenderer';\nimport type { ParticleContainer } from '../shared/ParticleContainer';\nimport type { ParticleContainerAdaptor, ParticleContainerPipe } from '../shared/ParticleContainerPipe';\n\nexport class GpuParticleContainerAdaptor implements ParticleContainerAdaptor\n{\n    public execute(particleContainerPipe: ParticleContainerPipe, container: ParticleContainer)\n    {\n        const renderer = particleContainerPipe.renderer as WebGPURenderer;\n\n        const shader = container.shader || particleContainerPipe.defaultShader;\n\n        shader.groups[0] = renderer.renderPipes.uniformBatch.getUniformBindGroup(particleContainerPipe.localUniforms, true);\n\n        shader.groups[1] = renderer.texture.getTextureBindGroup(container.texture);\n\n        const state = particleContainerPipe.state;\n\n        const buffer = particleContainerPipe.getBuffers(container);\n\n        renderer.encoder.draw({\n            geometry: buffer.geometry,\n            shader: container.shader || particleContainerPipe.defaultShader,\n            state,\n            size: container.particleChildren.length * 6,\n        });\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { GpuParticleContainerAdaptor } from '../gpu/GpuParticleContainerAdaptor';\nimport { ParticleContainerPipe } from './ParticleContainerPipe';\n\nimport type { WebGPURenderer } from '../../../rendering/renderers/gpu/WebGPURenderer';\n\nexport class GpuParticleContainerPipe extends ParticleContainerPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGPUPipes,\n        ],\n        name: 'particle',\n    } as const;\n\n    constructor(renderer: WebGPURenderer)\n    {\n        super(renderer, new GpuParticleContainerAdaptor());\n    }\n}\n","import { extensions } from '../../extensions/Extensions';\nimport { GlParticleContainerPipe } from './shared/GlParticleContainerPipe';\nimport { GpuParticleContainerPipe } from './shared/GpuParticleContainerPipe';\n\n// NOTE: this is the first occurrence of needing both gl and gpu pipes in the same file\n// This could cause some issues with tree shaking in the future.\n// Right now these two files do not import anything specific for a renderer, so is not an issue for now.\nextensions.add(GlParticleContainerPipe);\nextensions.add(GpuParticleContainerPipe);\n","import { Color } from '../../../../color/Color';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture';\nimport { warn } from '../../../../utils/logging/warn';\nimport { FillGradient } from '../../../graphics/shared/fill/FillGradient';\nimport { FillPattern } from '../../../graphics/shared/fill/FillPattern';\n\nimport type { ICanvasRenderingContext2D } from '../../../../environment/canvas/ICanvasRenderingContext2D';\nimport type { ConvertedFillStyle } from '../../../graphics/shared/FillTypes';\nimport type { CanvasTextMetrics } from '../CanvasTextMetrics';\n\n// 5 decimal places\nconst PRECISION = 100000;\n\n/**\n * Converts a PixiJS fill style into a Canvas-compatible fill style.\n * Handles solid colors, textures, patterns, and gradients.\n * @param fillStyle - The PixiJS fill style to convert\n * @param context - The canvas rendering context\n * @param textMetrics - Metrics about the text being rendered\n * @param padding - Padding to add to the text metrics (used to ensure that the gradient accommodates the stroke width)\n * @returns Canvas-compatible fill style (string, CanvasGradient, or CanvasPattern)\n */\nexport function getCanvasFillStyle(\n    fillStyle: ConvertedFillStyle,\n    context: ICanvasRenderingContext2D,\n    textMetrics?: CanvasTextMetrics,\n    padding = 0\n): string | CanvasGradient | CanvasPattern\n{\n    // Solid color fill\n    if (fillStyle.texture === Texture.WHITE && !fillStyle.fill)\n    {\n        return Color.shared.setValue(fillStyle.color).setAlpha(fillStyle.alpha ?? 1).toHexa();\n    }\n    // Basic texture fill\n    else if (!fillStyle.fill)\n    {\n        const pattern = context.createPattern(fillStyle.texture.source.resource, 'repeat');\n        const tempMatrix = fillStyle.matrix.copyTo(Matrix.shared);\n\n        tempMatrix.scale(fillStyle.texture.frame.width, fillStyle.texture.frame.height);\n        pattern.setTransform(tempMatrix);\n\n        return pattern;\n    }\n    // Pattern fill\n    else if (fillStyle.fill instanceof FillPattern)\n    {\n        const fillPattern = fillStyle.fill;\n        const pattern = context.createPattern(fillPattern.texture.source.resource, 'repeat');\n        const tempMatrix = fillPattern.transform.copyTo(Matrix.shared);\n\n        tempMatrix.scale(\n            fillPattern.texture.frame.width,\n            fillPattern.texture.frame.height\n        );\n\n        pattern.setTransform(tempMatrix);\n\n        return pattern;\n    }\n    // Gradient fill\n    else if (fillStyle.fill instanceof FillGradient)\n    {\n        const fillGradient = fillStyle.fill;\n\n        const isLinear = fillGradient.type === 'linear';\n        const isLocal = fillGradient.textureSpace === 'local';\n\n        let width = 1;\n        let height = 1;\n\n        // Use text dimensions if in local space\n        if (isLocal && textMetrics)\n        {\n            width = textMetrics.width + padding;\n            height = textMetrics.height + padding;\n        }\n\n        let gradient: CanvasGradient;\n        let isNearlyVertical = false;\n\n        if (isLinear)\n        {\n            const { start, end } = fillGradient;\n\n            gradient = context.createLinearGradient(\n                start.x * width,\n                start.y * height,\n                end.x * width,\n                end.y * height\n            );\n\n            // Check if gradient is nearly vertical (10% threshold)\n            isNearlyVertical = Math.abs(end.x - start.x) < Math.abs((end.y - start.y) * 0.1);\n        }\n        else\n        {\n            const { center, innerRadius, outerCenter, outerRadius } = fillGradient;\n\n            gradient = context.createRadialGradient(\n                center.x * width,\n                center.y * height,\n                innerRadius * width,\n                outerCenter.x * width,\n                outerCenter.y * height,\n                outerRadius * width\n            );\n        }\n\n        // For vertical gradients in local space, repeat gradient per text line\n        if (isNearlyVertical && isLocal && textMetrics)\n        {\n            const ratio = (textMetrics.lineHeight) / height;\n\n            for (let i = 0; i < textMetrics.lines.length; i++)\n            {\n                const start = ((i * textMetrics.lineHeight) + (padding / 2)) / height;\n\n                fillGradient.colorStops.forEach((stop) =>\n                {\n                    // Convert to global space\n                    const globalStop = start + (stop.offset * ratio);\n\n                    gradient.addColorStop(\n                        // fix to 5 decimal places to avoid floating point precision issues\n                        Math.floor(globalStop * PRECISION) / PRECISION,\n                        Color.shared.setValue(stop.color).toHex()\n                    );\n                });\n            }\n        }\n        else\n        {\n            // Standard global space gradient handling\n            fillGradient.colorStops.forEach((stop) =>\n            {\n                gradient.addColorStop(stop.offset, Color.shared.setValue(stop.color).toHex());\n            });\n        }\n\n        return gradient;\n    }\n\n    // #if _DEBUG\n    warn('FillStyle not recognised', fillStyle);\n    // #endif\n\n    return 'red';\n}\n"],"names":["CanvasTextPipe","constructor","renderer","_gpuText","Object","create","_destroyRenderableBound","this","destroyRenderable","bind","_renderer","runners","resolutionChange","add","renderableGC","addManagedHash","i","gpuText","text","batchableSprite","renderable","_autoResolution","_resolution","resolution","onViewUpdate","validateRenderable","_getGpuText","newKey","_getKey","currentKey","addRenderable","instructionSet","_didTextUpdate","_updateText","renderPipes","batch","addToBatch","updateRenderable","_batcher","updateElement","off","_destroyRenderableById","uid","textUid","canvasText","decreaseReferenceCount","BigPool","return","_updateGpuText","updateTextBounds","texture","getManagedTexture","initGpuText","gpuTextData","get","BatchableSprite","transform","groupTransform","bounds","minX","maxX","minY","maxY","roundPixels","_roundPixels","on","destroy","extension","type","ExtensionType","WebGLPipes","WebGPUPipes","CanvasPipes","name","checkRow","data","width","y","x","index","checkColumn","top","bottom","stride","CanvasTextSystem","_activeTextures","getTextureSize","style","measured","CanvasTextMetrics","measureText","Math","ceil","max","padding","height","nextPow2","getTexture","options","_textKey","deprecation","TextStyle","canvasAndContext","createTextureAndCanvas","initSource","_source","CanvasPool","returnCanvasAndContext","getOptimalCanvasAndContext","canvas","renderTextToCanvas","getPo2TextureFromSource","trim","trimmed","arguments","length","undefined","context","getContext","willReadFrequently","TypeError","getImageData","left","right","Rectangle","EMPTY","getCanvasBoundingBox","frame","copyFrom","updateUvs","textKey","_increaseReferenceCount","usageCount","returnTexture","source","resource","uploadMethodId","alphaMode","TexturePool","activeTexture","getReferenceCount","font","fontStringFromTextStyle","lines","lineHeight","lineWidths","maxLineWidth","fontProperties","resetTransform","scale","textBaseline","_stroke","strokeStyle","lineWidth","miterLimit","lineJoin","join","lineCap","cap","linePositionX","linePositionY","passesCount","dropShadow","isShadowPass","dsOffsetText","dsOffsetShadow","fillStyle","shadowOptions","dropShadowColor","color","dropShadowAlpha","alpha","shadowColor","Color","shared","setValue","setAlpha","toRgbaString","dropShadowBlur","blur","dropShadowDistance","distance","shadowBlur","shadowOffsetX","cos","angle","shadowOffsetY","sin","_fill","getCanvasFillStyle","alignment","linePositionYShift","fontSize","strokeWidth","i2","ascent","align","_drawLetterSpacing","isStroke","letterSpacing","useExperimentalLetterSpacing","experimentalLetterSpacingSupported","experimentalLetterSpacing","textLetterSpacing","strokeText","fillText","currentPosition","stringArray","graphemeSegmenter","previousWidth","currentWidth","currentChar","textStr","j","WebGLSystem","WebGPUSystem","CanvasSystem","extensions","tilingBit","vertex","header","main","fragment","tilingBitGl","gpuProgram","glProgram","TilingSpriteShader","Shader","compileHighShaderGpuProgram","bits","localUniformBit","roundPixelsBit","compileHighShaderGlProgram","localUniformBitGl","roundPixelsBitGl","tilingUniforms","UniformGroup","uMapCoord","value","Matrix","uClampFrame","Float32Array","uClampOffset","uTextureTransform","uSizeAnchor","resources","localUniforms","uTransformMatrix","uColor","uRound","uTexture","Texture","uSampler","updateUniforms","matrix","anchorX","anchorY","textureWidth","textureHeight","textureMatrix","uniforms","set","a","b","c","d","tx","ty","invert","mapCoord","QuadGeometry","MeshGeometry","positions","uvs","indices","Uint32Array","sharedQuad","TilingSpritePipe","_state","State","default2d","_tilingSpriteDataHash","tilingSpriteData","_getTilingSpriteData","couldBatch","canBatch","_updateCanBatch","batchableMesh","checkAndUpdateTexture","tilingSprite","batcher","geometry","BatchableMesh","didViewUpdate","_updateBatchableMesh","setTexture","_texture","break","shader","execute","groups","globalUniforms","bindGroup","color32BitToUniform","groupColorAlpha","blendMode","getAdjustedBlendModeBlend","groupBlendMode","encoder","draw","state","_tileTransform","anchor","_initTilingSpriteData","slice","renderableData","addressMode","update","applyAnchorToTexture","array","offset","size","applyMatrix","setUvs","setPositions","_nonPowOf2wrapping","RendererType","WEBGL","supports","nonPowOf2wrapping","isSimple","isPowerOfTwo","abgr","out","ResizePlugin","init","defineProperty","dom","globalThis","removeEventListener","queueResize","_resizeTo","addEventListener","resize","_cancelResize","_resizeId","requestAnimationFrame","cancelAnimationFrame","window","innerWidth","innerHeight","clientWidth","clientHeight","render","resizeTo","Application","TickerPlugin","assign","autoStart","sharedTicker","ticker","_ticker","remove","UPDATE_PRIORITY","LOW","stop","start","Ticker","oldTicker","batcherName","topology","attributeSize","indexSize","packAsQuad","_attributeStart","_batch","reset","GraphicsPipe","adaptor","for2d","_graphicsBatchesHash","_adaptor","graphics","wasBatched","gpuContext","graphicsContext","updateGpuContext","isBatchable","_rebuild","_addToBatcher","batches","_removeBatchForRenderable","isRenderable","getGpuContext","customShader","_initBatchesForRenderable","batched","batchPipe","_getBatchesForRenderable","map","batchClone","BatchableGraphics","copyTo","graphicsUid","forEach","GraphicsContextSystem","valuesToIterateForKeys","generateTextStyleKey","key","prop","addFillStyleKey","addStokeStyleKey","toNumber","addDropShadowKey","fill","styleKey","updateQuadBounds","_anchor","_style","contextSettings","_CanvasTextMetrics","result","_experimentalLetterSpacingSupported","proto","DOMAdapter","getCanvasRenderingContext2D","prototype","_canvas","wordWrap","_measurementCache","measureFont","__context","_wordWrap","split","Array","_measureText","leading","metrics","metricWidth","actualBoundingBoxLeft","boundsWidth","actualBoundingBoxRight","val","line","cache","whiteSpace","collapseSpaces","_collapseSpaces","collapseNewlines","_collapseNewlines","canPrependSpaces","wordWrapWidth","tokens","_tokenize","token","_isNewline","_addLine","currIsBreakingSpace","isBreakingSpace","lastIsBreakingSpace","tokenWidth","_getFromCache","canBreakWords","breakWords","characters","wordWrapSplit","char","lastChar","k","nextChar","canBreakChars","characterWidth","isLastToken","newLine","_trimRight","_newlines","includes","charCodeAt","_nextChar","_breakingSpaces","push","_token","_char","_index","_breakWords","_fonts","_context","METRICS_STRING","BASELINE_SYMBOL","properties","actualBoundingBoxAscent","descent","actualBoundingBoxDescent","clearMetrics","__canvas","OffscreenCanvas","createCanvas","_cx","BASELINE_MULTIPLIER","HEIGHT_MULTIPLIER","Intl","Segmenter","segmenter","s","segment","indexOffset","attributeOffset","_textureMatrixUpdateId","_uvUpdateId","_topology","uvBuffer","getBuffer","transformedUvs","_transformedUvs","_updateID","multiplyUvs","localUniformMSDFBit","end","localUniformMSDFBitGl","mSDFBit","mSDFBitGl","SdfShader","uDistance","maxTextures","getMaxTexturesPerBatch","colorBit","generateTextureBatchBit","colorBitGl","generateTextureBatchBitGl","batchSamplers","getBatchSamplersUniformGroup","AbstractBitmapFont","EventEmitter","chars","fontFamily","fontMetrics","baseLineOffset","distanceField","range","pages","applyFillAsTint","baseMeasurementFontSize","baseRenderedFontSize","v8_0_0","pageTextures","distanceFieldRange","distanceFieldType","destroyTextures","emit","removeAllListeners","page","resolveCharacters","item","isArray","Error","startCode","endCode","j2","String","fromCharCode","from","_DynamicBitmapFont","_padding","_measureCache","_currentChars","_currentX","_currentY","_currentPageIndex","_skipKerning","dynamicOptions","defaultOptions","_textureSize","textureSize","_mipmap","mipmap","clone","overrideFill","WHITE","requestedFontSize","overrideSize","skipKerning","ensureCharacters","charList","filter","self","indexOf","pageData","_nextPage","textureSource","currentX","currentY","fontScale","maxCharHeight","skipTexture","maxTextureWidth","maxTextureHeight","paddedWidth","fontStyle","paddedHeight","pageData2","xAdvance","id","codePointAt","xOffset","yOffset","kerning","_drawGlyph","px","py","_applyKerning","newChars","measureCache","first","second","c1","c2","total","amount","textureResolution","_setupContext","ImageSource","autoGenerateMipmaps","stroke","strokeThickness","rgb","toArray","super","DynamicBitmapFont","getBitmapTextLayout","trimEnd","layoutData","offsetY","charPositions","spaceWidth","spacesIndex","currentLine","previousChar","firstWord","currentWord","spaceWord","nextWord","word","position","nextLine","adjustedLetterSpacing","adjustedWordWrapWidth","isEnd","charData","test","nextCharWidth","measurementData","alignCenter","alignRight","indy","spaceIndex","totalSpaces","alignJustify","fontCount","BitmapFontManager","ALPHA","NUMERIC","ALPHANUMERIC","ASCII","getFont","fontFamilyKey","substring","lastIndexOf","Cache","has","fnt","warn","once","dynamicFont","getLayout","bitmapFont","install","textStyle","flatChars","uninstall","cacheKey","BitmapTextPipe","_gpuBitmapText","bitmapText","graphicsRenderable","_getGpuBitmapText","_updateContext","syncWithProxy","_updateDistanceField","_destroyRenderableByUid","renderableUid","proxyGraphics","clear","bitmapTextLayout","translate","_x","_y","tint","round","proxyRenderable","Graphics","dx","sqrt","dy","worldScale","abs","container","proxy","groupColor","globalDisplayStatus","localDisplayStatus","groupAlpha","localUniformBitGroup2","replace","FilterPipe","filterEffect","renderPipeId","canBundle","action","pop","_filterEffect","_container","instruction","quadGeometry","Geometry","attributes","aPosition","buffer","format","indexBuffer","FilterSystem","_filterStackIndex","_filterStack","_filterGlobalUniforms","uInputSize","uInputPixel","uInputClamp","uOutputFrame","uGlobalFrame","uOutputTexture","_globalFilterBindGroup","BindGroup","activeBackTexture","_activeFilterData","backTexture","filters","_getFilterData","filterData","skip","renderables","tempMatrix","worldTransform","addBounds","getGlobalRenderableBounds","filterArea","addRect","getFastGlobalBounds","filterFrameTransform","renderGroup","parentRenderGroup","cacheToLocalTransform","colorTextureSource","renderTarget","colorTexture","Infinity","antialias","blendRequired","enabled","clipToViewport","min","compatibleRenderers","backBuffer","useBackBuffer","viewPort","rootViewPort","rootResolution","fitBounds","pad","isPositive","previousRenderSurface","renderSurface","inputTexture","getOptimalTexture","finishRenderPass","previousBounds","getRenderTarget","getBackTexture","setResource","apply","flip","flop","t","lastRenderSurface","backgroundResolution","floor","copyToTexture","applyFilter","input","output","Point","isFinalTarget","rootRenderTarget","currentIndex","filterUniforms","outputFrame","inputSize","inputPixel","inputClamp","globalFrame","outputTexture","lastIndex","filterData2","pixelWidth","pixelHeight","rootTexture","isRoot","uniformBatch","batchUniforms","getUboResource","Bounds","calculateSpriteMatrix","outputMatrix","sprite","mappedMatrix","prepend","canvasOptions","_canvasPool","enableFullScreen","_createCanvasAndContext","minWidth","minHeight","clearRect","_MeshGeometry","shrinkToFit","shrinkBuffersToFit","Buffer","label","usage","BufferUsage","VERTEX","COPY_DST","aUV","INDEX","batchMode","MeshPipe","localUniformsBindGroup","_meshDataHash","_gpuBatchableMeshHash","mesh","meshData","_getMeshData","isBatched","_geometry","vertexSize","_getBatchableMesh","gpuBatchableMesh","gpuMesh","_initMeshData","_initBatchableMesh","_TextStyle","oldStyle","defaults","defaultDropShadow","dropShadowAngle","obj","isColorLike","FillGradient","FillPattern","hasOwnProperty","call","fillGradientStops","defaultTextStyle","parseInt","gradientFill","fills","number","ratio","addColorStop","convertV7Tov8Style","fullStyle","_align","_dropShadow","_createProxy","_fontFamily","_fontSize","_fontStyle","toLowerCase","fontVariant","_fontVariant","fontWeight","_fontWeight","_leading","_letterSpacing","_lineHeight","_trim","_textBaseline","_whiteSpace","_wordWrapWidth","_originalFill","_isFillStyle","GraphicsContext","defaultFillStyle","toFillStyle","_originalStroke","defaultStrokeStyle","toStrokeStyle","_generateKey","_styleKey","defaultStyle","destroyTextureSource","cb","Proxy","target","property","newValue","PI","tempBounds","image","HTMLTextPipe","htmlText","textureNeedsUploading","htmlTextUid","catch","e","console","error","generatingTexture","nssvg","nsxhtml","HTMLTextRenderData","svgRoot","document","createElementNS","foreignObject","domElement","styleElement","Image","setAttribute","overflow","appendChild","textStyleToCSS","cssStyles","toHex","strokeToCSS","dropShadowToCSS","cssOverrides","tagStyles","tagStyle","cssTagStyle","templates","tagStyleToCSS","dropShadowStyle","toHexa","HTMLTextStyle","_cssOverrides","_cssStyle","cssStyle","addOverride","_len","_key","toAdd","v","removeOverride","_len2","_key2","toRemove","loadFontCSS","url","dataSrc","response","fetch","blob","reader","FileReader","Promise","resolve","reject","onloadend","onerror","readAsDataURL","loadFontAsBase64","FontStylePromiseCache","Map","tempHTMLTextRenderData","HTMLTextSystem","_createCanvas","WEBGPU","_buildTexturePromise","promise","then","htmlTextData","fontFamilies","dedupe","matches","match","addFontFamily","fontFamily2","extractFontFamilies","fontCSS","fontPromises","all","getFontCss","fontStyleCSS","htmlTextRenderData","innerHTML","textContent","body","contentBounds","getBoundingClientRect","doublePadding","measureHtmlText","svgURL","toString","XMLSerializer","serializeToString","getSVGUrl","delay","async","resolve2","setTimeout","onload","src","encodeURIComponent","crossOrigin","loadSVGImage","userAgent","getNavigator","isSafari","drawImage","getTemporaryCanvasFromImage","_cleanUp","defaultFontOptions","blendModeIds","normal","multiply","screen","overlay","erase","_State","polygonOffset","blend","depthMask","offsets","cullMode","culling","clockwiseFrontFace","depthTest","_blendMode","_blendModeId","_polygonOffset","genericFontFamilies","fontSizeString","_PlaneGeometry","verticesX","verticesY","build","verts","sizeX","sizeY","totalSub","xpos","ypos","value2","value3","value4","buffers","PlaneGeometry","_NineSliceGeometry","_originalWidth","originalWidth","_originalHeight","originalHeight","_leftWidth","leftWidth","_rightWidth","rightWidth","_topHeight","topHeight","_bottomHeight","bottomHeight","_anchorX","_anchorY","updatePositions","p","w","scaleW","h","scaleH","anchorOffsetX","anchorOffsetY","_uvw","_uvh","NineSliceGeometry","NineSliceSpritePipe","_gpuSpriteHash","gpuSprite","_getGpuSprite","_updateBatchableSprite","_initGPUSprite","GlParticleContainerAdaptor","particleContainerPipe","defaultShader","gl","getBuffers","glType","BYTES_PER_ELEMENT","UNSIGNED_SHORT","UNSIGNED_INT","drawElements","TRIANGLES","particleChildren","createIndicesForQuads","outBuffer","totalIndices","Uint16Array","generateUpdateFunction","dynamic","funcFragments","code","getAttributeInfoFromFormat","unshift","functionSource","Function","ParticleBuffer","_size","_generateParticleUpdateCache","staticVertexSize","dynamicVertexSize","attributeInfo","_dynamicStride","_staticStride","staticAttributeBuffer","ViewableBuffer","dynamicAttributeBuffer","dynamicOffset","staticOffset","_staticBuffer","_dynamicBuffer","addAttribute","attributeName","addIndex","uploadFunction","getParticleUpdate","_dynamicUpload","dynamicUpdate","_staticUpload","staticUpdate","keyGen","getParticleSyncKey","generateParticleUpdate","generateParticleUpdateFunction","particles","uploadStatic","setDataWithSize","byteLength","float32View","uint32View","ParticleShader","GlProgram","GpuProgram","wgsl","entryPoint","TextureStyle","uTranslationMatrix","uResolution","ParticleContainerPipe","_gpuBufferHash","_renderable","_initBuffer","_properties","children","_childrenDirty","transformationMatrix","globalUniformData","projectionMatrix","GlParticleContainerPipe","GpuParticleContainerAdaptor","getUniformBindGroup","getTextureBindGroup","GpuParticleContainerPipe","PRECISION","textMetrics","pattern","createPattern","setTransform","fillPattern","fillGradient","isLinear","isLocal","textureSpace","gradient","isNearlyVertical","createLinearGradient","center","innerRadius","outerCenter","outerRadius","createRadialGradient","colorStops","globalStop"],"sourceRoot":""}