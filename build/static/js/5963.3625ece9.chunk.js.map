{"version":3,"file":"static/js/5963.3625ece9.chunk.js","mappings":"qGAAO,IAAKA,E,iBAAZ,SAAYA,GAERA,EAAA,uBACAA,EAAA,uBAGAA,EAAA,cACAA,EAAA,cACH,CARD,CAAYA,IAAAA,EAAmB,I,6mBCwCxB,IAAMC,EAAaC,EAAnB,cAA4BC,EAAAA,GAA5BC,WAAAA,G,oBAKH,KAAAC,KAAOC,EAAAA,EAAkBC,QAEzB,KAAAC,YAAa,EAEb,KAAAC,WAAY,EA+BJ,KAAAC,OAAQ,CAoCpB,CAjEI,QACIC,GACA,OAAOC,KAAKF,KAChB,CACA,QAAIC,CAAKE,GACQD,KAAKF,QACLG,IACTD,KAAKF,MAAQG,EACTA,EACAX,EAAcS,KAAK,CACfN,KAAMO,KAAKP,KACXI,UAAWG,KAAKH,UAChBD,WAAYI,KAAKJ,WACjBM,KAAMF,KACNG,aAAcA,KACVH,KAAKF,OAAQ,EACbE,KAAKI,eAAehB,EAAAA,EAAoBiB,OAAO,EAEnDC,aAAcA,KACVN,KAAKI,eAAehB,EAAAA,EAAoBmB,OAAO,IAIvDjB,EAAckB,KAAKR,MAG/B,CAOO,WAAOD,CAAKU,GACfnB,EAAcc,eAAehB,EAAAA,EAAoBsB,KAAIC,OAAAC,OAAA,GAC9CH,GAEX,CACO,WAAOD,CAAKK,GACfvB,EAAcc,eAAehB,EAAAA,EAAoB0B,KAAM,CAAEZ,KAAMW,GACnE,CAEUE,MAAAA,GACN,OAAOC,EAAAA,EAAI,eACf,CAYQZ,cAAAA,CAAea,GACnB,OAAOjB,KAAKkB,cACR,IAAIC,YAAYF,EAAM,CAClBG,YAAY,EACZC,SAAS,EACTC,UAAU,IAGtB,GAlBejC,EAAAe,eAAiB,CAACa,EAAMM,KACnCC,OAAON,cACH,IAAIC,YAAYF,EAAM,CAClBM,OAAMZ,OAAAC,OAAA,GACCW,KAGd,EA3DLE,EAAA,EADCC,EAAAA,EAAAA,IAAS,CAAEC,KAAMjC,EAAAA,EAAmBkC,UAAW,SAAS,oDAGzDH,EAAA,EADCC,EAAAA,EAAAA,IAAS,CAAEC,KAAME,QAASC,SAAS,EAAMC,UAAWC,EAAAA,KAAmB,0DAGxEP,EAAA,EADCC,EAAAA,EAAAA,IAAS,CAAEC,KAAME,QAASC,SAAS,EAAMC,UAAWC,EAAAA,KAAmB,yDAGxEP,EAAA,EAACC,EAAAA,EAAAA,IAAS,CAAEC,KAAME,QAASC,SAAS,EAAMC,UAAWC,EAAAA,KAAmB,kFAX/D3C,EAAaC,EAAAmC,EAAA,EANzBQ,EAAAA,EAAAA,IAAc,CACXC,QAAS,iBACTC,OClC+CC,IACxC,CACHC,EAAAA,GACAC,EAAAA,EAAG;;;;WDgCPC,QElCmB,YFqCVlD,E,kBGxCN,IAAKK,EAMA8C,E,yBANZ,SAAY9C,GACRA,EAAA,yBACAA,EAAA,cACAA,EAAA,kBACAA,EAAA,aACH,CALD,CAAYA,IAAAA,EAAiB,KAM7B,SAAY8C,GACRA,EAAA,WACAA,EAAA,0BACAA,EAAA,yBACH,CAJD,CAAYA,IAAAA,EAAiB,I","sources":["../node_modules/@umetrics/sartorius-ui-dialog-service/src/dialogServiceEvents.ts","../node_modules/@umetrics/sartorius-ui-dialog-service/src/dialogService.ts","../node_modules/@umetrics/sartorius-ui-dialog-service/src/dialogServiceStyle.ts","../node_modules/@umetrics/sartorius-ui-dialog-service/src/metadata.ts","../node_modules/@umetrics/sartorius-ui-dialog-service/src/dialogServiceProperties.ts"],"sourcesContent":["export enum DialogServiceEvents {\n    /* Dispatched on window by service to trigger show/hide in dialog manager. For manager only! */\n    Show = 'sui-dialog-show',\n    Hide = 'sui-dialog-hide',\n\n    /* Dispatched on self when open/closed. For client to use! */\n    Opened = 'open',\n    Closed = 'close',\n}\n","import { DialogServiceEvents } from './dialogServiceEvents';\nimport { version } from './metadata';\nimport { BaseElement, booleanConverter, defineElement, html, property } from '@umetrics/sartorius-ui-base';\nimport { DialogServiceProperties, DialogServiceSize } from './dialogServiceProperties';\nimport { dialogServiceStyles } from './dialogServiceStyle';\n\n/**\n * SnackbarOptions\n *\n * id : Unique ID of message. Could be set if message should later be updated or removed.\n *\n * root: The node with children to be moved between service and dialog. Ie the dialog content.\n *\n * hideCallback : Callback function called when dialog is closed\n * showCallback : Callback function called when dialog is opened\n */\nexport interface DialogServiceOptions {\n    id?: string;\n\n    root: HTMLElement;\n\n    //    noOverlay?: boolean; // Global defined behaviour in manager!?\n    //    clickOutsideClose?: boolean; // Global defined behaviour in manager!?\n    //    escapeClose?: boolean; // Global defined behaviour in manager!?\n    //    header?: string; // Use slot\n\n    size?: string | DialogServiceSize;\n    resizeable?: boolean;\n    draggable?: boolean;\n\n    hideCallback?: null | (() => void);\n    showCallback?: null | (() => void);\n}\n\n@defineElement({\n    tagName: 'dialog-service',\n    styles: dialogServiceStyles,\n    version,\n    //    sub: []\n})\nexport class DialogService extends BaseElement implements DialogServiceProperties {\n    // Static members\n\n    // Public members\n    @property({ type: DialogServiceSize, attribute: 'size' })\n    size = DialogServiceSize.Default;\n    @property({ type: Boolean, reflect: true, converter: booleanConverter })\n    resizeable = false;\n    @property({ type: Boolean, reflect: true, converter: booleanConverter })\n    draggable = false;\n\n    @property({ type: Boolean, reflect: true, converter: booleanConverter })\n    get show() {\n        return this._show;\n    }\n    set show(value) {\n        const prev = this._show;\n        if (prev !== value) {\n            this._show = value;\n            if (value) {\n                DialogService.show({\n                    size: this.size,\n                    draggable: this.draggable,\n                    resizeable: this.resizeable,\n                    root: this,\n                    hideCallback: () => {\n                        this._show = false;\n                        this._dispatchEvent(DialogServiceEvents.Closed);\n                    },\n                    showCallback: () => {\n                        this._dispatchEvent(DialogServiceEvents.Opened);\n                    },\n                });\n            } else {\n                DialogService.hide(this);\n            }\n        }\n    }\n\n    // Private members\n    private _show = false;\n\n    // Protected members\n\n    public static show(options: DialogServiceOptions) {\n        DialogService._dispatchEvent(DialogServiceEvents.Show, {\n            ...options,\n        });\n    }\n    public static hide(service) {\n        DialogService._dispatchEvent(DialogServiceEvents.Hide, { root: service });\n    }\n\n    protected render() {\n        return html`<slot></slot>`;\n    }\n\n    private static _dispatchEvent = (name, detail) => {\n        window.dispatchEvent(\n            new CustomEvent(name, {\n                detail: {\n                    ...detail,\n                },\n            })\n        );\n    };\n\n    private _dispatchEvent(name: DialogServiceEvents) {\n        return this.dispatchEvent(\n            new CustomEvent(name, {\n                cancelable: true,\n                bubbles: true,\n                composed: true,\n            })\n        );\n    }\n}\n","import { css, CSSResultArray, GenerateStyles, style } from '@umetrics/sartorius-ui-base';\n\nexport const dialogServiceStyles: GenerateStyles = () => {\n    return [\n        style,\n        css`\n            :host {\n                display: none;\n            }\n        `,\n    ] as CSSResultArray;\n};\n","/*\n * Metadata build info for package. Managed at build time by task tools/metadata.ts\n */\nexport const version = '0.0.0';\nexport const buildDate = '2021-10-06- 02:02:02.000';\n","export enum DialogServiceSize {\n    ExtraSmall = 'extra-small',\n    Small = 'small',\n    Default = 'default',\n    Large = 'large',\n}\nexport enum DialogServiceSlot {\n    DEFAULT = '',\n    HEADER_SLOT = 'header-slot',\n    BUTTON_SLOT = 'button-slot',\n}\nexport interface DialogServiceProperties {\n    show?: boolean;\n\n    size?: string | DialogServiceSize;\n    resizeable?: boolean;\n    draggable?: boolean;\n\n    onOpen?: any;\n    onClose?: any;\n}\n"],"names":["DialogServiceEvents","DialogService","DialogService_1","BaseElement","constructor","size","DialogServiceSize","Default","resizeable","draggable","_show","show","this","value","root","hideCallback","_dispatchEvent","Closed","showCallback","Opened","hide","options","Show","Object","assign","service","Hide","render","html","name","dispatchEvent","CustomEvent","cancelable","bubbles","composed","detail","window","__decorate","property","type","attribute","Boolean","reflect","converter","booleanConverter","defineElement","tagName","styles","dialogServiceStyles","style","css","version","DialogServiceSlot"],"sourceRoot":""}