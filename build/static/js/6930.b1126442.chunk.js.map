{"version":3,"file":"static/js/6930.b1126442.chunk.js","mappings":"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","sources":["../node_modules/@umetrics/sartorius-ui-ellipsing-title/src/ellipsingTitle.ts","../node_modules/@umetrics/sartorius-ui-ellipsing-title/src/ellipsingTitleStyle.ts","../node_modules/@umetrics/sartorius-ui-ellipsing-title/src/metadata.ts"],"sourcesContent":["import {\n    BaseElement,\n    booleanConverter,\n    createClassName,\n    defineElement,\n    html,\n    live,\n    property,\n    state,\n    unsafeStatic,\n} from '@umetrics/sartorius-ui-base';\nimport { version } from './metadata';\nimport { EllipsingTitleProperties } from './ellipsingTitleProperties';\nimport { ellipsingTitleStyles } from './ellipsingTitleStyle';\nimport { TooltipService } from '@umetrics/sartorius-ui-tooltip-service';\n\n@defineElement({\n    tagName: 'ellipsing-title',\n    styles: ellipsingTitleStyles,\n    version,\n    //    sub: [TooltipService]\n})\nexport class EllipsingTitle extends BaseElement implements EllipsingTitleProperties {\n    // Static members\n\n    // Private members\n    private static TooltipService;\n    // Protected members\n\n    // Public members\n    @property({ type: String })\n    public label;\n    @property({ type: String })\n    public type;\n    @property({ type: Boolean, reflect: true, converter: booleanConverter })\n    editable;\n\n    @state()\n    private _isEllipsis = false;\n    @state()\n    private _isSlotted = false;\n    @state()\n    private _isEdit = false;\n\n    connectedCallback() {\n        this.style.setProperty('display', 'none');\n        const imports: any[] = [];\n\n        imports.push({ module: () => import('@umetrics/sartorius-ui-tooltip-service'), elem: ['TooltipService'] });\n\n        EllipsingTitle.dynSubRegister(imports, () => {\n            super.connectedCallback();\n            this.style.removeProperty('display');\n        });\n    }\n\n    public focus() {\n        if (this.editable && !this._isEdit) {\n            this._isEdit = true;\n            this._dispatchEvent('title-focus');\n            this._focusInput(true);\n        }\n    }\n\n    protected updated(_changedProperties) {\n        const prevEdit = _changedProperties.get('_isEdit');\n        if (prevEdit !== undefined && !prevEdit && this._isEdit) {\n            this._focusInput();\n        }\n\n        super.updated(_changedProperties);\n    }\n\n    // Internals, from parent\n    protected render() {\n        const [baseClassName, rootClasses] = createClassName(this.tagName.toLowerCase(), {});\n\n        const inner = this._isSlotted ? null : html`${this.label}`;\n\n        // Can only show tooltip for clipped labels when label is in prop. Not for slotted label!\n        const tooltip =\n            this.label && this._isEllipsis && !this._isEdit\n                ? html`\n                    <${\n                        EllipsingTitle.TooltipService.tag\n                    } class='${baseClassName}-tooltip' object-id='lbl' ?disabled='${!this._isEllipsis}'>\n                        ${this.label}\n                    </${EllipsingTitle.TooltipService.tag}>`\n                : null;\n\n        const level = this.editable ? 'input' : this.type || 'div';\n\n        const titleHtml = this.editable\n            ? html`<input\n                  class=\"${baseClassName}-inner\"\n                  .value=\"${live(this.label)}\"\n                  @click=${() => {\n                      this._isEdit = true;\n                      this._dispatchEvent('title-focus');\n                  }}\n                  @blur=\"${() => {\n                      this._isEdit = false;\n                      this._dispatchEvent('title-blur');\n                  }}\"\n                  @change=${(e) => this._dispatchEvent('title-change', { value: e.target.value })}\n                  @keydown=\"${(e) => {\n                      if (this._isEdit) {\n                          if (e.key === 'Escape') {\n                              this._blurInput();\n                              e.stopPropagation();\n                          }\n                      }\n                  }}\"\n                  @mouseenter=\"${this._isEllipsisActive}\"\n              />`\n            : html`\n                <${unsafeStatic(level)} id=\"lbl\" class='${baseClassName}-inner' @mouseenter=\"${\n                    this._isEllipsisActive\n                }\" @click=${() => {\n                    this._isEdit = true;\n                }}>\n                    <slot @slotchange=\"${this._handleSlotChange}\"></slot>\n                    ${inner}\n                </${unsafeStatic(level)}>\n            `;\n\n        return html` <div class=\"${rootClasses}\">\n            <slot name=\"right-slot\"></slot>\n            ${titleHtml}\n            <slot name=\"left-slot\"></slot>\n            ${tooltip}\n        </div>`;\n    }\n\n    private _input = () => this.shadowRoot?.querySelector('input');\n\n    private _focusInput(markAll = false) {\n        const input = this._input();\n        if (input && this.shadowRoot?.activeElement !== input) {\n            input.focus();\n            input.setSelectionRange(markAll ? 0 : input.value.length, input.value.length);\n            input.scrollLeft = input.scrollWidth;\n        }\n    }\n\n    private _blurInput() {\n        const input = this._input();\n        if (input) {\n            input.blur();\n        }\n    }\n\n    private _dispatchEvent(event: 'title-change' | 'title-focus' | 'title-blur', detail = {}) {\n        this.dispatchEvent(\n            new CustomEvent(event, {\n                bubbles: true,\n                composed: true,\n                cancelable: true,\n                detail,\n            })\n        );\n    }\n\n    private async _handleSlotChange(e) {\n        const target = e.target as HTMLSlotElement;\n        this._isSlotted = target.assignedNodes().filter((node) => node.nodeType === 1).length > 0;\n    }\n\n    private _isEllipsisActive(e) {\n        this._isEllipsis = e.target.offsetWidth < e.target.scrollWidth;\n        const tt = () => this.shadowRoot!.querySelector('[class*=\"-tooltip\"]') as TooltipService;\n        if (this._isEllipsis) {\n            this.updateComplete.then(() => {\n                const tooltip = tt();\n                if (tooltip) {\n                    tooltip.object = e.target;\n                    tooltip.disabled = false;\n                    tooltip.show = this._isEllipsis;\n                }\n            });\n        } else {\n            const tooltip = tt();\n            if (tooltip) {\n                tooltip.disabled = true;\n            }\n        }\n    }\n}\n","import { css, cssSelector, GenerateStyles, style } from '@umetrics/sartorius-ui-base';\n\nexport const ellipsingTitleStyles: GenerateStyles = (tagName) => {\n    const { root, child } = cssSelector(tagName);\n    return [\n        style,\n        css`\n            :host,\n            :host::before,\n            :host::after,\n            :host *,\n            :host *::before,\n            :host *::after {\n                box-sizing: border-box;\n            }\n\n            :host {\n                display: block;\n                overflow: hidden;\n                margin: auto;\n            }\n\n            ${root} {\n                display: flex;\n                height: 100%;\n            }\n\n            ${child('inner')} {\n                display: block;\n                overflow: hidden;\n                width: 100%;\n                white-space: nowrap;\n                text-overflow: ellipsis;\n                padding: 1px 0 0 0;\n            }\n            input${child('inner')} {\n                font-size: inherit;\n                line-height: inherit;\n                font-weight: inherit;\n                font-family: inherit;\n\n                margin: 0;\n                border: 0;\n                background-color: inherit;\n                cursor: text;\n                outline: 0;\n            }\n            input${child('inner')}[readonly] {\n                outline: none;\n            }\n\n            slot:not([name])::slotted(*) {\n                overflow: hidden;\n                white-space: nowrap;\n                text-overflow: ellipsis;\n            }\n        `,\n    ];\n};\n","/*\n * Metadata build info for package. Managed at build time by task tools/metadata.ts\n */\nexport const version = '0.0.0';\nexport const buildDate = '2021-02-02- 02:02:02.000';\n"],"names":["EllipsingTitle","EllipsingTitle_1","BaseElement","constructor","_isEllipsis","_isSlotted","_isEdit","_input","_a","this","shadowRoot","querySelector","connectedCallback","style","setProperty","imports","push","module","elem","dynSubRegister","super","removeProperty","focus","editable","_dispatchEvent","_focusInput","updated","_changedProperties","prevEdit","get","undefined","render","baseClassName","rootClasses","createClassName","tagName","toLowerCase","inner","html","label","tooltip","TooltipService","tag","level","type","titleHtml","live","e","value","target","key","_blurInput","stopPropagation","_isEllipsisActive","unsafeStatic","_handleSlotChange","markAll","arguments","length","input","activeElement","setSelectionRange","scrollLeft","scrollWidth","blur","event","detail","dispatchEvent","CustomEvent","bubbles","composed","cancelable","assignedNodes","filter","node","nodeType","offsetWidth","tt","updateComplete","then","object","disabled","show","__decorate","property","String","Boolean","reflect","converter","booleanConverter","state","defineElement","styles","root","child","cssSelector","css","version"],"sourceRoot":""}