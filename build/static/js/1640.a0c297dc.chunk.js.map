{"version":3,"file":"static/js/1640.a0c297dc.chunk.js","mappings":"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","sources":["../node_modules/@umetrics/sartorius-ui-chips/src/chipsStyle.ts","../node_modules/@umetrics/sartorius-ui-chips/src/metadata.ts","../node_modules/@umetrics/sartorius-ui-chips/src/chips.ts","../node_modules/@umetrics/sartorius-ui-chips/src/chipEvent.ts","../node_modules/@umetrics/sartorius-ui-chips/src/chip.ts","../node_modules/@umetrics/sartorius-ui-chips/src/chipStyle.ts","../node_modules/@umetrics/sartorius-ui-icon/src/icons/cancel.ts","../node_modules/@umetrics/sartorius-ui-icon/src/registerIcon.ts","../node_modules/@umetrics/sartorius-ui-icon/src/metadata.ts"],"sourcesContent":["import { cssSelector, GenerateStyles, style, unsafeCSS } from '@umetrics/sartorius-ui-base';\n\nexport const chipsStyles: GenerateStyles = (tagName) => {\n    const { root } = cssSelector(tagName);\n\n    return [\n        style,\n        unsafeCSS(`           \n            :host {\n                display: inline-block;\n                width: 100%;\n                margin: 0;\n                padding: 0;\n            }\n            \n            ${root} {\n                width: 100%;\n            }\n        `),\n    ];\n};\n","/*\n * Metadata build info for package. Managed at build time by task tools/metadata.ts\n */\nexport const version = '0.0.0';\nexport const buildDate = '2022-06-28- 14:00:00.000';\n","import { BaseElement, defineElement, html } from '@umetrics/sartorius-ui-base';\nimport { chipsStyles } from './chipsStyle';\nimport { version } from './metadata';\n\n@defineElement({ tagName: 'chips', styles: chipsStyles, version })\nexport class Chips extends BaseElement {\n    // Static members\n\n    // Public members\n\n    // Private members\n    // Public methods\n\n    // Protected methods\n    protected firstUpdated(_changedProperties) {\n        super.firstUpdated(_changedProperties);\n    }\n\n    protected render() {\n        return html` <slot></slot>`;\n    }\n\n    // Private methods\n}\n","export enum ChipEvent {\n    ChipAdded = 'chip-added',\n    ChipRemoved = 'chip-removed',\n}\n","import { BaseElement, createClassName, defineElement, html } from '@umetrics/sartorius-ui-base';\nimport { chipStyles } from './chipStyle';\nimport { version } from './metadata';\nimport cancel from '@umetrics/sartorius-ui-icon/dist/icons/cancel';\nimport { ChipEvent } from './chipEvent';\n\n@defineElement({ tagName: 'chip', styles: chipStyles, version })\nexport class Chip extends BaseElement {\n    // Static members\n    private static Icon;\n\n    private static animations = {\n        anims: {\n            onRender: [\n                {\n                    transform: 'scale(0.8)',\n                    transformOrigin: 'center',\n                },\n                {\n                    transform: 'scale(1)',\n                    transformOrigin: 'center',\n                },\n            ],\n            onRemove: [\n                {\n                    transform: 'scale(1)',\n                    transformOrigin: 'center',\n                },\n                {\n                    transform: 'scale(0.8)',\n                    transformOrigin: 'center',\n                },\n            ],\n        },\n    };\n\n    // Public members\n\n    // Private members\n    // Public methods\n\n    connectedCallback() {\n        this.style.setProperty('display', 'none');\n        const imports: any[] = [];\n        imports.push({ module: () => import('@umetrics/sartorius-ui-icon'), elem: ['Icon'] });\n        Chip.dynSubRegister(imports, () => {\n            super.connectedCallback();\n            this.style.removeProperty('display');\n        });\n    }\n\n    // Protected methods\n    protected firstUpdated(_changedProperties) {\n        super.firstUpdated(_changedProperties);\n        const chip = this.shadowRoot?.querySelector('button');\n        const animationKeyframes = Chip.animations['anims'].onRender;\n        const animationOptions = {\n            duration: 100,\n            iterations: 1,\n        };\n        const enterAnimation = chip?.animate ? chip.animate(animationKeyframes, animationOptions) : undefined;\n        if (enterAnimation) {\n            enterAnimation.onfinish = () => {\n                this._dispatchChipEvent(ChipEvent.ChipAdded, this);\n                this.requestUpdate();\n            };\n        } else this._dispatchChipEvent(ChipEvent.ChipAdded, this);\n    }\n\n    protected render() {\n        const [baseClassName, rootClasses] = createClassName(this.tagName.toLowerCase(), {});\n\n        return html` \n            <button class=\"${rootClasses} ${baseClassName}\"><div class=\"${baseClassName}-text\"><slot></slot></div>\n                <div class=\"${baseClassName}-close\" @click=\"${this._handleClose}\">\n                    <${Chip.Icon.tag} size=\"small\" icon=\"${cancel}\"></${Chip.Icon.tag}>\n                </div>\n            </button>`;\n    }\n\n    // Private methods\n\n    private _handleClose() {\n        const chip = this.shadowRoot?.querySelector('button');\n        const animationKeyframes = Chip.animations['anims'].onRemove;\n        const animationOptions = {\n            duration: 100,\n            iterations: 1,\n        };\n        const exitAnimation = chip?.animate ? chip.animate(animationKeyframes, animationOptions) : undefined;\n        if (exitAnimation) {\n            exitAnimation.onfinish = () => {\n                this._dispatchChipEvent(ChipEvent.ChipRemoved, this);\n                this.remove();\n                this.requestUpdate();\n            };\n        } else {\n            this._dispatchChipEvent(ChipEvent.ChipRemoved, this);\n            this.remove();\n        }\n    }\n\n    private _dispatchChipEvent(eventName: string, chip: Chip) {\n        this.dispatchEvent(\n            new CustomEvent(eventName, {\n                bubbles: true,\n                composed: true,\n                cancelable: true,\n                detail: chip,\n            })\n        );\n    }\n}\n","import { cssSelector, cssVariableAsVar, GenerateStyles, style, unsafeCSS } from '@umetrics/sartorius-ui-base';\n\nexport const chipStyles: GenerateStyles = (tagName) => {\n    const { root, child } = cssSelector(tagName);\n\n    return [\n        style,\n        unsafeCSS(`           \n            :host {\n                display: inline-block;\n            }\n            \n            ${root} {\n                min-width: 39px;\n                display: flex;\n                flex-direction: row;\n                justify-content: space-between;\n                align-items: center;\n                background: ${cssVariableAsVar('color_secondary_3')};\n                max-width: 200px;\n                height: 24px;\n                margin-right: 7px;\n                margin-bottom: 7px;\n                padding: 0;\n                transition: background 0.1s;\n                border: none;\n            }\n            ${child('text')} {\n                display: flex;\n                font-size: 12px;\n                margin-left: 7px;\n                white-space: nowrap;\n                align-items: center;\n                text-overflow: ellipsis;\n                overflow: hidden;\n                height: 100%;\n            }\n\n            ${child('close')} {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                margin-left: 7px;\n                width: 24px;\n                height: 24px;\n                cursor: pointer;\n                color: ${cssVariableAsVar('color_primary_3')};\n            }\n\n            ${child('close')}:hover {\n                background: ${cssVariableAsVar('color_secondary_4')};\n            }\n            ${child('close')}:active {\n                background: ${cssVariableAsVar('color_secondary_5')}\n            }\n        `),\n    ];\n};\n","/**\n * Icon cancel\n **/\nimport { registerIcon } from '../registerIcon';\nconst data = {\"name\":\"cancel\",\"data\":\"<svg fill=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M6.6 5.4 5.4 6.6l5.4 5.4-5.4 5.4 1.2 1.2 5.4-5.4 5.4 5.4 1.2-1.2-5.4-5.4 5.4-5.4-1.2-1.2-5.4 5.4z\\\"/></svg>\"}; //NOSONAR\nconst cancel = registerIcon(data);\nexport default cancel;\n\n","import { version } from './metadata';\n\nlet icons;\nconst getStash = () => {\n    if (!icons) {\n        let studio = window['studio'];\n        if (!studio) {\n            studio = window['studio'] = {};\n        }\n        let sui = studio['sui'];\n        if (!sui) {\n            sui = studio['sui'] = {};\n        }\n        const major = version.split('.')[0] || version;\n        const stash = `icons${major}`;\n        icons = icons || sui[stash];\n        if (!icons) {\n            icons = sui[stash] = {};\n        }\n    }\n    return icons;\n};\n\nexport const registerIcon = (data) => {\n    const stash = getStash();\n    if (!stash[data.name]) {\n        stash[data.name] = data.data;\n    }\n    return data.name;\n};\n\nexport const fetchIcon = (icon) => {\n    return getStash()[icon];\n};\n","/*\n * Metadata build info for package. Managed at build time by task tools/metadata.ts\n */\nexport const version = '0.0.0';\nexport const buildDate = '2021-02-02- 02:02:02.000';\n"],"names":["version","Chips","BaseElement","firstUpdated","_changedProperties","super","render","html","__decorate","defineElement","tagName","styles","root","cssSelector","style","unsafeCSS","ChipEvent","Chip","Chip_1","connectedCallback","this","setProperty","imports","push","module","elem","dynSubRegister","removeProperty","chip","_a","shadowRoot","querySelector","animationKeyframes","animations","onRender","enterAnimation","animate","duration","iterations","undefined","onfinish","_dispatchChipEvent","ChipAdded","requestUpdate","baseClassName","rootClasses","createClassName","toLowerCase","_handleClose","Icon","tag","cancel","onRemove","exitAnimation","ChipRemoved","remove","eventName","dispatchEvent","CustomEvent","bubbles","composed","cancelable","detail","anims","transform","transformOrigin","child","cssVariableAsVar","registerIcon","icons","getStash","studio","window","sui","stash","split","data","name","fetchIcon","icon"],"sourceRoot":""}