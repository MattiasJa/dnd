{"version":3,"file":"static/js/567.d767598e.chunk.js","mappings":"mnBAMO,IAAMA,EAAN,cAAsBC,EAAAA,GAAtBC,WAAAA,G,oBAQS,KAAAC,KAAO,OAEnB,KAAAC,MAAQ,EA2CZ,CAzCcC,MAAAA,GACN,MAAOC,EAAeC,IAAeC,EAAAA,EAAAA,IAAgBC,KAAKC,QAAQC,cAAe,CAAC,GAC5EC,EAA2B,KAAfH,KAAKL,MAAeS,EAAAA,EAAI,eAAeP,YAAwBG,KAAKL,cAAgB,KACtG,IAAIU,EAEJ,OAAQL,KAAKN,MACT,IAAK,QACDW,EAAY,OACZ,MACJ,IAAK,SACDA,EAAY,OACZ,MACJ,IAAK,QACDA,EAAY,OACZ,MACJ,QACIA,EAAYL,KAAKN,KAGzB,OAAOU,EAAAA,EAAI;0BACOP;;6BAEGC;6BACAO;8BACCA;;;;qCAIOR;;iCAEJA;;;;;;;kBAOfM;;SAGd,GCnDG,IAAKG,EAMAC,EDCIC,EAAA,EAAXC,EAAAA,EAAAA,MAAU,oDAEXD,EAAA,EADCC,EAAAA,EAAAA,IAAS,CAAEC,KAAMC,OAAQC,SAAS,IAAQ,qDATlCrB,EAAOiB,EAAA,EADnBK,EAAAA,EAAAA,IAAc,CAAEZ,QAAS,UAAWa,OEDSb,IAC1C,MAAM,KAAEc,EAAI,MAAEC,IAAUC,EAAAA,EAAAA,IAAYhB,GAEpC,MAAO,CACHiB,EAAAA,GACAC,EAAAA,EAAG;;;;;;;;;;;;;;cAcGJ;;;;;cAKAC,EAAM;;;;;;;cAONA,EAAM;;;;;cAKNA,EAAM;;;;cAINA,EAAM;;;;;;;;;;;;UAaf,EFpDuDI,QGFrC,YHGV7B,GCCb,SAAYe,GACRA,EAAA,cACAA,EAAA,gBACAA,EAAA,aACH,CAJD,CAAYA,IAAAA,EAAW,KAMvB,SAAYC,GACRA,EAAA,wBACAA,EAAA,sBACAA,EAAA,WACH,CAJD,CAAYA,IAAAA,EAAc,I","sources":["../node_modules/@sartorius-elements/spinner/src/spinner.ts","../node_modules/@sartorius-elements/spinner/src/spinnerProperties.ts","../node_modules/@sartorius-elements/spinner/src/spinnerStyle.ts","../node_modules/@sartorius-elements/spinner/src/metadata.ts"],"sourcesContent":["import { BaseElement, createClassName, defineElement, html, property } from '@sartorius-elements/base';\nimport { spinnerStyles } from './spinnerStyle';\nimport { SpinnerProperties } from './spinnerProperties';\nimport { version } from './metadata';\n\n@defineElement({ tagName: 'spinner', styles: spinnerStyles, version })\nexport class Spinner extends BaseElement implements SpinnerProperties {\n    // Static members\n\n    // Private members\n\n    // Protected members\n\n    // Public members\n    @property() size = '64px';\n    @property({ type: String, reflect: false })\n    label = '';\n\n    protected render() {\n        const [baseClassName, rootClasses] = createClassName(this.tagName.toLowerCase(), {});\n        const labelHtml = this.label !== '' ? html`<div class=\"${baseClassName}-label\">${this.label}</div>` : null;\n        let pixelSize;\n\n        switch (this.size) {\n            case 'large':\n                pixelSize = '64px';\n                break;\n            case 'medium':\n                pixelSize = '32px';\n                break;\n            case 'small':\n                pixelSize = '16px';\n                break;\n            default:\n                pixelSize = this.size;\n                break;\n        }\n        return html`\n            <div class=\"${baseClassName}-wrapper\">\n                <svg\n                    class=\"${rootClasses}\"\n                    width=\"${pixelSize}\"\n                    height=\"${pixelSize}\"\n                    viewBox=\"0 0 200 200\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                    <circle class=\"${baseClassName}-circle\" cx=\"100\" cy=\"100\" r=\"90\" fill=\"none\" stroke-width=\"20\" />\n                    <path\n                        class=\"${baseClassName}-arc\"\n                        d=\" M 100 10 A 90 90 0 0 1 190 100\"\n                        fill=\"none\"\n                        stroke-width=\"20\"\n                        shape-rendering=\"geometricPrecision\"\n                    />\n                </svg>\n                ${labelHtml}\n            </div>\n        `;\n    }\n}\n","export interface SpinnerProperties {\n    size?: SpinnerSize | string;\n    label?: string;\n    variant?: SpinnerVariant /* Deprecated */;\n    onGray?: boolean /* Deprecated */;\n}\n\nexport enum SpinnerSize {\n    Large = 'large',\n    Medium = 'medium',\n    Small = 'small',\n}\n\nexport enum SpinnerVariant {\n    LIGHT_GREY = 'light-grey',\n    DARK_GREY = 'dark-grey',\n    GREY = 'grey',\n}\n","import { cssSelector, GenerateStyles, style, css } from '@sartorius-elements/base';\n\n// see https://www.sartorius.com/brand-platform/applications/digital\n\nexport const spinnerStyles: GenerateStyles = (tagName) => {\n    const { root, child } = cssSelector(tagName);\n\n    return [\n        style,\n        css`\n            :host,\n            :host::before,\n            :host::after,\n            :host *,\n            :host *::before,\n            :host *::after {\n                box-sizing: border-box;\n            }\n\n            :host {\n                display: contents;\n            }\n\n            ${root} {\n                overflow: visible;\n                animation: rotate 1s infinite linear;\n            }\n\n            ${child('wrapper')} {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n                justify-content: center;\n            }\n\n            ${child('label')} {\n                margin-top: 8px;\n                color: var(--color-text-muted);\n            }\n\n            ${child('circle')} {\n                stroke: var(--color-surface-transparent);\n            }\n\n            ${child('arc')} {\n                stroke: var(--color-surface-action-active-full);\n            }\n\n            @keyframes rotate {\n                0% {\n                    transform: rotate(0deg);\n                }\n                100% {\n                    transform: rotate(359deg);\n                }\n            }\n        `,\n    ];\n};\n","/*\n * Metadata build info for package. Managed at build time by task tools/metadata.ts\n */\nexport const version = '0.0.0';\nexport const buildDate = '2021-02-02- 02:02:02.000';\n"],"names":["Spinner","BaseElement","constructor","size","label","render","baseClassName","rootClasses","createClassName","this","tagName","toLowerCase","labelHtml","html","pixelSize","SpinnerSize","SpinnerVariant","__decorate","property","type","String","reflect","defineElement","styles","root","child","cssSelector","style","css","version"],"sourceRoot":""}