{"version":3,"file":"static/js/6623.17e5305f.chunk.js","mappings":"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","sources":["../node_modules/@umetrics/sartorius-ui-icon/src/icons/arrowSort.ts","../node_modules/@umetrics/sartorius-ui-tree/src/treeEvent.ts","../node_modules/@umetrics/sartorius-ui-tree/src/tree.ts","../node_modules/@umetrics/sartorius-ui-tree/src/treeStyle.ts","../node_modules/@umetrics/sartorius-ui-tree/src/metadata.ts","../node_modules/@umetrics/sartorius-ui-icon/src/registerIcon.ts","../node_modules/@umetrics/sartorius-ui-icon/src/metadata.ts"],"sourcesContent":["/**\n * Icon arrowSort\n **/\nimport { registerIcon } from '../registerIcon';\nconst data = {\"name\":\"arrowSort\",\"data\":\"<svg fill=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"m17.82 9.846-5.808 5.82-5.808-5.82z\\\"/></svg>\"}; //NOSONAR\nconst arrowSort = registerIcon(data);\nexport default arrowSort;\n\n","export enum TreeEvent {\n    TreeNodeSelect = 'tree-node-select',\n    TreeNodeDeselect = 'tree-node-deselect',\n    TreeNodeExpand = 'tree-node-expand',\n    TreeNodeFold = 'tree-node-fold',\n}\n","import {\n    BaseElement,\n    booleanConverter,\n    createClassName,\n    defineElement,\n    html,\n    ifDefined,\n    property,\n    repeat,\n} from '@umetrics/sartorius-ui-base';\nimport { version } from './metadata';\nimport { treeStyles } from './treeStyle';\nimport type { TreeNode, TreeProperties } from './treeProperties';\nimport arrowSort from '@umetrics/sartorius-ui-icon/dist/icons/arrowSort';\nimport { TreeEvent } from './treeEvent';\n\n@defineElement({\n    tagName: 'tree',\n    styles: treeStyles,\n    version,\n    //    sub: [Collapse, Icon]\n})\nexport class Tree extends BaseElement implements TreeProperties {\n    // Static members\n    private static Collapse;\n    private static Icon;\n\n    // Private members\n\n    // Protected members\n\n    // Public members\n    @property({ type: Array<TreeNode>(), reflect: false })\n    public data: TreeNode[] = [];\n    @property({ type: Boolean, attribute: 'single-select', converter: booleanConverter })\n    public singleSelect = false;\n    @property({ type: Boolean, converter: booleanConverter })\n    public disabled = false;\n\n    connectedCallback() {\n        this.style.setProperty('display', 'none');\n        const imports: any[] = [];\n        imports.push({ module: () => import('@umetrics/sartorius-ui-collapse'), elem: ['Collapse'] });\n        imports.push({ module: () => import('@umetrics/sartorius-ui-icon'), elem: ['Icon'] });\n\n        Tree.dynSubRegister(imports, () => {\n            super.connectedCallback();\n            this.style.removeProperty('display');\n        });\n    }\n\n    protected render() {\n        const [baseClassName, rootClasses] = createClassName(this.tagName.toLowerCase(), {});\n\n        return html`\n            <div class=\"${rootClasses}\">${this._renderTree(baseClassName, this.data, 0, true, this.disabled)}</div>\n        `;\n    }\n\n    private _renderTree(baseClassName, node, level = 0, parentOpen = true, parentDisabled = false) {\n        return html`<ul class=\"${baseClassName}-ul\">\n            ${repeat(\n                node,\n                (i) => i,\n                (c: TreeNode, i) => this._renderNode(c, i, baseClassName, level, parentOpen, parentDisabled)\n            )}\n        </ul>`;\n    }\n\n    private _renderNode(c: TreeNode, i, baseClassName, level, parentOpen, parentDisabled) {\n        const open = !!c.open;\n        const selected = !!c.selected;\n        const nonSelectable = !!c.nonSelectable;\n        const disabled = !!c.disabled || parentDisabled;\n        const [baseClassNameNode, rootClassesNode] = createClassName(`${baseClassName}-node`, {\n            selected: selected && !disabled,\n            selectable: !(nonSelectable || disabled),\n            disabled: disabled,\n            open: open,\n        });\n\n        let inner;\n        let chevron;\n\n        if (c.children && c.children.length > 0) {\n            const id = `${level}${i}`;\n\n            chevron = html`<div class=\"${baseClassNameNode}-expand\" @click=${(e) =>\n                this._clickExpandHandler(e, c, open)}><${\n                Tree.Icon.tag\n            } class=\"${baseClassNameNode}-icon ${baseClassNameNode}-icon-${\n                open ? 'open' : 'close'\n            }\" icon=${arrowSort}></${Tree.Icon.tag}></div>`;\n\n            inner = parentOpen\n                ? html`\n        <${Tree.Collapse.tag} class=\"${baseClassNameNode}-collapse\" id=\"${id}\" ?open='${open}'>\n            ${this._renderTree(baseClassName, c.children, level + 1, open, disabled)}\n        </${Tree.Collapse.tag}>\n        `\n                : html``;\n        } else {\n            inner = null;\n            chevron = html`<div class=\"${baseClassNameNode}-expand\"></div>`;\n        }\n\n        return html`<li\n                class=\"${rootClassesNode}\"\n                @click=${nonSelectable ? null : (e) => this._clickSelectHandler(e, c, selected)}\n                style=\"--level: ${level};\"\n                data-testid=${ifDefined(c.id ? c.id : undefined)}\n            >\n                ${chevron}\n                <div class=\"${baseClassNameNode}-label\">${c.label}</div>\n            </li>\n            ${inner}`;\n    }\n\n    private _clickExpandHandler = (e, c: TreeNode, open) => {\n        c.open = !open;\n        this.requestUpdate('data');\n        e.stopPropagation();\n        this._doExpandCallbacks(c);\n        this._dispatchExpandEvent(c);\n    };\n\n    private _clickSelectHandler = (e, c: TreeNode, selected) => {\n        if (this.singleSelect && !selected) {\n            this._walkTreeAndCallback(this.data, (n) => {\n                if (n.selected) {\n                    n.selected = false;\n                    this._doSelectionCallbacks(n);\n                    this._dispatchSelectionEvent(n);\n                }\n            });\n        }\n        c.selected = !selected;\n        this.requestUpdate('data');\n        e.stopPropagation();\n        this._doSelectionCallbacks(c);\n        this._dispatchSelectionEvent(c);\n    };\n\n    private _walkTreeAndCallback(nodes: TreeNode[], cb: (node: TreeNode) => void) {\n        nodes.forEach((node) => {\n            cb(node);\n            if (node.children && node.children.length > 0) {\n                this._walkTreeAndCallback(node.children, cb);\n            }\n        });\n    }\n\n    private _doSelectionCallbacks = (c: TreeNode) => {\n        if (c.selected && c.callbackSelect) {\n            c.callbackSelect(c);\n        } else if (!c.selected && c.callbackDeselect) {\n            c.callbackDeselect(c);\n        }\n    };\n\n    private _doExpandCallbacks = (c: TreeNode) => {\n        if (c.open && c.callbackExpand) {\n            c.callbackExpand(c);\n        } else if (!c.open && c.callbackFold) {\n            c.callbackFold(c);\n        }\n    };\n\n    private _dispatchSelectionEvent = (c: TreeNode) =>\n        this._dispatchTreeNodeEvent(c, c.selected ? TreeEvent.TreeNodeSelect : TreeEvent.TreeNodeDeselect);\n\n    private _dispatchExpandEvent = (c: TreeNode) =>\n        this._dispatchTreeNodeEvent(c, c.open ? TreeEvent.TreeNodeExpand : TreeEvent.TreeNodeFold);\n\n    private _dispatchTreeNodeEvent = (c: TreeNode, event) =>\n        this.dispatchEvent(\n            new CustomEvent(event, {\n                detail: { node: c },\n            })\n        );\n}\n","import { css, cssSelector, cssVariableAsVar, GenerateStyles, style } from '@umetrics/sartorius-ui-base';\n\nexport const treeStyles: GenerateStyles = (tagName) => {\n    const tree = () => {\n        const { root, child } = cssSelector(tagName);\n        return css`\n            :host,\n            :host::before,\n            :host::after,\n            :host *,\n            :host *::before,\n            :host *::after {\n                box-sizing: border-box;\n            }\n\n            :host {\n                display: block;\n                width: 100%;\n                height: 100%;\n\n                --tree-outer-padding: 30px;\n                --tree-per-level-padding: 16px;\n                --tree-node-height: 36px;\n                --tree-label-color: ${cssVariableAsVar('color_primary_3')};\n            }\n\n            ${root} {\n                width: 100%;\n            }\n\n            ${child('ul')} {\n                width: 100%;\n                padding: 0;\n                margin: 0;\n            }\n        `;\n    };\n\n    /* a li node */\n    const node = () => {\n        const { root, child, is } = cssSelector(tagName + '-node');\n\n        return css`\n            ${root} {\n                display: flex;\n                align-items: center;\n                padding-left: calc(var(--tree-outer-padding) + var(--tree-per-level-padding) * var(--level, 1));\n                font-family: 'Roboto', serif;\n                font-weight: 400;\n                font-size: 14px;\n                height: var(--tree-node-height);\n                color: var(--tree-label-color);\n                user-select: none;\n            }\n\n            ${is('selectable')}:hover {\n                cursor: pointer;\n                background: #0000000a;\n            }\n\n            ${is('selected')} {\n                text-shadow: 0 0 1px var(--tree-label-color);\n            }\n\n            ${child('expand')} {\n                display: flex;\n                align-items: center;\n                min-width: 24px;\n                height: 24px;\n            }\n\n            ${is('disabled')} {\n                color: ${cssVariableAsVar('color_secondary_4')};\n            }\n\n            ${child('icon')} {\n                transition: transform 0.15s linear;\n\n                transform: rotate(-90deg);\n            }\n\n            ${child('icon-open')} {\n                transform: rotate(0deg);\n            }\n\n            ${child('label')} {\n                overflow: hidden;\n                white-space: nowrap;\n                text-overflow: ellipsis;\n            }\n        `;\n    };\n\n    return [style, tree(), node()];\n};\n","/*\n * Metadata build info for package. Managed at build time by task tools/metadata.ts\n */\nexport const version = '0.0.0';\nexport const buildDate = '2021-02-02- 02:02:02.000';\n","import { version } from './metadata';\n\nlet icons;\nconst getStash = () => {\n    if (!icons) {\n        let studio = window['studio'];\n        if (!studio) {\n            studio = window['studio'] = {};\n        }\n        let sui = studio['sui'];\n        if (!sui) {\n            sui = studio['sui'] = {};\n        }\n        const major = version.split('.')[0] || version;\n        const stash = `icons${major}`;\n        icons = icons || sui[stash];\n        if (!icons) {\n            icons = sui[stash] = {};\n        }\n    }\n    return icons;\n};\n\nexport const registerIcon = (data) => {\n    const stash = getStash();\n    if (!stash[data.name]) {\n        stash[data.name] = data.data;\n    }\n    return data.name;\n};\n\nexport const fetchIcon = (icon) => {\n    return getStash()[icon];\n};\n","/*\n * Metadata build info for package. Managed at build time by task tools/metadata.ts\n */\nexport const version = '0.0.0';\nexport const buildDate = '2021-02-02- 02:02:02.000';\n"],"names":["registerIcon","TreeEvent","Tree","Tree_1","BaseElement","constructor","data","singleSelect","disabled","_clickExpandHandler","e","c","open","this","requestUpdate","stopPropagation","_doExpandCallbacks","_dispatchExpandEvent","_clickSelectHandler","selected","_walkTreeAndCallback","n","_doSelectionCallbacks","_dispatchSelectionEvent","callbackSelect","callbackDeselect","callbackExpand","callbackFold","_dispatchTreeNodeEvent","TreeNodeSelect","TreeNodeDeselect","TreeNodeExpand","TreeNodeFold","event","dispatchEvent","CustomEvent","detail","node","connectedCallback","style","setProperty","imports","push","module","elem","dynSubRegister","super","removeProperty","render","baseClassName","rootClasses","createClassName","tagName","toLowerCase","html","_renderTree","level","arguments","length","undefined","parentOpen","parentDisabled","repeat","i","_renderNode","nonSelectable","baseClassNameNode","rootClassesNode","selectable","inner","chevron","children","id","Icon","tag","arrowSort","Collapse","ifDefined","label","nodes","cb","forEach","__decorate","property","type","Array","reflect","Boolean","attribute","converter","booleanConverter","defineElement","styles","tree","root","child","cssSelector","css","cssVariableAsVar","is","version","icons","getStash","studio","window","sui","stash","split","name","fetchIcon","icon"],"sourceRoot":""}