{"version":3,"file":"static/js/7814.17e9f4b9.chunk.js","mappings":"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","sources":["../node_modules/@umetrics/sartorius-ui-detail-table/src/detailTableStyle.ts","../node_modules/@umetrics/sartorius-ui-detail-table/src/metadata.ts","../node_modules/@umetrics/sartorius-ui-detail-table/src/detailTableItem.ts","../node_modules/@umetrics/sartorius-ui-detail-table/src/detailTableItemStyle.ts","../node_modules/@umetrics/sartorius-ui-detail-table/src/detailTable.ts"],"sourcesContent":["import { css, cssSelector, cssVariableAsVar, GenerateStyles, style } from '@umetrics/sartorius-ui-base';\n\nexport const detailTableStyles: GenerateStyles = (tagName) => {\n    const { root } = cssSelector(tagName);\n\n    const cssNoMin = css; // html-minifier-terser fail!\n\n    return [\n        style,\n        cssNoMin`\n            :host {\n                display: var(--detail-table-display, block);\n                width: 100%;\n                margin-top: 8px;\n                margin-bottom: 16px;\n                container-type: inline-size;\n            }\n\n            ${root} {\n                width: 100%;\n                padding: 0;\n                margin: 0;\n            }\n            ::slotted([slot='detail-table-header-slot']) {\n                font-size: 14px;\n                color: ${cssVariableAsVar('color_secondary_7')};\n                margin-bottom: 8px;\n                margin-left: var(--spacing-panel, 8px);\n            }\n        `,\n    ];\n};\n","/*\n * Metadata build info for package. Managed at build time by task tools/metadata.ts\n */\nexport const version = '0.0.0';\nexport const buildDate = '2021-03-28- 02:02:02.000';\n","import {\n    BaseElement,\n    booleanConverter,\n    createClassName,\n    defineElement,\n    html,\n    property,\n    state,\n} from '@umetrics/sartorius-ui-base';\nimport { version } from './metadata';\nimport { detailTableItemStyles } from './detailTableItemStyle';\nimport { DetailTableItemProperties } from './detailTableItemProperties';\n\n@defineElement({\n    tagName: 'detail-table-item',\n    styles: detailTableItemStyles,\n    version,\n    //    sub: [TooltipService]\n})\nexport class DetailTableItem extends BaseElement implements DetailTableItemProperties {\n    // Static members\n    public static readonly LEFT_SLOT = 'left-slot';\n    public static readonly RIGHT_SLOT = 'right-slot';\n    public static readonly ICON_SLOT = 'icon-slot';\n    public static readonly BUTTON_SLOT = 'button-slot';\n\n    //Currently unused TooltipService...\n\n    // Public members\n    @property({ type: String, reflect: true, attribute: 'detail-title' })\n    detailTitle = '';\n    @property({ type: String, reflect: true, attribute: 'detail-value' })\n    detailValue = '';\n    @property({ type: Boolean, converter: booleanConverter, reflect: true })\n    zebra1 = false;\n    @property({ type: Boolean, converter: booleanConverter, reflect: true })\n    zebra2 = false;\n    @property({ type: Boolean, converter: booleanConverter, attribute: 'white-text', reflect: true })\n    whiteText;\n    @state()\n    private _isEllipsis = false;\n\n    connectedCallback() {\n        this.style.setProperty('display', 'none');\n        const imports: any[] = [];\n\n        imports.push({ module: () => import('@umetrics/sartorius-ui-tooltip-service'), elem: ['TooltipService'] });\n\n        DetailTableItem.dynSubRegister(imports, () => {\n            super.connectedCallback();\n            this.style.removeProperty('display');\n        });\n    }\n\n    // Protected methods\n    protected render() {\n        const [baseClassName, rootClasses] = createClassName(this.tagName.toLowerCase(), {\n            zebra1: this.zebra1,\n            zebra2: this.zebra2,\n            whiteText: this.whiteText,\n        });\n\n        const title = this._isEllipsis ? this.detailTitle : '';\n        const titleHtml =\n            this.detailTitle !== ''\n                ? html`<div class=\"${baseClassName}-left\" title=\"${title}\" @mouseover=\"${this._isEllipsisActive}\">\n                      ${this.detailTitle}\n                  </div>`\n                : html`<slot @slotchange=\"${this._handleSlotChange}\" name=\"${DetailTableItem.LEFT_SLOT}\"></slot>`;\n        const value = this._isEllipsis ? this.detailValue : '';\n        const valueHtml =\n            this.detailValue !== ''\n                ? html`<div class=\"${baseClassName}-value\" title=\"${value}\">${this.detailValue}</div>`\n                : html`<slot @slotchange=\"${this._handleSlotChange}\" name=\"${DetailTableItem.RIGHT_SLOT}\"></slot>`;\n\n        return html` <li class=\"${baseClassName} ${rootClasses}\">\n            ${titleHtml}\n            <div id=\"detailId\" class=\"${baseClassName}-right\" @mouseover=\"${this._isEllipsisActive}\">${valueHtml}</div>\n            <slot name=\"${DetailTableItem.ICON_SLOT}\"></slot>\n            <slot name=\"${DetailTableItem.BUTTON_SLOT}\"></slot>\n        </li>`;\n    }\n\n    // Private methods\n\n    private _handleSlotChange(event) {\n        const target = event.target as HTMLSlotElement;\n        const ele = target.assignedElements();\n        ele.forEach((element) => {\n            if (element.clientWidth < element.scrollWidth) {\n                const tooltipTarget = element as HTMLElement;\n                tooltipTarget.title = element.innerHTML;\n            }\n        });\n    }\n\n    private _isEllipsisActive(e) {\n        this._isEllipsis = e.target.offsetWidth < e.target.scrollWidth;\n    }\n}\n","import { css, cssSelector, cssVariableAsVar, GenerateStyles, style } from '@umetrics/sartorius-ui-base';\n\nexport const detailTableItemStyles: GenerateStyles = (tagName) => {\n    const { root, child, is } = cssSelector(tagName);\n\n    const cssNoMin = css; // html-minifier-terser fail!\n\n    const black = cssVariableAsVar('color_primary_3');\n\n    return [\n        style,\n        cssNoMin`\n            ${root} {\n                width: 100%;\n                display: flex;\n                flex-direction: row;\n                align-items: center;\n                justify-content: space-between;\n            }\n\n            ::slotted([slot='left-slot']),\n            ${child('left')} {\n                flex-basis: 25%;\n                flex-grow: 2;\n                font-size: 12px;\n                padding: 5px 8px 5px var(--spacing-panel, 8px);\n                color: ${black};\n                white-space: nowrap;\n                text-overflow: ellipsis;\n                overflow: hidden;\n            }\n\n            ${child('right')} {\n                max-width: 75%;\n                flex-shrink: 2;\n                display: flex;\n                flex-direction: row;\n                align-items: center;\n                justify-content: flex-end;\n                white-space: nowrap;\n                text-overflow: ellipsis;\n                overflow: hidden;\n                color: ${black};\n                font-weight: bold;\n                padding: 5px var(--spacing-panel, 8px) 5px 8px;\n            }\n\n            ${is('whiteText')} ${child('value')} {\n                color: white;\n            }\n            ${is('whiteText')} ${child('left')} {\n                color: white;\n            }\n            ${is('whiteText')} ::slotted([slot='right-slot']) {\n                color: white !important;\n            }\n\n            ${is('whiteText')} ::slotted([slot='left-slot']) {\n                color: white !important;\n            }\n            ${is('whiteText')} ::slotted([slot='icon-slot']) {\n                color: white !important;\n            }\n\n            ${is('whiteText')} ::slotted([slot='button-slot']) {\n                color: white !important;\n            }\n\n\n\n            ::slotted([slot='right-slot']),\n            ${child('value')} {\n                font-size: 12px;\n                white-space: nowrap;\n                text-overflow: ellipsis;\n                overflow: hidden;\n            }\n\n            ::slotted([slot='icon-slot']) {\n                display: flex;\n                align-items: center;\n                padding-right: 8px;\n            }\n\n            ::slotted([slot='button-slot']) {\n                display: flex;\n                align-items: center;\n                padding-right: 8px;\n            }\n\n            @container (min-width: 400px) {\n                ${is('zebra1')} {\n                    background: #0000000D;\n                }\n                ${is('zebra2')} {\n                    background: #00000005;\n                }\n            }\n\n            /* Code working only for Safari */\n            @media not all and (min-resolution: 0.001dpcm) {\n                @supports (-webkit-appearance: none) {\n                    ${root}:active,\n                    ${root}:focus {\n                        outline: none;\n                    }\n\n                    .safari-focus:active,\n                    .safari-focus:focus {\n                        border: 2px solid ${cssVariableAsVar('color_primary_3')};\n                        margin: -2px;\n                    }\n                }\n            }\n        `,\n    ];\n};\n","import {\n    BaseElement,\n    booleanConverter,\n    createClassName,\n    defineElement,\n    html,\n    property,\n} from '@umetrics/sartorius-ui-base';\nimport { detailTableStyles } from './detailTableStyle';\nimport { DetailTableProperties } from './detailTableProperties';\nimport { version } from './metadata';\nimport { DetailTableItem } from './detailTableItem';\n\n@defineElement({ tagName: 'detail-table', styles: detailTableStyles, version })\nexport class DetailTable extends BaseElement implements DetailTableProperties {\n    @property({ type: Boolean, reflect: true, converter: booleanConverter, attribute: 'smart-zebra' })\n    smartZebra = true;\n    @property({ type: Boolean, converter: booleanConverter, reflect: true, attribute: 'white-text' })\n    whiteText = false;\n    // Protected methods\n    protected render() {\n        const [baseClassName, rootClasses] = createClassName(this.tagName.toLowerCase(), {});\n\n        return html` <ul class=\"${rootClasses} ${baseClassName}-ul\">\n            <slot class=\"${baseClassName}-header\" name=\"detail-table-header-slot\"></slot>\n            <slot @slotchange=\"${this._handleSlotChange}\"></slot>\n        </ul>`;\n    }\n\n    private _handleSlotChange(e) {\n        const items = e.target\n            .assignedNodes()\n            .filter((n) => n instanceof DetailTableItem) as any[] as DetailTableItem[];\n        items.forEach((item, index) => {\n            item.whiteText = this.whiteText;\n            item.zebra1 = this.smartZebra && index % 2 === 0;\n            item.zebra2 = this.smartZebra && index % 2 === 1;\n        });\n    }\n}\n"],"names":["version","DetailTableItem","DetailTableItem_1","BaseElement","constructor","detailTitle","detailValue","zebra1","zebra2","_isEllipsis","connectedCallback","this","style","setProperty","imports","push","module","elem","dynSubRegister","super","removeProperty","render","baseClassName","rootClasses","createClassName","tagName","toLowerCase","whiteText","title","titleHtml","html","_isEllipsisActive","_handleSlotChange","LEFT_SLOT","value","valueHtml","RIGHT_SLOT","ICON_SLOT","BUTTON_SLOT","event","target","assignedElements","forEach","element","clientWidth","scrollWidth","innerHTML","e","offsetWidth","__decorate","property","type","String","reflect","attribute","Boolean","converter","booleanConverter","state","defineElement","styles","root","child","is","cssSelector","cssNoMin","css","black","cssVariableAsVar","DetailTable","smartZebra","assignedNodes","filter","n","item","index"],"sourceRoot":""}