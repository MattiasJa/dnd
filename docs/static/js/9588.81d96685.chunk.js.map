{"version":3,"file":"static/js/9588.81d96685.chunk.js","mappings":"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","sources":["../node_modules/@umetrics/sartorius-ui-plot-legend/src/metadata.ts","../node_modules/@umetrics/sartorius-ui-plot-legend/src/legendStyles.ts","../node_modules/@umetrics/sartorius-ui-plot-utils/src/textutils/smartClipper.ts","../node_modules/@umetrics/sartorius-ui-plot-legend/src/plotLegend.ts","../node_modules/@umetrics/sartorius-ui-icon/src/icons/down.ts","../node_modules/@umetrics/sartorius-ui-icon/src/icons/selectAll.ts","../node_modules/@umetrics/sartorius-ui-icon/src/icons/eye.ts","../node_modules/@umetrics/sartorius-ui-icon/src/icons/moreVertical.ts","../node_modules/@umetrics/sartorius-ui-icon/src/icons/eyeStrike.ts","../node_modules/@umetrics/sartorius-ui-icon/src/registerIcon.ts","../node_modules/@umetrics/sartorius-ui-icon/src/icons/excludeAll.ts","../node_modules/@umetrics/sartorius-ui-icon/src/metadata.ts"],"sourcesContent":["/*\n * Metadata build info for package. Managed at build time by task tools/metadata.ts\n */\nexport const version = '0.0.0';\nexport const buildDate = '2021-02-02- 02:02:02.000';\n","import { css, cssSelector, cssVariableAsVar, GenerateStyles, style } from '@umetrics/sartorius-ui-base';\n\nconst _css = css;\n\nexport const legendStyles: GenerateStyles = (tagName) => {\n    const { root, is } = cssSelector(tagName);\n\n    return [\n        style,\n        css`\n            :host,\n            :host::before,\n            :host::after,\n            :host *,\n            :host *::before,\n            :host *::after {\n                box-sizing: border-box;\n            }\n\n            :host {\n                display: block;\n                height: 100%;\n                user-select: none;\n            }\n\n            ${root} {\n                width: 100%;\n                height: 100%;\n            }\n\n            ${is('fixed-width')} {\n                width: var(--legend-width);\n            }\n\n            .legend-group {\n                padding-bottom: 12px;\n            }\n\n            .legend-group-content {\n                display: grid;\n                grid-template-rows: 1fr;\n                transition: grid-template-rows 0.3s ease-in-out;\n            }\n\n            .closed .legend-group-content {\n                grid-template-rows: 0fr;\n            }\n\n            .legend-group-head {\n                display: flex;\n                align-items: center;\n                color: var(--color-secondary-8, #6f6f6f);\n                padding-left: 4px;\n                padding-right: 4px;\n                user-select: none;\n                cursor: pointer;\n                justify-content: space-between;\n                gap: 2px;\n            }\n\n            .legend-group-head:hover {\n                background-color: rgba(0, 0, 0, 0.08);\n            }\n\n            .legend-group-title {\n                pointer-events: none;\n                overflow: hidden;\n                white-space: nowrap;\n                text-overflow: ellipsis;\n            }\n\n            .legend-group-controls {\n                display: flex;\n                align-items: center;\n                pointer-events: none;\n            }\n\n            .group-more-button {\n                pointer-events: all;\n            }\n\n            .group-more-icon {\n                pointer-events: none;\n            }\n\n            .legend-chevron {\n                font-size: 16px;\n                pointer-events: none;\n                transition: transform 0.15s linear;\n                transform: rotate(180deg);\n            }\n\n            ${is('small')} .legend-chevron {\n                font-size: 20px;\n            }\n\n            .closed .legend-chevron {\n                transform: rotate(0deg);\n            }\n\n            ${is('xsmall')} .legend-group-head {\n                font-size: var(--legend-group-xsmall-font-size, 12px);\n                height: var(--legend-group-xsmall-height, 24px);\n            }\n\n            ${is('small')} .legend-group-head {\n                font-size: var(--legend-group-small-font-size, 14px);\n                height: var(--legend-group-small-height, 36px);\n            }\n\n            .legend-item {\n                display: flex;\n                flex-direction: row;\n                white-space: nowrap;\n            }\n\n            ${is('xsmall')} .legend-item {\n                height: var(--legend-item-xsmall-height, 24px);\n            }\n\n            ${is('small')} .legend-item {\n                height: var(--legend-item-small-height, 36px);\n            }\n\n            .legend-item:not(.hidden) .clickable {\n                cursor: pointer;\n            }\n\n            .legend-item.hidden .clickable {\n                cursor: default;\n            }\n\n            .legend-item.selected .legend-item-left,\n            .legend-item.selected .legend-item-right {\n                background-color: rgba(0, 0, 0, 0.12);\n            }\n\n            .legend-item.hidden .legend-item-label {\n                color: ${cssVariableAsVar(`color_secondary_5`)};\n                font-weight: initial;\n            }\n\n            .legend-item.hidden .label-icon {\n                fill: ${cssVariableAsVar(`color_secondary_3`)};\n                stroke: ${cssVariableAsVar(`color_secondary_3`)};\n            }\n\n            .legend-item-left {\n                flex: 1;\n                display: flex;\n                align-items: center;\n                gap: 4px;\n                overflow: hidden;\n                text-overflow: ellipsis;\n                white-space: nowrap;\n            }\n\n            .legend-item-label {\n                flex: 1;\n                white-space: nowrap;\n                overflow: hidden;\n                text-overflow: ellipsis;\n                direction: var(--legend-item-direction, rtl);\n                unicode-bidi: isolate;\n                text-align: left;\n            }\n\n            ${is('xsmall')} .legend-item-label {\n                font-size: var(--legend-item-xsmall-font-size, 12px);\n            }\n\n            ${is('small')} .legend-item-label {\n                font-size: var(--legend-item-small-font-size, 14px);\n            }\n\n            .legend-item:not(.hidden):hover .clickable.legend-item-left {\n                background-color: rgba(0, 0, 0, 0.08);\n            }\n\n            .legend-item:not(.hidden):hover .clickable.legend-item-right {\n                background-color: rgba(0, 0, 0, 0.08);\n            }\n\n            .legend-item:not(.hidden) .clickable.legend-item-left.plot-hovered {\n                background-color: rgba(0, 0, 0, 0.08);\n            }\n\n            .legend-item:not(.hidden) .clickable.legend-item-right.plot-hovered {\n                background-color: rgba(0, 0, 0, 0.08);\n            }\n\n            .marker-icon {\n                z-index: 1;\n                padding-left: 4px;\n            }\n\n            .no-hover-color {\n                background-color: white !important;\n            }\n\n            .legend-item-right {\n                display: flex;\n                align-items: center;\n            }\n\n            .legend-item .legend-item-right .legend-button {\n                opacity: 0;\n            }\n\n            .legend-item:hover .legend-item-right .legend-button,\n            .hidden .legend-item-right .legend-button {\n                opacity: 1;\n            }\n\n            .legend-button {\n                transition: margin-right 0.25s ease-in-out;\n\n                margin-right: calc(3px + 10px * var(--scrollbar-y-overflow, 0));\n            }\n        `,\n        _css`\n            @container (min-width: 0px) {\n              :host {\n                --legend-width: 20ch;\n                max-width: var(--legend-width);\n              }\n            }\n                    \n            @container (max-width: 640px) {\n              :host {\n                 --legend-width: 16ch;\n              }\n            }\n            \n            @container (max-width: 540px) {\n              :host {\n                 --legend-width: 14ch;\n              }\n            }\n            \n            @container (max-width: 440px) {\n              :host {\n                 --legend-width: 12ch;\n              }\n            }\n            \n            @container (max-width: 320px) {\n              :host {\n                 --legend-width: 8ch;\n              }\n              .legend-item-left {\n                gap: 0;\n              }\n              .legend-item-label {\n                text-overflow: clip;\n              }\n            }\n            \n            @container (max-width: 220px) {\n              :host {\n                 --legend-width: 5ch;\n              }\n              .legend-item-left {\n                gap: 0;\n              }\n              .marker-icon {\n                padding-left: 0;\n              }\n              .legend-item-label {\n                text-overflow: clip;\n              }\n            }\n            \n            @container (max-width: 120px) {\n              :host {\n                 --legend-width: 0;\n              }\n            }\n`,\n    ];\n};\n","function findCommonSequence(\n    labels: string[],\n    matchFn: (str: string, seq: string) => boolean,\n    trimFn: (seq: string) => string\n): string {\n    const nonEmptyLabels = labels.filter((label) => label !== '');\n    if (!nonEmptyLabels.length) {\n        return '';\n    }\n\n    let sequence = nonEmptyLabels[0];\n    for (let i = 1; i < nonEmptyLabels.length; i++) {\n        while (!matchFn(nonEmptyLabels[i], sequence)) {\n            sequence = trimFn(sequence);\n            if (!sequence) return '';\n        }\n    }\n    return sequence;\n}\n\nexport const findCommonPrefix = (labels: string[]) =>\n    findCommonSequence(\n        labels,\n        (str, seq) => str.startsWith(seq),\n        (seq) => seq.slice(0, -1)\n    );\n\nexport const findCommonSuffix = (labels: string[]) =>\n    findCommonSequence(\n        labels,\n        (str, seq) => str.endsWith(seq),\n        (seq) => seq.slice(1)\n    );\n\nfunction doClip(\n    maxLength: number,\n    _ellipsis: string,\n    _mode: 'auto' | 'start' | 'end' | 'middle',\n    prefixLen: number,\n    suffixLen: number,\n    label: string,\n    labelLen: number\n) {\n    const keepLength = maxLength - _ellipsis.length;\n    const isAutoMode = _mode === 'auto';\n    if (_mode === 'start' || (isAutoMode && prefixLen > suffixLen)) {\n        return _ellipsis + label.slice(labelLen - keepLength);\n    } else if (_mode === 'end' || (isAutoMode && suffixLen > prefixLen)) {\n        return label.slice(0, keepLength) + _ellipsis;\n    }\n    const startLength = Math.floor(keepLength / 2);\n    const endLength = keepLength - startLength;\n    return label.slice(0, startLength) + _ellipsis + label.slice(labelLen - endLength);\n}\n\nexport function smartClipper(\n    labels: string[],\n    maxLength: number,\n    config?: {\n        ellipsis?: string;\n        mode?: 'auto' | 'start' | 'end' | 'middle';\n    }\n): string[] {\n    const _ellipsis = config?.ellipsis ?? '…'; // … is shorter than ...\n    const _mode = config?.mode ?? 'auto';\n    const prefixLen = _mode === 'auto' ? findCommonPrefix(labels).length : 0;\n    const suffixLen = _mode === 'auto' ? findCommonSuffix(labels).length : 0;\n\n    return labels.map((label) => {\n        if (label === '') {\n            return '';\n        }\n        const labelLen = label.length;\n        if (maxLength < 1) {\n            return '';\n        } else if (maxLength === 1) {\n            return _ellipsis;\n        }\n        if (labelLen <= maxLength) {\n            return label;\n        }\n        return doClip(maxLength, _ellipsis, _mode, prefixLen, suffixLen, label, labelLen);\n    });\n}\n","import { LegendGroup, LegendIcon, LegendItemObject, LegendProperties } from './plotLegendProperties';\nimport {\n    BaseElement,\n    booleanConverter,\n    createClassName,\n    cssVariables,\n    defineElement,\n    html,\n    ifDefined,\n    nothing,\n    property,\n    state,\n    svg,\n} from '@umetrics/sartorius-ui-base';\nimport { version } from './metadata';\nimport { legendStyles } from './legendStyles';\nimport type { Button as ButtonT } from '@umetrics/sartorius-ui-button';\nimport type {\n    ContextMenu as ContextMenuT,\n    ContextMenuItem as ContextMenuItemT,\n} from '@umetrics/sartorius-ui-context-menu';\nimport type { Icon as IconT } from '@umetrics/sartorius-ui-icon';\nimport type { Scrollbar as ScrollbarT } from '@umetrics/sartorius-ui-scrollbar';\nimport down from '@umetrics/sartorius-ui-icon/dist/icons/down';\nimport moreVertical from '@umetrics/sartorius-ui-icon/dist/icons/moreVertical';\nimport eye from '@umetrics/sartorius-ui-icon/dist/icons/eye';\nimport eyeStrike from '@umetrics/sartorius-ui-icon/dist/icons/eyeStrike';\nimport selectAll from '@umetrics/sartorius-ui-icon/dist/icons/selectAll';\nimport excludeAll from '@umetrics/sartorius-ui-icon/dist/icons/excludeAll';\n\nimport { findCommonPrefix, findCommonSuffix } from '@umetrics/sartorius-ui-plot-utils';\n\n@defineElement({ tagName: 'plot-legend', styles: legendStyles, version })\nexport class PlotLegend extends BaseElement implements LegendProperties {\n    // Static members\n    private static Scrollbar: typeof ScrollbarT;\n    private static Button: typeof ButtonT;\n    private static Icon: typeof IconT;\n    private static ContextMenu: typeof ContextMenuT;\n    private static ContextMenuItem: typeof ContextMenuItemT;\n\n    // Private members\n\n    // Protected members\n\n    // Public members\n    @property()\n    legendData: LegendGroup[] = [];\n    @property()\n    selection: string[] = [];\n    @property()\n    hiddenIds: string[] = [];\n    @property({ type: Boolean, attribute: 'togglable-visibility', converter: booleanConverter })\n    togglableVisibility = true;\n    @property()\n    hoveredElement: any = undefined;\n    @property({ type: String, reflect: true })\n    public size?: 'auto' | 'small' | 'xsmall';\n    @property({ type: Number, reflect: true, attribute: 'max-characters' })\n    public maxCharacters;\n    @property({ type: Boolean, reflect: true, attribute: 'fixed-width' })\n    public fixedWidth = false;\n\n    @state()\n    private _cache: {\n        size: 'small' | 'xsmall';\n        itemHeight: 24 | 36;\n        font: 12 | 14;\n        spacings: 55 | 71; // Total width of an item that is not the label\n        buttonSize: 'extra-small' | 'small';\n        group: {\n            textMode: 'ltr' | 'rtl';\n        }[];\n    } = {\n        size: 'xsmall',\n        itemHeight: 24,\n        font: 12,\n        spacings: 55,\n        buttonSize: 'extra-small',\n        group: [],\n    };\n    @state()\n    private _openGroup?: { button: HTMLElement; group: LegendGroup };\n\n    connectedCallback() {\n        this.style.setProperty('display', 'none');\n\n        PlotLegend.dynSubRegister(\n            [\n                { module: () => import('@umetrics/sartorius-ui-scrollbar'), elem: ['Scrollbar'] },\n                { module: () => import('@umetrics/sartorius-ui-button'), elem: ['Button'] },\n                { module: () => import('@umetrics/sartorius-ui-icon'), elem: ['Icon'] },\n                {\n                    module: () => import('@umetrics/sartorius-ui-context-menu'),\n                    elem: ['ContextMenu', 'ContextMenuItem'],\n                },\n            ],\n            () => {\n                super.connectedCallback();\n                this.style.removeProperty('display');\n            }\n        );\n\n        this._updateSize();\n    }\n\n    public exportSVG() {\n        let currentY = 0;\n        const { font, itemHeight } = this._cache;\n        const titleHeight = itemHeight;\n        const maxCh = Number(getComputedStyle(this).getPropertyValue('--legend-width').split('ch')[0]);\n        const scrollTop = this.shadowRoot!.querySelector('[class*=\"-scroller\"]')?.scrollTop ?? 0;\n        const groupElements = Array.from(this.shadowRoot!.querySelectorAll('.legend-group'));\n\n        const groups = this.legendData.map((group, groupIndex) => {\n            const textMode = this._cache.group[groupIndex].textMode;\n            const groupGap = 8;\n            const title = svg`<text font-size=\"${font}\" dominant-baseline=\"middle\">${group.title}</text>`;\n            const closed = groupElements[groupIndex].classList.contains('closed');\n            const visibleItems = group.legendItems.filter((_) => !closed); // What?\n            const allGradientItems = group.legendItems.every(\n                (item) => item.labelIcon && item.labelIcon.marker === 'gradient'\n            );\n\n            const items = visibleItems.map((item, i, arr) => {\n                const offset = titleHeight / 2 + i * itemHeight;\n                const selected = this.selection.includes(item.label);\n\n                const { viewBox, elems: iconSvg } = this._getLabelIcon(item, selected, i, arr, allGradientItems);\n                let innerSvg;\n                if (allGradientItems) {\n                    innerSvg = svg`\n                        <svg width=\"18px\" height=\"100%\" >\n                            ${iconSvg}\n                        </svg>\n                    `;\n                } else if (viewBox) {\n                    innerSvg = svg`\n                        <svg width=\"14px\" height=\"${itemHeight}\" viewBox=${viewBox} >\n                            ${iconSvg}\n                        </svg>\n                    `;\n                } else {\n                    innerSvg = iconSvg;\n                }\n\n                const selectionHtml = selected\n                    ? svg`<rect fill=\"rgba(0, 0, 0, .12)\" x=\"-4\" y=\"0\" width=\"100%\" height=\"${this._cache.itemHeight}\"/>`\n                    : nothing;\n                const hiddenClass = this.hiddenIds.indexOf(item.label) > -1 ? 'legend-hidden-item' : '';\n                return svg`\n                    <g transform=\"translate(0 ${offset})\" class=\"${hiddenClass}\">\n                        ${selectionHtml}\n                        ${innerSvg}\n                        <text x=\"18\" y=\"${itemHeight / 2}\" font-size=\"${font}\" fill=\"black\" dominant-baseline=\"middle\">${this._truncateSvgText(\n                            item.label,\n                            maxCh,\n                            textMode\n                        )}</text>\n                    </g>\n                `;\n            });\n            const groupOffset = currentY;\n            const totalHeight = titleHeight + itemHeight * visibleItems.length + groupGap;\n            currentY += totalHeight;\n\n            let gradientItems;\n            if (allGradientItems) {\n                gradientItems = svg`\n                        <g transform=\"translate(0 ${titleHeight / 2})\"> \n                        ${this._getGradientRect(group.legendItems)}\n                        </g>`;\n            }\n\n            return svg`\n                <style>.legend-hidden-item * {fill: #B2B2B2}</style>\n                <g class=\"legend-group\" transform=\"translate(4 ${groupOffset + titleHeight / 2})\">\n                    ${title}\n                    ${closed ? nothing : [items, gradientItems]}\n                </g>\n            `;\n        });\n\n        return svg`\n            <g class=\"legend\" fill=\"${cssVariables.color_secondary_5}\" stroke=\"none\" transform=\"translate(0,-${scrollTop})\">\n                ${groups}\n            </g>\n        `;\n    }\n\n    protected update(changedProperties) {\n        if (changedProperties.has('size')) {\n            const size = changedProperties.get('size');\n            if (size !== this.size) {\n                this._updateSize();\n            }\n        }\n        if (changedProperties.has('legendData')) {\n            this._updateTruncatedLabels();\n        }\n        super.update(changedProperties);\n    }\n\n    protected render() {\n        const [baseClassName, rootClasses] = createClassName(this.tagName.toLowerCase(), {\n            [this._cache.size]: true,\n            'fixed-width': this.fixedWidth,\n        });\n\n        return html`\n            <div class=\"${rootClasses}\">\n                <${PlotLegend.Scrollbar.tag} class=\"${baseClassName}-scroller\" hori-hide>\n                    ${this._renderCustomLegend()}\n                    ${this._renderContextMeny()}\n                </${PlotLegend.Scrollbar.tag}>\n            </div> `;\n    }\n\n    private _renderContextMeny() {\n        if (this._openGroup) {\n            const legendGroup = this._openGroup.group;\n\n            const legendGroupLabels = legendGroup.legendItems.map((i) => i.label);\n            const hiddenLabelsAmount = this.hiddenIds.filter((s) => legendGroupLabels.includes(s)).length;\n            const visibleLabels = legendGroupLabels.filter((label) => !this.hiddenIds.includes(label));\n            const allSelected = visibleLabels.every((label) => this.selection.includes(label));\n            const allHidden = hiddenLabelsAmount === legendGroupLabels.length;\n\n            const selectOptions = allSelected\n                ? { label: 'Deselect', icon: excludeAll }\n                : { label: 'Select', icon: selectAll };\n            const showOptions = allHidden ? { label: 'Show', icon: eye } : { label: 'Hide', icon: eyeStrike };\n\n            return html`\n                <${PlotLegend.ContextMenu.tag}\n                    class='group-meny'\n                    .object=${this._openGroup.button}\n                    controlled=${true}\n                    fixed-width=${false}\n                    open=${!!this._openGroup}\n                    click-outside-close=${true}\n                    @close=${() => {\n                        this._closeContextMenu();\n                    }}\n                >\n                    <${PlotLegend.ContextMenuItem.tag} label=${selectOptions.label}\n                                                       icon=${selectOptions.icon} @click=${(e) => {\n                                                           legendGroup?.groupEvent?.labelsEvent?.(\n                                                               legendGroup.legendItems.map((item) => item.label),\n                                                               legendGroup,\n                                                               e\n                                                           );\n                                                           this._closeContextMenu();\n                                                       }}></${PlotLegend.ContextMenuItem.tag}>\n                    <${PlotLegend.ContextMenuItem.tag} label=${showOptions.label}\n                                                       icon=${showOptions.icon} @click=${(e) => {\n                                                           legendGroup.groupEvent?.rightGroupEvent?.(\n                                                               legendGroup.legendItems.map((item) => item.label),\n                                                               legendGroup,\n                                                               e\n                                                           );\n                                                           this._closeContextMenu();\n                                                       }}></${PlotLegend.ContextMenuItem.tag}>\n                </${PlotLegend.ContextMenu.tag}>\n            `;\n        }\n        return nothing;\n    }\n\n    private _closeContextMenu = () => (this._openGroup = undefined);\n\n    private _updateSize() {\n        let size: 'small' | 'xsmall';\n        if (!this.size || this.size === 'auto') {\n            // Could check slot but its not avail att connect, tag on parent is earlier\n            size = this.parentElement?.tagName.endsWith('COMPOSABLE-PLOT') ? 'xsmall' : 'small';\n        } else {\n            size = this.size ?? 'xsmall';\n        }\n        this._cache.size = size;\n        if (size === 'xsmall') {\n            this._cache.font = 12;\n            this._cache.itemHeight = 24;\n            this._cache.buttonSize = 'extra-small';\n            this._cache.spacings = 55;\n        } else {\n            this._cache.font = 14;\n            this._cache.itemHeight = 36;\n            this._cache.buttonSize = 'small';\n            this._cache.spacings = 71;\n        }\n    }\n\n    private _getGradientRect(legendItems) {\n        const colors = legendItems.map((l) => l.labelIcon?.color);\n        const step = 100 / (colors.length - 1);\n\n        const stops = colors.map((color, index) => {\n            const offset = index * step; // Calculate the offset for each stop\n            return svg`<stop offset=\"${offset}%\" style=\"stop-color:${color};stop-opacity:1\"></stop>`;\n        });\n        const itemHeight = this._cache.itemHeight;\n        return svg`\n                            <defs>\n                                <linearGradient x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\" id=\"grad\">\n                                    ${stops}\n                                </linearGradient>\n                            </defs>\n                            <rect style=\"\" x=\"5\" y=\"0\" width=\"8\" height=\"${itemHeight * colors.length}\" fill=\"url(#grad)\"></rect>        \n        `;\n    }\n\n    private _renderCustomLegend() {\n        return this.legendData\n            ?.filter((legendGroup) => legendGroup.legendItems.length)\n            .map((legendGroup, groupIndex) => {\n                const allGradientItems = legendGroup.legendItems.every(\n                    (item) => item.labelIcon && item.labelIcon.marker === 'gradient'\n                );\n                const items = svg`${legendGroup.legendItems.map((item, index) => {\n                    return this._renderLegendItem(item, legendGroup, index, groupIndex, allGradientItems);\n                })}`;\n\n                let gradientItems;\n                if (allGradientItems) {\n                    gradientItems = svg`\n                        <svg style=\"position: absolute;display: block;padding-left: 4px;width: 22px;height: 100%;\"> \n                           ${this._getGradientRect(legendGroup.legendItems)}\n                        </svg>`;\n                }\n\n                return html`\n                    <div\n                        class=\"legend-group\"\n                        style=\"--legend-item-direction: ${this._cache.group[groupIndex].textMode ?? 'rtl'}\"\n                    >\n                        <div\n                            class=\"legend-group-head\"\n                            @click=${(e) => {\n                                e.target.parentElement.classList.toggle('closed');\n                            }}\n                        >\n                            <span class=\"legend-group-title\">${legendGroup.title}</span>\n                            <div class=\"legend-group-controls\">\n                                ${this._renderMoreButton(legendGroup)} ${this._renderIcon('legend-chevron', down)}\n                            </div>\n                        </div>\n                        <div class=\"legend-group-content\">\n                            <div style=\"position: relative;overflow: hidden;\">${gradientItems}${items}</div>\n                        </div>\n                    </div>\n                `;\n            });\n    }\n\n    private _renderIcon = (clazz, icon) => html`\n        <${PlotLegend.Icon.tag}\n            class=${clazz}\n            icon=${icon}\n            slot=\"icon-slot\"\n        ></${PlotLegend.Icon.tag}>\n    `;\n\n    private _renderMoreButton(legendGroup) {\n        if (legendGroup && legendGroup.groupEvent) {\n            const hasCheckAll = !!legendGroup.groupEvent.labelsEvent;\n            const hasToggleVisibility = !!legendGroup.groupEvent?.rightGroupEvent;\n\n            if (hasCheckAll || hasToggleVisibility) {\n                return html`\n                    <${PlotLegend.Button.tag}\n                        class=\"group-more-button\"\n                        type='tertiary'\n                        button-size=${this._cache.buttonSize}\n                        compact='true'\n                        @click=\"${(e) => {\n                            this._openGroup = this._openGroup ? undefined : { button: e.target, group: legendGroup };\n                            e.stopPropagation();\n                        }}\"\n                    >\n                        ${this._renderIcon('group-more-icon', moreVertical)}\n                    </${PlotLegend.Button.tag}>\n\n                `;\n            }\n        }\n        return nothing;\n    }\n\n    private _renderLegendItem(item, legendGroup, index, _, allGradientItems) {\n        const legendRightHtml =\n            item.rightSlotIcon && this.togglableVisibility\n                ? html`\n                    <div class=\"legend-button\">\n                        <${PlotLegend.Button.tag}\n                            type='tertiary'\n                            button-size=${this._cache.buttonSize}\n                            compact='true'\n                            @click=\"${(e) => item.rightSlotEvent?.([item.label], legendGroup, e)}\"\n                        >\n                            ${this._renderIcon('item-right-icon', item.rightSlotIcon)}\n                        </${PlotLegend.Button.tag}>\n                    </div>\n                `\n                : '';\n        const { viewBox, elems: labelIcon } = this._getLabelIcon(\n            item,\n            this.selection?.includes(item.label),\n            index,\n            legendGroup.legendItems,\n            allGradientItems\n        );\n\n        return html`\n            <span\n                class=\"legend-item${this.selection?.includes(item.label) ? ' selected' : ''} ${this.hiddenIds.includes(\n                    item.label\n                )\n                    ? ' hidden'\n                    : ''}\"\n                @mouseenter=\"${() => {\n                    this._legendItemHoverEnter(item.label, legendGroup.title, item.labelIcon.color);\n                }}\"\n                @mouseleave=\"${() => {\n                    this._legendItemHoverLeave(item.label, legendGroup.title, item.labelIcon.color);\n                }}\"\n            >\n                <span\n                    title=\"${item.label}\"\n                    class=\"legend-item-left ${item.label === this.hoveredElement?.metadata.id &&\n                    (legendGroup.title === this.hoveredElement?.metadata.groupTitle ||\n                        legendGroup.title === this.hoveredElement?.metadata.label)\n                        ? 'plot-hovered'\n                        : ''}  ${item.labelEvent ? 'clickable' : ''}\"\n                    @click=\"${(e) => item.labelEvent?.([item.label], legendGroup, e)}\"\n                >\n                    <svg class=\"marker-icon\" width=\"18px\" height=\"100%\" viewBox=${ifDefined(viewBox ? viewBox : null)}>\n                        ${labelIcon}\n                    </svg>\n                    <span class=\"legend-item-label\">\n                        <span> ${item.label} </span>\n                    </span>\n                </span>\n                <span\n                    class=\"legend-item-right \n                      ${item.rightSlotEvent ? 'clickable' : ''} \n                      ${item.labelEvent ? '' : 'no-hover-color'}\"\n                >\n                    ${legendRightHtml}\n                </span>\n            </span>\n        `;\n    }\n\n    private _legendItemHoverLeave(label: string, groupTitle: string, color: string) {\n        this.dispatchEvent(\n            new CustomEvent('legend-item-hover', {\n                bubbles: true,\n                detail: {\n                    target: {\n                        metadata: {\n                            id: label,\n                            groupTitle: groupTitle,\n                            color: color,\n                        },\n                    },\n                    hovering: false,\n                },\n            })\n        );\n    }\n\n    private _legendItemHoverEnter(label: string, groupTitle: string, color: string) {\n        this.dispatchEvent(\n            new CustomEvent('legend-item-hover', {\n                bubbles: true,\n                detail: {\n                    target: {\n                        metadata: {\n                            id: label,\n                            groupTitle: groupTitle,\n                            color: color,\n                        },\n                    },\n                    hovering: true,\n                },\n            })\n        );\n    }\n\n    private _getCircleSVG(color, selected) {\n        return svg`<circle class=\"label-icon\" fill=\"${color}\" cx=\"7\" cy=\"${this._cache.itemHeight / 2}\" r=${selected ? '4' : '3'} />`;\n    }\n\n    private _getRectangleSVG = (\n        color,\n        config = { x: '4', y: `${this._cache.itemHeight / 2}`, width: '6', height: 6 }\n    ) =>\n        svg`<rect class=\"label-icon\" fill=\"${color}\" x=${config.x} y=${config.y} transform=\"translate(0, -${config.height / 2})\" width=${config.width} height=${config.height} />`;\n\n    private _getMarkerSVG(\n        item: LegendItemObject,\n        selected: boolean,\n        index: number,\n        group: LegendItemObject[],\n        allGradientItems\n    ): { marker; viewBox? } {\n        const icon: LegendIcon = item.labelIcon!;\n        const marker = icon.marker;\n        const color = icon.color;\n        if (!marker) {\n            return { marker: svg`` };\n        }\n        switch (marker) {\n            case 'circle':\n                return this._getMarkerSVGCircle(color, selected);\n            case 'rectangle':\n                return this._getMarkerSVGRectangle(color, selected);\n            case 'full':\n                return this._getMarkerSVGFull(color, selected);\n            case 'gradient':\n                return this._getMarkerSVGGradient(index, group, color, item, allGradientItems, selected);\n            case 'icon':\n                return this._getMarkerSVGIcon(icon, selected, color);\n\n            default: {\n                console.warn(`Unknown marker type '${marker}'`);\n                return { marker: svg`` };\n            }\n        }\n    }\n\n    private _getMarkerSVGCircle(color: string, selected: boolean) {\n        return { marker: this._getCircleSVG(color, selected) };\n    }\n\n    private _getMarkerSVGRectangle(color: string, selected: boolean) {\n        return {\n            marker: this._getRectangleSVG(\n                color,\n                selected ? { x: '3', y: `${this._cache.itemHeight / 2}`, width: '8', height: 8 } : undefined\n            ),\n        };\n    }\n\n    private _getMarkerSVGFull(color: string, selected: boolean) {\n        return {\n            marker: this._getRectangleSVG(color, {\n                ...{ y: `${this._cache.itemHeight / 2}`, height: this._cache.itemHeight },\n                ...(selected ? { x: '2', width: '10' } : { x: '3', width: '8' }),\n            }),\n        };\n    }\n\n    private _getMarkerSVGGradient(\n        index: number,\n        group: LegendItemObject[],\n        color: string,\n        item: LegendItemObject,\n        allGradientItems,\n        selected: boolean\n    ) {\n        const stop = index === group.length - 1 ? color : group[index + 1].labelIcon?.color;\n        const withLabel = item.label\n            ? [\n                  svg`<rect fill=\"#333\" x=\"4\" y=\"${this._cache.itemHeight / 2}\" width=\"1\" height=\"1\"  ></rect><rect fill=\"#333\" x=\"13\" y=\"${this._cache.itemHeight / 2}\" width=\"1\" height=\"1\"  ></rect>`,\n                  svg`<rect fill=\"white\" opacity='0.33' x=\"5\" y=\"${this._cache.itemHeight / 2}\" width=\"8\" height=\"1\"></rect>`,\n              ]\n            : [null, null];\n        return {\n            marker: allGradientItems\n                ? svg`${withLabel[0]}${withLabel[1]}`\n                : svg`\n                         <defs>\n                            <linearGradient id=\"grad${index}\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                                <stop offset=\"0%\" style=\"stop-color:${color};stop-opacity:1\" />\n                                <stop offset=\"100%\" style=\"stop-color:${stop};stop-opacity:1\" />\n                            </linearGradient>\n                        </defs>\n                        ${withLabel[0]}\n                        ${this._getRectangleSVG(`url(#grad${index})`, {\n                            ...{ y: `${this._cache.itemHeight / 2}`, height: this._cache.itemHeight },\n                            ...(selected ? { x: '2', width: '16' } : { x: '3', width: '8' }),\n                        })}\n                        ${withLabel[1]}\n                    `,\n        };\n    }\n\n    private _getMarkerSVGIcon(icon: LegendIcon, selected: boolean, color: string) {\n        const { d, viewBox } = icon.icon!;\n        const paths = d.map((data) => svg`<path d=\"${data}\"></path>`);\n        const selectTransform = selected ? `translate(-2, -2),scale(1.2, 1.2)` : null;\n        return {\n            viewBox,\n            marker: svg`<g class=\"label-icon\" fill=\"${color}\" transform=\"${ifDefined(selectTransform)}\" >${paths}</g>`,\n        };\n    }\n\n    private _getLineSVG(color: string, selected: boolean, line?: string) {\n        if (!line) {\n            return svg``;\n        }\n        switch (line) {\n            case 'solid': {\n                return svg`<line class=\"label-icon\" stroke-width=${\n                    selected ? '3' : '1'\n                } stroke=\"${color}\" x1=\"1\" y1=\"${this._cache.itemHeight / 2}\" x2=\"13\" y2=\"${this._cache.itemHeight / 2}\" />`;\n            }\n            case 'dashed': {\n                return svg`<line class=\"label-icon\" stroke-width=${\n                    selected ? '3' : '1'\n                } stroke-dasharray=\"2 1\" stroke=\"${color}\" x1=\"2\" y1=\"${this._cache.itemHeight / 2}\" x2=\"16\" y2=\"${this._cache.itemHeight / 2}\" />`;\n            }\n            default: {\n                console.warn(`Unknown line type '${line}'`);\n                return svg``;\n            }\n        }\n    }\n\n    private _getLabelIcon(\n        item: LegendItemObject,\n        selected: boolean,\n        index: number,\n        group: LegendItemObject[],\n        allGradientItems\n    ) {\n        const labelIcon = item.labelIcon;\n        if (!labelIcon) {\n            return { elems: undefined };\n        }\n        if (!labelIcon.marker && !labelIcon.line) {\n            return { elems: this._getCircleSVG(labelIcon.color, selected) };\n        }\n        const { marker, viewBox } = this._getMarkerSVG(item, selected, index, group, allGradientItems);\n        const line = this._getLineSVG(labelIcon.color, selected, labelIcon.line);\n        return { viewBox, elems: [marker, line] };\n    }\n\n    private _updateTruncatedLabels() {\n        const group: {\n            textMode: 'ltr' | 'rtl';\n        }[] = [];\n        this.legendData.forEach((g) => {\n            const labels = g.legendItems.map((l) => l.label ?? '');\n            group.push({\n                textMode: findCommonPrefix(labels).length === 0 && findCommonSuffix(labels).length > 0 ? 'ltr' : 'rtl',\n            });\n        });\n        this._cache = { ...this._cache, ...{ group } };\n    }\n\n    private _truncateSvgText(label: string, maxCh: number, textMode: 'rtl' | 'ltr'): string {\n        if (label.length <= maxCh) return label;\n        const ellipsis = '...';\n        const clipLength = maxCh - 3;\n        if (clipLength <= 0) {\n            return '';\n        }\n\n        return textMode === 'rtl'\n            ? ellipsis + label.slice(-clipLength) // Keep the end, truncate the front\n            : label.slice(0, clipLength) + ellipsis; // Keep the start, truncate the end\n    }\n}\n","/**\n * Icon down\n **/\nimport { registerIcon } from '../registerIcon';\nconst data = {\"name\":\"down\",\"data\":\"<svg fill=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"m17.829 8.582 1.2 1.2L12.01 16.8 4.97 9.76l1.2-1.2 5.84 5.84 5.818-5.818Z\\\"/></svg>\"}; //NOSONAR\nconst down = registerIcon(data);\nexport default down;\n\n","/**\n * Icon selectAll\n **/\nimport { registerIcon } from '../registerIcon';\nconst data = {\"name\":\"selectAll\",\"data\":\"<svg fill=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M7.98 16.02h10.44V5.58H7.98zM6.6 17.4V4.2h13.2v13.2z\\\" clip-rule=\\\"evenodd\\\"/><path fill-rule=\\\"evenodd\\\" d=\\\"M5.52 18.48V7.2H4.08v12.72H16.8v-1.44z\\\" clip-rule=\\\"evenodd\\\"/><path d=\\\"m17.256 9.1-1.06-1.06-3.94 3.939-2.052-2.053-1.06 1.06 3.113 3.114z\\\"/></svg>\"}; //NOSONAR\nconst selectAll = registerIcon(data);\nexport default selectAll;\n\n","/**\n * Icon eye\n **/\nimport { registerIcon } from '../registerIcon';\nconst data = {\"name\":\"eye\",\"data\":\"<svg fill=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M19.686 11.778a9.7 9.7 0 0 0-1.854-2.394 8.264 8.264 0 0 0-11.634 0 9.7 9.7 0 0 0-1.854 2.394l-.102.204.102.204a9.5 9.5 0 0 0 1.854 2.394 8.264 8.264 0 0 0 11.634 0 9.9 9.9 0 0 0 1.854-2.394l.102-.204-.096-.204zm-7.68-3.27c1.92 0 3.48 1.548 3.486 3.468 0 1.92-1.548 3.48-3.468 3.486a3.48 3.48 0 0 1-3.486-3.468v-.012a3.475 3.475 0 0 1 3.468-3.474\\\" clip-rule=\\\"evenodd\\\"/></svg>\"}; //NOSONAR\nconst eye = registerIcon(data);\nexport default eye;\n\n","/**\n * Icon moreVertical\n **/\nimport { registerIcon } from '../registerIcon';\nconst data = {\"name\":\"moreVertical\",\"data\":\"<svg fill=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M10.8 13.2v-2.4h2.4v2.4zm0-4.8V6h2.4v2.4zm0 9.6v-2.4h2.4V18z\\\"/></svg>\"}; //NOSONAR\nconst moreVertical = registerIcon(data);\nexport default moreVertical;\n\n","/**\n * Icon eyeStrike\n **/\nimport { registerIcon } from '../registerIcon';\nconst data = {\"name\":\"eyeStrike\",\"data\":\"<svg fill=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\"><path d=\\\"M18.894 19.866 4.044 5.016l.936-.936 14.85 14.85z\\\"/><path fill-rule=\\\"evenodd\\\" d=\\\"m15.468 12.018 2.46 2.454a9.7 9.7 0 0 0 1.734-2.28l.102-.204-.096-.204a9.7 9.7 0 0 0-1.854-2.394 8.24 8.24 0 0 0-7.254-2.268l1.392 1.392h.03c1.92 0 3.48 1.548 3.486 3.468v.042zm-3.528 3.444a3.47 3.47 0 0 1-3.42-3.414L6.024 9.54a9.7 9.7 0 0 0-1.698 2.244l-.102.204.102.204a9.5 9.5 0 0 0 1.854 2.394 8.27 8.27 0 0 0 7.17 2.286z\\\" clip-rule=\\\"evenodd\\\"/></svg>\"}; //NOSONAR\nconst eyeStrike = registerIcon(data);\nexport default eyeStrike;\n\n","import { version } from './metadata';\n\nlet icons;\nconst getStash = () => {\n    if (!icons) {\n        let studio = window['studio'];\n        if (!studio) {\n            studio = window['studio'] = {};\n        }\n        let sui = studio['sui'];\n        if (!sui) {\n            sui = studio['sui'] = {};\n        }\n        const major = version.split('.')[0] || version;\n        const stash = `icons${major}`;\n        icons = icons || sui[stash];\n        if (!icons) {\n            icons = sui[stash] = {};\n        }\n    }\n    return icons;\n};\n\nexport const registerIcon = (data) => {\n    const stash = getStash();\n    if (!stash[data.name]) {\n        stash[data.name] = data.data;\n    }\n    return data.name;\n};\n\nexport const fetchIcon = (icon) => {\n    return getStash()[icon];\n};\n","/**\n * Icon excludeAll\n **/\nimport { registerIcon } from '../registerIcon';\nconst data = {\"name\":\"excludeAll\",\"data\":\"<svg fill=\\\"currentColor\\\" viewBox=\\\"0 0 24 24\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M7.98 16.02h10.44V5.58H7.98zM6.6 17.4V4.2h13.2v13.2z\\\" clip-rule=\\\"evenodd\\\"/><path d=\\\"m13.2 9.74-2.016-2.016-1.06 1.06 2.015 2.016-2.015 2.015 1.06 1.06 2.016-2.014 2.015 2.015 1.06-1.06L14.26 10.8l2.016-2.015-1.061-1.06L13.2 9.738Z\\\"/><path fill-rule=\\\"evenodd\\\" d=\\\"M5.52 18.48V7.2H4.08v12.72H16.8v-1.44z\\\" clip-rule=\\\"evenodd\\\"/></svg>\"}; //NOSONAR\nconst excludeAll = registerIcon(data);\nexport default excludeAll;\n\n","/*\n * Metadata build info for package. Managed at build time by task tools/metadata.ts\n */\nexport const version = '0.0.0';\nexport const buildDate = '2021-02-02- 02:02:02.000';\n"],"names":["_css","css","findCommonSequence","labels","matchFn","trimFn","nonEmptyLabels","filter","label","length","sequence","i","findCommonPrefix","str","seq","startsWith","slice","findCommonSuffix","endsWith","PlotLegend","PlotLegend_1","BaseElement","constructor","_this","legendData","selection","hiddenIds","togglableVisibility","hoveredElement","undefined","fixedWidth","_cache","size","itemHeight","font","spacings","buttonSize","group","_closeContextMenu","this","_openGroup","_renderIcon","clazz","icon","html","Icon","tag","_getRectangleSVG","color","config","arguments","x","y","width","height","svg","connectedCallback","style","setProperty","dynSubRegister","module","elem","super","removeProperty","_updateSize","exportSVG","currentY","titleHeight","maxCh","Number","getComputedStyle","getPropertyValue","split","scrollTop","_b","_a","shadowRoot","querySelector","groupElements","Array","from","querySelectorAll","groups","map","groupIndex","textMode","title","closed","classList","contains","visibleItems","legendItems","_","allGradientItems","every","item","labelIcon","marker","items","arr","offset","selected","includes","viewBox","elems","iconSvg","_getLabelIcon","innerSvg","selectionHtml","nothing","hiddenClass","indexOf","_truncateSvgText","groupOffset","totalHeight","gradientItems","_getGradientRect","cssVariables","color_secondary_5","update","changedProperties","has","get","_updateTruncatedLabels","render","baseClassName","rootClasses","createClassName","tagName","toLowerCase","Scrollbar","_renderCustomLegend","_renderContextMeny","legendGroup","legendGroupLabels","hiddenLabelsAmount","s","allSelected","allHidden","selectOptions","excludeAll","selectAll","showOptions","eye","eyeStrike","ContextMenu","button","ContextMenuItem","e","groupEvent","labelsEvent","call","rightGroupEvent","parentElement","colors","l","step","stops","index","_renderLegendItem","target","toggle","_renderMoreButton","down","hasCheckAll","hasToggleVisibility","Button","stopPropagation","moreVertical","legendRightHtml","rightSlotIcon","rightSlotEvent","_legendItemHoverEnter","_legendItemHoverLeave","_c","metadata","id","_d","groupTitle","_e","labelEvent","ifDefined","dispatchEvent","CustomEvent","bubbles","detail","hovering","_getCircleSVG","_getMarkerSVG","_getMarkerSVGCircle","_getMarkerSVGRectangle","_getMarkerSVGFull","_getMarkerSVGGradient","_getMarkerSVGIcon","console","warn","Object","assign","stop","withLabel","d","paths","data","selectTransform","_getLineSVG","line","forEach","g","push","clipLength","__decorate","property","type","Boolean","attribute","converter","booleanConverter","String","reflect","state","defineElement","styles","root","is","cssSelector","cssVariableAsVar","version","registerIcon","icons","getStash","studio","window","sui","stash","name","fetchIcon"],"sourceRoot":""}