{"version":3,"file":"static/js/5926.d2b697c6.chunk.js","mappings":"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","sources":["../node_modules/@umetrics/sartorius-ui-progress/src/progressProperties.ts","../node_modules/@umetrics/sartorius-ui-progress/src/progress.ts","../node_modules/@umetrics/sartorius-ui-progress/src/progressStyle.ts","../node_modules/@umetrics/sartorius-ui-progress/src/metadata.ts"],"sourcesContent":["export enum ProgressSlot {\n    ACTION_SLOT = 'action-slot',\n}\n\nexport enum ProgressSize {\n    SMALL = 'small',\n    MEDIUM = 'medium',\n    LARGE = 'large',\n}\n\nexport interface ProgressProperties {\n    value?: number; // [min..max]\n    min?: number; // default 0\n    max?: number; // default 1\n    label?: string | (() => string); // default use value*100\n    unit?: string; // default %\n    onGray?: boolean;\n    size?: string | ProgressSize;\n\n    horizontal?: boolean; // default false\n    radius?: number;\n\n    duration?: number; // Enable timer feature to auto increment value\n}\n","import {\n    BaseElement,\n    booleanConverter,\n    createClassName,\n    defineElement,\n    html,\n    property,\n    svg,\n} from '@umetrics/sartorius-ui-base';\nimport { progressStyles } from './progressStyle';\nimport { ProgressProperties, ProgressSize, ProgressSlot } from './progressProperties';\nimport { version } from './metadata';\n\n@defineElement({ tagName: 'progress', styles: progressStyles, version })\nexport class Progress extends BaseElement implements ProgressProperties {\n    // Public members\n    @property({ type: Number, reflect: true })\n    value = 0;\n    @property({ type: Number })\n    min = 0;\n    @property({ type: Number })\n    max = 1;\n\n    @property({ type: String })\n    label;\n    @property({ type: String, reflect: true })\n    unit = '%';\n\n    @property({ type: Boolean, reflect: true, converter: booleanConverter })\n    horizontal = false;\n    @property({ type: ProgressSize, reflect: true })\n    size = ProgressSize.SMALL;\n\n    @property({ type: Number })\n    radius = 45;\n\n    @property({ type: Number })\n    duration = 0;\n    @property({ type: Boolean, converter: booleanConverter, attribute: 'on-gray', reflect: true })\n    onGray = false;\n\n    // Private members\n    private _counter;\n\n    protected update(changedProperties) {\n        super.update(changedProperties);\n        const prevDuration = changedProperties.get('duration');\n        if (prevDuration !== undefined) {\n            clearTimeout(this._counter);\n            if (this.duration) {\n                this._percentageCounter(this.duration / 100);\n            }\n        }\n    }\n\n    protected render() {\n        const [baseClassName, rootClasses] = createClassName(this.tagName.toLowerCase(), {});\n\n        const { min, max, radius, value } = this;\n        const percentage = value / (max - min);\n        const circumference = 2 * Math.PI * radius;\n        const dasharray = `${percentage * circumference} ${circumference}`;\n        const displayValue = this._getLabel();\n\n        const d = this.horizontal\n            ? svg`\n\n                  <rect class=\"${baseClassName}-full\" x=\"0\" width=\"100%\" y=\"0\" height=\"100%\" stroke-width='0'> </rect>\n                  <rect class=\"${baseClassName}-bar\" x=\"0\" width=\"${\n                      percentage * 100\n                  }%\" y=\"0\" height=\"100%\" stroke-width='0'> </rect>\n              `\n            : svg`\n                  <circle\n                      class=\"${baseClassName}-full\"\n                      cx=\"50\"\n                      cy=\"50\"\n                      fill-opacity=\"0\"\n                      r=\"${this.radius}\"\n                      stroke-width=\"4\"\n                  ></circle>\n                  <circle\n                      class=\"${baseClassName}-bar\"\n                      cx=\"50\"\n                      cy=\"50\"\n                      fill-opacity=\"0\"\n                      r=\"${this.radius}\"\n                      stroke-dasharray=${dasharray}\n                      stroke-width=\"5\"\n                      transform=\"rotate(-90 50 50)\"\n                  ></circle>\n\n                  <text dominant-baseline=\"middle\" text-anchor=\"middle\" x=\"50\" y=\"50\">\n                      <tspan class=\"${baseClassName}-value\">${displayValue}</tspan>\n                  </text>\n                  ${this._renderUnit(baseClassName)}\n              `;\n\n        return html`\n            <svg class=\"${rootClasses}\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\">${d}</svg>${this.horizontal\n                ? html`<span class=\"${baseClassName}-horizontal-value\">${displayValue} ${this.unit}</span>`\n                : null}\n            ${this.horizontal ? html` <slot name=\"${ProgressSlot.ACTION_SLOT}\"></slot>` : null}\n        `;\n    }\n\n    private _renderUnit = (baseClassName) =>\n        this.unit\n            ? svg`\n                  <text dominant-baseline=\"middle\" text-anchor=\"middle\" x=\"50\" y=\"65\">\n                      <tspan class=\"${baseClassName}-unit\">${this.unit}</tspan>\n                  </text>\n              `\n            : null;\n\n    private _getLabel = (): string => {\n        if (this.label) {\n            if (typeof this.label === 'function') {\n                return this.label();\n            }\n            return this.label;\n        }\n        return '' + Math.round(this.value * 100);\n    };\n\n    private _percentageCounter(time: number) {\n        this._counter = setTimeout(() => {\n            if (this.value < 1) {\n                this.value += 0.01;\n                this._percentageCounter(this.duration / 100);\n            } else {\n                clearTimeout(this._counter);\n            }\n        }, time);\n    }\n}\n","import { css, CSSResultArray, cssSelector, cssVariableAsVar, GenerateStyles, style } from '@umetrics/sartorius-ui-base';\n\nexport const progressStyles: GenerateStyles = (tagName) => {\n    const { root, child } = cssSelector(tagName);\n\n    return [\n        style,\n        css`\n            :host {\n                --progress-width: 158px;\n                --progress-height: 158px;\n                --progress-text-color: black;\n\n                display: inline-block;\n                width: var(--progress-width);\n                height: var(--progress-height);\n            }\n\n            :host([horizontal]) {\n                --progress-height: 4px;\n                display: flex;\n            }\n            :host([horizontal][size='small']) {\n                --progress-width: 200px;\n            }\n            :host([horizontal][size='medium']) {\n                --progress-width: 300px;\n            }\n            :host([horizontal][size='large']) {\n                --progress-width: 400px;\n            }\n\n            :host([horizontal]) ${child('full')} {\n                stroke: #c6c6c6;\n                fill: #c6c6c6;\n            }\n\n            :host([horizontal]) ${child('bar')} {\n                stroke: #3c3c3c;\n                fill: #3c3c3c;\n            }\n            :host([onGray]) {\n                --progress-text-color: white;\n            }\n\n            ${root} {\n                display: block;\n                width: 100%;\n                height: 100%;\n            }\n\n            ${child('full')} {\n                stroke: ${cssVariableAsVar('color_secondary_3')};\n                fill: ${cssVariableAsVar('color_secondary_3')};\n            }\n            :host([onGray]) ${child('full')} {\n                stroke: ${cssVariableAsVar('color_secondary_9')};\n                fill: ${cssVariableAsVar('color_secondary_9')};\n            }\n\n            ${child('bar')} {\n                stroke: ${cssVariableAsVar('color_primary_1')};\n                fill: ${cssVariableAsVar('color_primary_1')};\n                transition: stroke-dasharray 300ms linear;\n            }\n\n            ${child('horizontal-value')} {\n                display: flex;\n                font-size: 14px;\n                max-width: 67px;\n                min-width: 37.5px;\n                align-items: center;\n                justify-content: center;\n                margin-left: 8px;\n                color: #6f6f6f;\n            }\n\n            ::slotted([slot='action-slot']) {\n                display: flex;\n                font-size: 20px;\n                align-items: center;\n            }\n\n            ${child('value')} {\n                fill: var(--progress-text-color);\n                font: normal normal bold 22px/42px Roboto;\n            }\n\n            ${child('unit')} {\n                fill: var(--progress-text-color);\n                font: normal normal normal 11px/24px Roboto;\n            }\n        `,\n    ] as CSSResultArray;\n};\n","/*\n * Metadata build info for package. Managed at build time by task tools/metadata.ts\n */\nexport const version = '0.0.0';\nexport const buildDate = '2021-02-02- 02:02:02.000';\n"],"names":["ProgressSlot","ProgressSize","Progress","BaseElement","constructor","value","min","max","unit","horizontal","size","SMALL","radius","duration","onGray","_renderUnit","baseClassName","this","svg","_getLabel","label","Math","round","update","changedProperties","super","undefined","get","clearTimeout","_counter","_percentageCounter","render","rootClasses","createClassName","tagName","toLowerCase","percentage","circumference","PI","dasharray","displayValue","d","html","ACTION_SLOT","time","setTimeout","__decorate","property","type","Number","reflect","String","Boolean","converter","booleanConverter","attribute","defineElement","styles","root","child","cssSelector","style","css","cssVariableAsVar","version"],"sourceRoot":""}