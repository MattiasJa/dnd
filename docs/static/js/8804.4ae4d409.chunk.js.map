{"version":3,"file":"static/js/8804.4ae4d409.chunk.js","mappings":"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","sources":["../node_modules/@umetrics/sartorius-ui-text-field/src/textFieldEvent.ts","../node_modules/@umetrics/sartorius-ui-text-field/src/formatUtils.ts","../node_modules/@umetrics/sartorius-ui-text-field/src/textField.ts","../node_modules/@umetrics/sartorius-ui-text-field/src/textFieldStyle.ts","../node_modules/@umetrics/sartorius-ui-text-field/src/metadata.ts"],"sourcesContent":["import { BaseInputEvent } from '@umetrics/sartorius-ui-base-input';\nimport { TextField } from './textField';\n\nexport enum TextFieldEventType {\n    Change = 'change',\n    Input = 'input',\n}\nexport class TextFieldEvent extends BaseInputEvent<TextField, TextFieldEventType> {}\n","const splitDecimal = (numStr: string) => {\n    const parts = numStr.split(/([,.])/);\n    const beforeDecimal = parts[0];\n    const separator = parts[1] || '';\n    const afterDecimal = parts[2] || '';\n\n    return {\n        beforeDecimal,\n        separator,\n        afterDecimal,\n    };\n};\n\nconst applyThousandSeparator = (str: string) => {\n    const { beforeDecimal, separator, afterDecimal } = splitDecimal(str);\n\n    const thousandSeparator = ' ';\n    const thousandsGroupRegex = /(\\d)(?=(\\d{3})+(?!\\d))/g;\n    let index = beforeDecimal.search(/[1-9]/);\n    index = index === -1 ? beforeDecimal.length : index;\n    const thousandSeparated =\n        beforeDecimal.substring(0, index) +\n        beforeDecimal.substring(index, beforeDecimal.length).replace(thousandsGroupRegex, '$1' + thousandSeparator);\n\n    return thousandSeparated + separator + afterDecimal;\n};\n\nconst formatDecimalSeparator = (numStr: string): string => numStr.replace(/,/g, '.');\n\nconst hasValidChars = (numStr: string): boolean => /^[0-9\\s,.:-]*$/.test(numStr);\n\nconst hasValidSeparators = (numStr: string): boolean => /^[^.,]*[.,]?[^.,]*$/.test(numStr);\n\nconst hasValidNegation = (numStr: string): boolean => numStr.substring(1).indexOf('-') === -1;\n\nconst sanitizeWhiteSpace = (numStr: string): string => numStr.replace(/\\s/g, '');\n\nconst convertToScientificNotationNumber = (numStr: string): string => {\n    return Number(numStr).toLocaleString('en-US', {\n        useGrouping: false,\n        maximumFractionDigits: 20,\n    });\n};\n\nexport const unformatNumber = (numStr: string): string => {\n    return sanitizeWhiteSpace(numStr);\n};\n\nexport const formatNumber = (numStr) => {\n    numStr = '' + numStr;\n    if (numStr === '' || numStr === '-') {\n        return numStr;\n    }\n\n    const whiteSpaceSanitized = sanitizeWhiteSpace(numStr);\n    const thousandSeparated = applyThousandSeparator(whiteSpaceSanitized);\n\n    return formatDecimalSeparator(thousandSeparated);\n};\n\nexport const isValidNumber = (value: string): boolean => {\n    return hasValidChars(value) && hasValidSeparators(value) && hasValidNegation(value);\n};\n\nexport const isValidInputCharacter = (char?: string) => {\n    return !!(char || '').match(/\\d/);\n};\n\nexport const handleNumberFormatting = (value: string, defaultErrorValue?: string): string => {\n    const backupValue = defaultErrorValue ? defaultErrorValue : value;\n    const isExponentialNotation = value.toLowerCase().indexOf('e') > -1;\n\n    if (isExponentialNotation) {\n        const result = convertToScientificNotationNumber(value);\n        return result !== NaN.toString() ? formatNumber(result) : backupValue;\n    } else {\n        return isValidNumber(value) ? formatNumber(value) : backupValue;\n    }\n};\n","import {\n    BaseInput,\n    booleanConverter,\n    createClassName,\n    defineElement,\n    FeedbackMessageType,\n    html,\n    ifDefined,\n    property,\n    query,\n    state,\n} from '@umetrics/sartorius-ui-base-input';\nimport { UUID } from '@umetrics/sartorius-ui-utils';\nimport { textFieldStyle } from './textFieldStyle';\nimport { TextFieldProperties, TextFieldSize, TextFieldSlot } from './textFieldProperties';\nimport { version } from './metadata';\nimport { TextFieldEvent, TextFieldEventType } from './textFieldEvent';\nimport { handleNumberFormatting, unformatNumber } from './formatUtils';\n\n@defineElement({\n    tagName: 'text-field',\n    styles: textFieldStyle,\n    version,\n    //    sub: [FeedbackMessage]\n})\nexport class TextField extends BaseInput<TextField> implements TextFieldProperties {\n    // Static members\n    public static readonly VALIDATION_EMPTY = 'validation-empty';\n    public static readonly VALIDATION_CUSTOM = 'validation-custom';\n\n    // Public members\n    @property({ type: String, reflect: false })\n    placeholder = '';\n    @property({ type: Boolean, converter: booleanConverter, reflect: false })\n    required = false;\n    @property({ type: Boolean, converter: booleanConverter, reflect: false })\n    validation = false;\n    @property({ type: String, reflect: false })\n    regexp = '';\n    @property({ type: String, reflect: false })\n    validationMessage = '';\n    @property({ type: Number, reflect: false })\n    maxLength = -1;\n    @property({ type: String, reflect: false, attribute: 'valid-interval' })\n    validInterval = '';\n    @property({ type: String, reflect: false })\n    unit = '';\n    @property({ type: Boolean, reflect: true, attribute: 'full-width', converter: booleanConverter })\n    fullWidth = false;\n    @property({ type: Boolean, converter: booleanConverter, reflect: false })\n    autofocus = false;\n    @property({ type: Boolean, converter: booleanConverter, attribute: 'force-unit' })\n    forceUnit = false;\n    @property({ type: String, reflect: false })\n    type = 'text';\n    @property({ type: TextFieldSize, reflect: true })\n    size = TextFieldSize.MEDIUM;\n    @property({ type: Boolean, converter: booleanConverter, attribute: 'readonly' })\n    readOnly = false;\n\n    @property({ type: String, reflect: true })\n    get value() {\n        return this.inputElement ? this.inputElement.value : this._value;\n    }\n\n    set value(inputValue: string) {\n        let oldValue = this._value;\n        let value = this._handleValueAsString(inputValue);\n\n        if (oldValue !== value) {\n            if (this.type === 'number') {\n                value = handleNumberFormatting(value);\n            }\n            this._value = value;\n\n            if (this.inputElement && this.inputElement.value !== value) {\n                oldValue = this.inputElement.value;\n                this.inputElement.value = value;\n            }\n\n            this.clearValidation();\n            this.checkIsValid();\n            this.checkIsRequired();\n\n            this.requestUpdate('value', oldValue); // Triggering re-render\n        }\n    }\n\n    @query('input') // Selector to find input tag\n    public inputElement!: HTMLInputElement;\n\n    @query('div[class*=\"-input-row\"]', true) private _inputDiv;\n\n    @state()\n    private _showUnit = true;\n\n    // Private members\n    private _value = '';\n    private _isFocused = false;\n\n    private _resizeObserver: ResizeObserver | null = null;\n    private _animationFrame: number | null = null;\n\n    constructor() {\n        super();\n        this._handleResize = this._handleResize.bind(this);\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n\n        if (!this.id) {\n            this.id = UUID();\n        }\n    }\n\n    focus(options?: FocusOptions) {\n        this.inputElement.focus(options);\n    }\n\n    blur() {\n        this.inputElement.blur();\n    }\n\n    disconnectedCallback() {\n        this._uninstallResizeObserver();\n        if (this._resizeObserver !== null) {\n            this._resizeObserver.disconnect();\n        }\n    }\n\n    protected firstUpdated(): void {\n        this.addEventListener('focus', this._onFocus);\n        this.addEventListener('blur', this._onBlur);\n        this._installResizeObserver();\n\n        if (this.autofocus && this.inputElement) {\n            if (document.activeElement instanceof HTMLElement) {\n                document.activeElement.blur();\n            }\n            this.inputElement.focus();\n        }\n    }\n\n    protected update(_changedProperties) {\n        if (_changedProperties.has('regexp')) {\n            this.checkIsValid();\n        }\n\n        if (_changedProperties.has('type') && this._value) {\n            if (_changedProperties.get('type') === 'number') {\n                this.value = handleNumberFormatting(this._value);\n            } else {\n                const temp = this._value;\n                this._value = '';\n                this.value = temp;\n            }\n        }\n\n        super.update(_changedProperties);\n    }\n\n    protected renderLabelWrapper(baseClassName) {\n        return this.label\n            ? html` <label id=\"${this.id}-label\" for=\"${this.id}\" class=\"${baseClassName}-label-root\">\n                  ${this._renderLabel(baseClassName)}\n              </label>`\n            : html``;\n    }\n\n    protected render() {\n        const [baseClassName, rootClasses] = createClassName(this.tagName.toLowerCase(), {\n            disabled: this.disabled,\n            readonly: this.readOnly,\n            required: this.required,\n            'full-width': this.fullWidth,\n            [this.size]: true,\n            validation: this.validation || this.additionalFeedbackType === FeedbackMessageType.Failure,\n            _isFocused: this._isFocused,\n        });\n\n        const unitHtml =\n            this.unit && this._showUnit\n                ? html` <div class=\"${baseClassName}-unit\" @click=\"${() => this.focus()}\" title=\"${this.unit}\">\n                      ${this.unit}\n                  </div>`\n                : null;\n\n        const validationHtml = this.validation\n            ? html`<span class=\"${baseClassName}-validation-message\">\n                  <slot name=\"${this.validationMessage}\"></slot>\n              </span>`\n            : null;\n\n        const slotHtml = this.readOnly\n            ? null\n            : html` <div class=\"${baseClassName}-side-input-slot-wrapper\">\n                  <slot\n                      name=\"${TextFieldSlot.INPUT_BUTTON_SLOT}\"\n                      class=\"${baseClassName}-${TextFieldSlot.INPUT_BUTTON_SLOT}\"\n                  >\n                  </slot>\n              </div>`;\n\n        const extraClass =\n            this.additionalFeedbackMessage === '' && this.additionalFeedbackType === FeedbackMessageType.Failure\n                ? `--failure`\n                : '';\n        const validIntervalHtml = this.validInterval\n            ? html`<span class=\"${baseClassName}-valid-interval${extraClass}\">${this.validInterval}</span>`\n            : null;\n\n        return html`\n            <div class=\"${rootClasses}\">\n                <div class=\"${baseClassName}-label-wrapper\">\n                    ${this.renderLabelWrapper(baseClassName)}\n                    <slot\n                        name=\"${TextFieldSlot.LABEL_ICON_SLOT}\"\n                        class=\"${baseClassName}-${TextFieldSlot.LABEL_ICON_SLOT}\"\n                    ></slot>\n                </div>\n                <div class=\"${baseClassName}-input-row\">\n                    <div class=\"${baseClassName}-border\">\n                        <input\n                            id=\"${this.id}\"\n                            class=\"${baseClassName}-input\"\n                            type=\"text\"\n                            value=\"${this.value}\"\n                            placeholder=\"${this.placeholder}\"\n                            maxlength=\"${ifDefined(this.maxLength > 0 ? this.maxLength : undefined)}\"\n                            ?disabled=\"${!!this.disabled}\"\n                            ?readonly=\"${this.readOnly}\"\n                            @change=\"${this._onChange}\"\n                            @input=\"${this._onInput}\"\n                            @copy=\"${this.type === 'number' ? this._onCopy : null}\"\n                        />\n                        ${unitHtml}\n                        <slot name=\"${TextFieldSlot.SUFFIX_ICON_SLOT}\" class=\"${baseClassName}-suffix-icon\"></slot>\n                    </div>\n                    ${slotHtml}\n                </div>\n                <div class=\"${baseClassName}-sub-row\">\n                    <div class=\"${baseClassName}-feedback-wrapper\">\n                        ${this._renderFeedback(baseClassName)} ${validationHtml}\n                    </div>\n                    <div class=\"${baseClassName}-interval-wrapper\">${validIntervalHtml}</div>\n                </div>\n            </div>\n        `;\n    }\n\n    private clearValidation() {\n        this.validation = false;\n    }\n\n    private checkIsRequired() {\n        if (this.value === '' && this.required) {\n            this.validation = true;\n            this.validationMessage = TextField.VALIDATION_EMPTY;\n        }\n    }\n\n    private checkIsValid(): void {\n        function stringToRegex(s) {\n            const m = s ? s.match(/^(.)(.*?)\\1([gimsuy]*)$/) : undefined;\n            return m ? new RegExp(m[2], m[3]) : new RegExp(s);\n        }\n\n        if (this.value && this.regexp) {\n            const customRegex = stringToRegex(this.regexp);\n            if (this.value.replace(customRegex, '')) {\n                this.validation = true;\n                this.validationMessage = TextField.VALIDATION_CUSTOM;\n            }\n        }\n    }\n\n    private _onChange(event: Event): void {\n        const target = event.target as HTMLInputElement;\n        let localValue = this._handleValueAsString(target.value);\n\n        if (this.type === 'number') {\n            localValue = unformatNumber(localValue);\n        }\n\n        this.clearValidation();\n        this.checkIsValid();\n        this.checkIsRequired();\n        this.dispatchEvent(\n            new TextFieldEvent(TextFieldEventType.Change, {\n                detail: { value: localValue, option: { ...this, value: +this.value } },\n            })\n        );\n    }\n\n    private _onInput(event: Event): void {\n        const target = event.target as HTMLInputElement;\n        const localValue = this._handleValueAsString(target.value);\n        const oldValue = this._value;\n\n        this.clearValidation();\n        this.checkIsValid();\n        this.checkIsRequired();\n        this.requestUpdate('value', oldValue); // Triggering re-render\n\n        event.stopPropagation();\n        this.dispatchEvent(\n            new TextFieldEvent(TextFieldEventType.Input, { detail: { value: localValue, option: this } })\n        );\n    }\n\n    private _onFocus(event: Event): void {\n        const target = event.target as HTMLInputElement;\n        let localValue = this._handleValueAsString(target.value);\n\n        if (this.type === 'number') {\n            localValue = unformatNumber(localValue);\n        }\n\n        this._value = localValue;\n\n        if (this.inputElement && this.inputElement.value !== localValue) {\n            this.inputElement.value = localValue;\n        }\n\n        if (event.target) {\n            this._isFocused = true;\n            this.requestUpdate('_isFocused'); // trigger value update\n        }\n    }\n\n    private _onCopy(event: ClipboardEvent): void {\n        const selection = document.getSelection();\n        if (event.clipboardData && selection) {\n            event.clipboardData.setData('text/plain', selection.toString());\n        }\n        event.preventDefault();\n    }\n\n    private _onBlur(event: Event): void {\n        const target = event.target as HTMLInputElement;\n        let localValue = this._handleValueAsString(target.value);\n\n        this._value = localValue;\n\n        if (this.type === 'number') {\n            localValue = handleNumberFormatting(localValue);\n        }\n\n        if (this.inputElement && this.inputElement.value !== localValue) {\n            this.inputElement.value = localValue;\n        }\n\n        this.clearValidation();\n        this.checkIsValid();\n        this.checkIsRequired();\n\n        if (event.target) {\n            this._isFocused = false;\n            this.requestUpdate('_isFocused'); // trigger value update\n        }\n    }\n\n    private _handleResize(entries) {\n        if (!this._animationFrame) {\n            this._animationFrame = window.requestAnimationFrame(() => {\n                this._animationFrame = null;\n                entries.forEach((entry) => {\n                    if (entry.contentRect.width < 120) {\n                        this._inputDiv.style.width = '100%';\n                        if (!this.forceUnit) {\n                            this._showUnit = false;\n                        }\n                    } else {\n                        this._showUnit = true;\n                    }\n                });\n            });\n        }\n    }\n\n    private _uninstallResizeObserver() {\n        if (this._resizeObserver !== null && this._inputDiv) {\n            this._resizeObserver.unobserve(this._inputDiv);\n        }\n    }\n\n    private _installResizeObserver() {\n        if (this._resizeObserver === null) {\n            this._resizeObserver = new ResizeObserver(this._handleResize);\n        }\n        this._resizeObserver.observe(this._inputDiv);\n    }\n\n    private _handleValueAsString = (value) => {\n        return value == null ? '' : '' + value;\n    };\n}\n","import {\n    baseInputStyle,\n    css,\n    CSSResultArray,\n    cssSelector,\n    cssVariableAsVar,\n    GenerateStyles,\n} from '@umetrics/sartorius-ui-base-input';\n\nexport const textFieldStyle: GenerateStyles = (tagName) => {\n    const { root, child, is } = cssSelector(tagName);\n\n    const black = cssVariableAsVar('color_primary_3');\n    const red = cssVariableAsVar('color_traffic_light_1');\n    const grayThree = cssVariableAsVar('color_secondary_3');\n    const grayFour = cssVariableAsVar('color_secondary_4');\n    const graySix = cssVariableAsVar('color_secondary_6');\n    const graySeven = cssVariableAsVar('color_secondary_7');\n    const grayEight = cssVariableAsVar('color_secondary_8');\n    const grayTen = cssVariableAsVar('color_secondary_10');\n\n    return [\n        baseInputStyle(tagName),\n        css`\n            ${root} {\n                min-height: var(--textfield-root-min-height);\n                display: flex;\n                flex-direction: column;\n                align-items: flex-start;\n                max-width: var(--textfield-root-max-width, 240px);\n                width: var(--textfield-root-width, 100%);\n                min-width: var(--textfield-root-min-width, 80px);\n            }\n\n            ${is('small')} ${child('input-row')} {\n                height: var(--textfield-input-height, 32px);\n            }\n\n            ${is('medium')} ${child('input-row')} {\n                height: var(--textfield-input-height, 40px);\n            }\n\n            ${is('large')} ${child('input-row')} {\n                height: var(--textfield-input-height, 48px);\n            }\n\n            ${is('xlarge')} ${child('input-row')} {\n                height: var(--textfield-input-height, 56px);\n            }\n\n            ${child('label')} {\n                display: inline-block;\n                overflow: hidden;\n                text-overflow: ellipsis;\n                white-space: nowrap;\n                height: 21px;\n                width: 100%;\n            }\n\n            ${child('label-icon-slot')} {\n                color: ${grayEight};\n            }\n\n            ${child('label-root')} {\n                font-size: 0;\n                min-width: 0px;\n                width: 100%;\n            }\n\n            ${child('border')} {\n                display: flex;\n                align-items: center;\n                background: white;\n                justify-content: space-between;\n                min-width: 0;\n                width: inherit;\n                position: relative;\n            }\n\n            ${child('border')}:after {\n                content: ' ';\n                display: block;\n                position: absolute;\n                border: var(--textfield-input-border, 1px solid ${graySix});\n                z-index: 0;\n                pointer-events: none;\n                inset: 0;\n            }\n\n            ${is('_isFocused')} ${child('border')}:after {\n                outline: var(--textfield-input-border-focused, 2px solid ${grayTen});\n                border: none;\n                inset: 2px;\n                z-index: 1;\n            }\n\n            ${is('_isFocused', 'validation')} ${child('border')}:after {\n                border: none;\n                outline: var(--textfield-input-border-focused, 2px solid ${red});\n            }\n\n            ${is('!_isFocused', '!disabled', '!readonly')} ${child('border')}:hover:after {\n                border: 1px solid #7e7e7e;\n                z-index: 1;\n            }\n\n            ${is('validation', '!_isFocused', '!disabled', '!readonly')} ${child('border')}:hover:after {\n                border: 1px solid #b80038;\n                z-index: 1;\n            }\n\n            ${is('validation')} ${child('border')}:after {\n                border: 1px solid ${red};\n                z-index: 1;\n            }\n\n            ${is('validation')} ${child('unit')} {\n                color: ${red};\n            }\n\n            ${is('validation')} ${child('label')} {\n                color: ${red};\n            }\n\n            ${is('validation')} ${child('label-icon-slot')} {\n                color: ${red};\n            }\n\n            ${is('validation')} ${child('suffix-icon')} {\n                color: ${red} !important;\n            }\n\n            ${is('disabled')} ${child('border')} {\n                outline: none;\n                background-color: #fafafa;\n            }\n\n            ${is('disabled')} ${child('border')}:after {\n                border: 1px solid ${grayThree};\n            }\n\n            ${child('input-row')} {\n                height: var(--textfield-input-height, 40px);\n                display: flex;\n                width: inherit;\n            }\n\n            ${child('sub-row')} {\n                width: 100%;\n                display: flex;\n                justify-content: space-between;\n            }\n\n            ${child('label-wrapper')} {\n                width: 100%;\n                display: flex;\n                flex-direction: row;\n                justify-content: flex-end;\n            }\n\n            ${child('interval-wrapper')} {\n                display: flex;\n                justify-content: flex-end;\n                flex-basis: 20px;\n            }\n\n            ${child('feedback-wrapper')} {\n                position: relative;\n                display: flex;\n                justify-content: flex-start;\n                white-space: normal;\n                flex-basis: 100%;\n            }\n\n            ${child()}unit,\n            ${child()}valid-interval {\n                font-size: 14px;\n            }\n\n            ${child('unit')} {\n                text-align: right;\n                padding: 10px 9px 10px 0px;\n                user-select: none;\n                white-space: nowrap;\n                overflow: hidden;\n                cursor: text;\n                color: ${graySeven};\n            }\n\n            ::slotted([slot='suffix-icon-slot']) {\n                padding-right: 12px;\n                font-size: 24px;\n            }\n\n            ${child('valid-interval')} {\n                margin-top: 3px;\n                white-space: nowrap;\n                color: ${grayEight};\n            }\n\n            ${child('valid-interval--failure')} {\n                font-size: 12px;\n                margin-top: 3px;\n                white-space: nowrap;\n                color: ${red};\n            }\n\n            ${child('interval-wrapper')} {\n                display: flex;\n                justify-content: flex-end;\n                width: 100%;\n            }\n\n            ${is('full-width')} ${child('input-row')} {\n                max-width: 100%;\n                width: 100%;\n            }\n\n            ${is('full-width')} {\n                max-width: 100%;\n                width: 100%;\n            }\n\n            ${child('input')} {\n                flex: 1;\n                min-width: var(--textfield-input-min-width, 80px);\n                padding: var(--textfield-input-padding, 0 16px);\n                height: 100%;\n                border: none;\n                width: inherit;\n                outline: none;\n                border-radius: 0px;\n                font-size: var(--textfield-input-font-size, 14px);\n                color: ${black};\n                background-color: transparent;\n                text-align: var(--textfield-input-text-align, initial);\n            }\n\n            ${child('input')}::placeholder {\n                font-size: 14px;\n                color: ${graySeven};\n            }\n\n            ${child('input')}:placeholder-shown {\n                white-space: nowrap;\n                overflow: hidden;\n                text-overflow: ellipsis;\n            }\n\n            ${is('disabled')} ${child('input')} {\n                color: ${grayFour};\n            }\n\n            ${is('disabled')} ${child('input')}::placeholder {\n                color: ${grayFour};\n            }\n\n            ${is('disabled')} ${child('label')} {\n                color: ${grayFour};\n            }\n\n            ${is('disabled')} ${child('unit')} {\n                color: ${grayFour};\n            }\n\n            ${is('disabled')} ${child('valid-interval')} {\n                color: ${grayFour};\n            }\n\n            ${is('disabled')} ${child('label-icon-slot')} {\n                color: ${grayFour};\n            }\n\n            ${is('disabled')} ${child('suffix-icon')} {\n                color: ${grayFour} !important;\n            }\n\n            ${is('readonly')} ${child('input')} {\n                color: ${black};\n                padding: 0px;\n            }\n\n            ${is('readonly')} ${child('input')}::placeholder {\n                color: ${black};\n            }\n\n            ${is('readonly')} ${child('label')} {\n                color: ${grayEight};\n            }\n\n            ${is('readonly')} ${child('unit')} {\n                color: ${grayEight};\n            }\n\n            ${is('readonly')} ${child('valid-interval')} {\n                color: ${grayFour};\n            }\n\n            ${is('readonly')} ${child('label-icon-slot')} {\n                color: ${grayFour};\n            }\n\n            ${is('readonly')} ${child('suffix-icon')} {\n                color: ${black} !important;\n            }\n\n            ${is('readonly')} ${child('border')}:after {\n                outline: none;\n                border: 0px;\n                background-color: transparant;\n            }\n\n            ${is('readonly')} ${child('border')}:hover:after {\n                outline: none;\n                border: 0px;\n                background-color: transparant;\n            }\n\n            ${is('readonly')} ${child('suffix-icon')} ::slotted([slot='suffix-icon-slot']) {\n                padding-right: 0px;\n                font-size: 24px;\n            }\n\n            ${child('input')}:focus {\n                outline: none;\n                border: none;\n            }\n\n            ${child('input')}:focus-visible {\n                outline: none;\n                border: none;\n            }\n\n            ${child('validation-message')} {\n                margin-top: 3px;\n                font-size: 12px;\n                color: ${red};\n                text-align: left;\n                position: absolute;\n            }\n\n            ::slotted([slot='side-button-slot']) {\n                height: 100%;\n                aspect-ratio: 1 / 1;\n            }\n\n            ::slotted([slot='label-icon-slot']) {\n                margin-top: 1px;\n                margin-left: 7px;\n                font-size: 20px;\n                margin-bottom: 7px;\n            }\n        `,\n    ] as CSSResultArray;\n};\n","/*\n * Metadata build info for package. Managed at build time by task tools/metadata.ts\n */\nexport const version = '0.0.0';\nexport const buildDate = '2021-10-06- 02:02:02.000';\n"],"names":["TextFieldEventType","TextFieldEvent","BaseInputEvent","sanitizeWhiteSpace","numStr","replace","unformatNumber","formatNumber","thousandSeparated","str","beforeDecimal","separator","afterDecimal","parts","split","splitDecimal","index","search","length","substring","applyThousandSeparator","formatDecimalSeparator","handleNumberFormatting","value","defaultErrorValue","backupValue","toLowerCase","indexOf","result","Number","toLocaleString","useGrouping","maximumFractionDigits","NaN","toString","test","hasValidSeparators","hasValidNegation","isValidNumber","TextField","TextField_1","BaseInput","this","inputElement","_value","inputValue","oldValue","_handleValueAsString","type","clearValidation","checkIsValid","checkIsRequired","requestUpdate","constructor","super","placeholder","required","validation","regexp","validationMessage","maxLength","validInterval","unit","fullWidth","autofocus","forceUnit","size","TextFieldSize","MEDIUM","readOnly","_showUnit","_isFocused","_resizeObserver","_animationFrame","_handleResize","bind","connectedCallback","id","UUID","focus","options","blur","disconnectedCallback","_uninstallResizeObserver","disconnect","firstUpdated","addEventListener","_onFocus","_onBlur","_installResizeObserver","document","activeElement","HTMLElement","update","_changedProperties","has","get","temp","renderLabelWrapper","baseClassName","label","html","_renderLabel","render","rootClasses","createClassName","tagName","disabled","readonly","additionalFeedbackType","FeedbackMessageType","Failure","unitHtml","validationHtml","slotHtml","TextFieldSlot","INPUT_BUTTON_SLOT","extraClass","additionalFeedbackMessage","validIntervalHtml","LABEL_ICON_SLOT","ifDefined","undefined","_onChange","_onInput","_onCopy","SUFFIX_ICON_SLOT","_renderFeedback","VALIDATION_EMPTY","customRegex","s","m","match","RegExp","stringToRegex","VALIDATION_CUSTOM","event","target","localValue","dispatchEvent","Change","detail","option","Object","assign","stopPropagation","Input","selection","getSelection","clipboardData","setData","preventDefault","entries","window","requestAnimationFrame","forEach","entry","contentRect","width","_inputDiv","style","unobserve","ResizeObserver","observe","__decorate","property","String","reflect","Boolean","converter","booleanConverter","attribute","query","HTMLInputElement","state","defineElement","styles","root","child","is","cssSelector","black","cssVariableAsVar","red","grayThree","grayFour","graySix","graySeven","grayEight","grayTen","baseInputStyle","css","version"],"sourceRoot":""}